---
title: Mounts
theme: dark
author: Prof. Calvin
subtitle: "Week 0x8 I"
institute: Crypto
format: 
    revealjs: 
        code-fold: true
        theme: dark
        mainfont: monospace
        slide-number: true
        show-slide-number: all
        width: 1050
        height: 700
        footer: "[Home](../index.html)"

execute:
    echo: true
    cache: true
    freeze: true  # never re-render during project render
    code-fold: false
---

# Announcements

- **Welcome** to variously CS 276/CS 540
  - Back to containers.
  - Week off from C
  - Two lectures with exercises
- **Action Items**:
  - Basedterm ✔️
  - BigRSA due 31 Mar
  
# Today

- The file system
- Linux and even... WINDOWS development????
    - Has science gone too far
- Symbolic Linkages
- Containers but good

# Motivation

![](imgs/teams_email.png)

# Motivation

![](imgs/gpt_teams.png)

# Motivation

![](imgs/gpt_teams_full.png)

# In brief

- I am often on a Linux partition when a non-technical PM attempts to reach me through MS Suite
    - I can run MS Suite on Linux which, uh, defeats to purpose of being on Linux

# In brief

- I am often on a Windows partition when I get questions like:
    - Can I fix this compatibility issue with whitespace line termination?
    - Will this run on Win and *nix?
    - Can you take a quick `md5sum` of this file?
- Often I just need to run a quick script or executable on files in a Windows file system using Linux syscalls.

# Separate Problem

1. `vim mywork.c`
2. `podman build -t tester .` # COPY mywork.c
4. `podman run tester python3 tester.py`
5. I get negative one billion points
6. `vim mywork.c`
7. `podman run tester python3 tester.py`  still gives negative on billion because the file systems are desynced.

# Bind Mounts

> [When you use a bind mount, a file or directory on the host machine is mounted from the host into a container. By contrast, when you use a volume, a new directory is created within Docker's storage directory on the host machine, and Docker manages that directory's contents.](https://docs.docker.com/engine/storage/bind-mounts/)

# Let's step through the process

- I make a container image that I'm relatively happy with.
    - Save this in a containerfile
    - Build it and have it live under the local `podman images` container repository.
    - Or... push to GHCR? Hmmm?
        - Soon™️

# Container image 

- I rarely use utilities other than these few.
```{.email filename="Containerfile"}
FROM ubuntu 

RUN apt update && apt install gcc vim python3 astyle -y
```

# Astyle

- `astyle` might be new to you
- It completely rules
- It's old, new one is `Clang-Tidy`
- Requires LLVM back-end which is...
- For the Rust class
- Also `coc` usually via `npm` and (gags) *neovim*

# Sample

```{.email}
$ cat octal.c
#include <stdio.h>
int main(){printf("%o\n",10);/* hm */return/* blah */ 0;}
$ gcc octal.c
$ ./a.out
12
$ astyle octal.c
Formatted  /home/user/tmp/octal.c
$ cat octal.c
#include <stdio.h>
int main() {
    printf("%o\n",10);/* hm */return/* blah */ 0;
}
$ gcc octal.c
$ ./a.out
12
```

# Hightlight

- `vim octal.c`

```{.C filename="before"}
#include <stdio.h>
int main(){printf("%o\n",10);/* hm */return/* blah */ 0;}
```

- `astyle octal.c`


```{.C filename="astyle"}
#include <stdio.h>
int main() {
    printf("%o\n",10);/* hm */return/* blah */ 0;
}
```

- Learn more `astyle -h` (I've never read it).

# Style Guides

- The people that taught me C wrote [this](https://uchicago-cs.github.io/student-resource-guide/style-guide/c.html)
- The iconic living legend Linux kernel hackers, who are never wrong, wrote [this](https://www.kernel.org/doc/html/v4.10/process/coding-style.html)
- I'm not up-to-date on Google C but Google C++ is [here](https://google.github.io/styleguide/cppguide.html)
    - Our "header" instruction is from their ["The #define Guard"](https://google.github.io/styleguide/cppguide.html#The__define_Guard) heading.

# Anyways

- To my knowledge this is all I've used this term outside of one-offs for testing.

```
gcc \
vim \
python3 \
astyle
```

- Though can probably manage `gcc` only after today.

# Let's step through the process

- I make a container image that I'm relatively happy with.
    - `vim Containerfile`
    - `podman build -t crypto .`
- Now, just spin up a transient container when I need anything.

# Run options

- Two competing idealogues
    - I am on `docker` documentation not podman
    - `podman` I think assumes you know what you are doing (I don't)
- Mount
```{.email}
docker run --mount type=bind,src=<host-path>,dst=<container-path>
```
- Volume
```{.email}
docker run --volume <host-path>:<container-path>
```

# Quote Docker

> [In general, `--mount` is preferred. The main difference is that the `--mount` flag is more explicit and supports all the available options.](https://docs.docker.com/engine/storage/bind-mounts/)

- Volume is basically being gradually depreciated.
- Volumes are in general podman/docker managed and...
    - We don't trust code other people wrote.
    - Or code we wrote.

# Sample

- [https://github.com/cd-c89/crypto/blob/main/podman/podman.sh](https://github.com/cd-c89/crypto/blob/main/podman/podman.sh)

```{.email}
podman run --mount type=bind,src=$PWD/..,target=/mnt -d -t crypto /bin/bash
```

# Breakdown

|Arg | Meaning|
|----| ---|
|podman|container command|
|run| start a container from some image |
| --mount | let container see files that live outside container |

# Breakdown

|Arg | Meaning|
|----| ---|
| type=bind | the files will be the same in a host folder and container folder |
| src= | This is the folder on the host |
| $PWD/.. | This is the file above the current working directory |

# Try it

- `$PWD` is a shell built-in like `$?`

```{.email}
$ echo $PWD
/home/user
$ pwd
/home/user
```

- Can use it in scripts.

```{.email}
$ ls $PWD/..
user
$ ls ..
user
```

# Sample

- Make the `..` directory on host be visible to container.

```{.email}
podman run --mount type=bind,src=$PWD/..,target=/mnt -d -t crypto /bin/bash
```


# Breakdown

|Arg | Meaning|
|----| ---|
| target= | This is the folder on the container |
| /mnt | That is the mnt (mount) directory under root `/` |
| -d | Start the container *detached* |

- I couldn't get this to work attached (on Windows) but didn't try very hard.
    - On Linux everything is easy (always)


# Breakdown

|Arg | Meaning|
|----| ---|
| -t | What should the name (tag) be of Container image? |
| crypto | The tag I used during `podman build` |
| /bin/bash | The executable to run within the container |


# Sample

```{.email}
podman run --mount type=bind,src=$PWD/..,target=/mnt -d -t crypto /bin/bash
```

1. Start a shell
2. In a container of the image based on the Containerfile
3. Where `/mnt` refers to files on the host machine

# See it

```{.email}
user@DESKTOP-THMS2PJ:~/dev/crypto/repos/crypto/podman$ /bin/bash podman.sh
c25d7d0db5d60efca7c1140dd9b8217a27e511caa4f5a5fdf2fc21e90ad45f17
user@DESKTOP-THMS2PJ:~/dev/crypto/repos/crypto/podman$ ls ..
4096_t  README.md  enigma  macros  ops_ui  podman  rsainc  shainc
user@DESKTOP-THMS2PJ:~/dev/crypto/repos/crypto/podman$ podman exec -it c2 /bin/bash
root@c25d7d0db5d6:/# ls /mnt
4096_t  README.md  enigma  macros  ops_ui  podman  rsainc  shainc
root@c25d7d0db5d6:/#
```

# More fun

- I have `gcc` inside that container.
- I can *compile* inside that container.
- Let's step through an example.
- On my host, that is, not in container:

```{.C filename="hi.c"}
#include <stdio.h>

int main() {
        printf("hi\n");
        return 0;
}
```

#

```{.email}
user@DESKTOP-THMS2PJ:~/dev/crypto/repos/crypto/podman$ cd ..
user@DESKTOP-THMS2PJ:~/dev/crypto/repos/crypto$ podman ps
CONTAINER ID  IMAGE                    COMMAND     CREATED        STATUS            PORTS       NAMES
c25d7d0db5d6  localhost/crypto:latest  /bin/bash   7 minutes ago  Up 7 minutes ago              determined_shockley
user@DESKTOP-THMS2PJ:~/dev/crypto/repos/crypto$ vim hi.c
user@DESKTOP-THMS2PJ:~/dev/crypto/repos/crypto$ cat hi.c
#include <stdio.h>

int main() {
        printf("hi\n");
        return 0;
}
user@DESKTOP-THMS2PJ:~/dev/crypto/repos/crypto$ podman exec -it c2 cat /mnt/hi.c
#include <stdio.h>

int main() {
        printf("hi\n");
        return 0;
}
```

# Compile

- I can compile within the Container
    - Just use `exec` (run command)
    - With `gcc`
    - With `/mnt` files
```{.email}
user@DESKTOP-THMS2PJ:~/dev/crypto/repos/crypto$ podman ps
CONTAINER ID  IMAGE                    COMMAND     CREATED        STATUS            PORTS       NAMES
c25d7d0db5d6  localhost/crypto:latest  /bin/bash   7 minutes ago  Up 7 minutes ago              determined_shockley
podman exec -it c2 gcc /mnt/hi.c -o /mnt/hi.out
```

# Run it

- Can run on the host device.
    - Well, making some pretty heavy assumptions.
    - This was ubuntu-to-ubuntu, after all
```{.email}
user@DESKTOP-THMS2PJ:~/dev/crypto/repos/crypto$ ./hi.out
hi
```
- Can run in the container
```{.email}
user@DESKTOP-THMS2PJ:~/dev/crypto/repos/crypto$ podman exec -it c2 ./mnt/hi.out
hi
```

# Ubuntu on Windows

- An astute learning will notice this means *it no longer matters which OS your text editor runs under*
- And here, in this class, we all love MS Windows.

# It's Popular

  <script type="text/javascript" src="https://ssl.gstatic.com/trends_nrtr/4031_RC01/embed_loader.js"></script>
  <script type="text/javascript">
    trends.embed.renderExploreWidget("TIMESERIES", {"comparisonItem":[{"keyword":"windows","geo":"US","time":"2004-01-01 2025-03-13"},{"keyword":"linux","geo":"US","time":"2004-01-01 2025-03-13"}],"category":0,"property":""}, {"exploreQuery":"date=all&geo=US&q=window,linux&hl=en","guestPath":"https://trends.google.com:443/trends/embed/"});
  </script>

# Windows Commands

- Windows has two command lines.
    - Don't blame me I voted for Free and Open Source Software (FOSS)
    - So does Windows, now (hence WSL)
1. `cmd.exe` from DOS, which runs .bat files
2. PowerShell, for .NET, which runs .ps1 files

# Why two shells?

- How does Windows work (pick one):
    - It doesn't.
    - I don't know.

# Scripts

- For reference, here is my `.sh` script to mount folders:

```{.email filename="podman.sh"}
podman run --mount type=bind,src=$PWD/..,target=/mnt -d -t crypto /bin/bash
```

- Here is how I run the same under the "Command" shell cmd.exe

```{.email filename="windows.bat"}
podman run --mount type=bind,src=%cd%\..,target=/mnt -d -t crypto /bin/bash
```

# One difference

- `podman` commands are the same on all OSes
- All commands within the container are the same, as the container is the same
- The only difference is the `src`
    - On Windows:
        - Paths are backslash vs. forward slash delineated
        - `%cd% not `$PWD` gives the current directory.
```{.email filename="windows.bat"}
podman run --mount type=bind,src=%cd%\..,target=/mnt -d -t crypto /bin/bash
```

# Windows Image

- Presumably I can refer to `wsl` images from the Windows host, I didn't try.

```{.email}
C:\Users\cd-desk\Documents\dev\crypto\podman>podman machine start
Starting machine "podman-machine-default"
API forwarding for Docker API clients is not available due to the following startup failures.
        could not start api proxy since expected pipe is not available: podman-machine-default

Podman clients are still able to connect.
Machine "podman-machine-default" started successfully

C:\Users\cd-desk\Documents\dev\crypto\podman>podman build -t crypto .
```

# Launch Container

```{.email}
C:\Users\cd-desk\Documents\dev\crypto\podman>.\window.bat

C:\Users\cd-desk\Documents\dev\crypto\podman>podman run --mount type=bind,src=C:\Users\cd-desk\Documents\dev\crypto\podman\..,target=/mnt -d -t crypto /bin/bash
9a1b0fb2a8f87d3639149ee41fb2dcb822f5a7cbd971a39cdc77150a79774765

C:\Users\cd-desk\Documents\dev\crypto\podman>
```

# vim

- I of course *also* have `vim` installed on Windows, but I don't know when I did that or how.

```{.email}
C:\Users\cd-desk\Documents\dev\crypto>vim hi.c

C:\Users\cd-desk\Documents\dev\crypto>type hi.c
#include <stdio.h>

int main() {
        printf("i wrote this on windows lol meow\n");
        return 0;
}

C:\Users\cd-desk\Documents\dev\crypto>
```

# Compile

```{.email}
C:\Users\cd-desk\Documents\dev\crypto>podman exec -it 9a gcc /mnt/hi.c -o /mnt/hi.out

C:\Users\cd-desk\Documents\dev\crypto>dir hi.out
 Volume in drive C has no label.
 Volume Serial Number is 5CEC-43F9

 Directory of C:\Users\cd-desk\Documents\dev\crypto

03/12/2025  05:33 PM            15,960 hi.out
               1 File(s)         15,960 bytes
               0 Dir(s)  99,378,515,968 bytes free

C:\Users\cd-desk\Documents\dev\crypto>
```

# Run

```{.email}
C:\Users\cd-desk\Documents\dev\crypto>podman exec -it 9a ./mnt/hi.out
i wrote this on windows lol meow

C:\Users\cd-desk\Documents\dev\crypto>
```

- Windows Development: It's easy.

# It's not

- Windows opened a window asking me what to do when I tried to run this.

```{.email}
C:\Users\cd-desk\Documents\dev\crypto>.\hi.out

C:\Users\cd-desk\Documents\dev\crypto>
```

# Exercise

- Windows users:
    - Get this to run in PowerShell
- Mac users:
    - Get this to run on Mac, the .sh should mostly work. Right?
- Linux users:
    - Develop a "portable" binary that works across distributions.

# Announcements

- **Welcome** to variously CS 276/CS 540
  - Back to containers.
  - Week off from C
  - Two lectures with exercises
- **Action Items**:
  - BigRSA due 31 Mar