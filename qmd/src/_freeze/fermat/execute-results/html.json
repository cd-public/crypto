{
  "hash": "a92fb22e63700c97d44bc568af37808d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Fermat\ntheme: dark\nauthor: Prof. Calvin\nsubtitle: \"Week 0x6\"\ninstitute: Crypto\nformat: \n    revealjs: \n        code-fold: true\n        theme: dark\n        mainfont: monospace\n        slide-number: true\n        show-slide-number: all\n        width: 1050\n        height: 700\n        footer: \"[Home](../index.html)\"\n\nexecute:\n    echo: true\n    cache: true\n    freeze: true  # never re-render during project render\n    code-fold: false\n---\n\n\n# Announcements\n\n- **Welcome** to variously CS 276/CS 540\n  - We introduce RSA, and \n  - Why it makes sense, courtesy Fermat\n- **Action Items**:\n  - 4096_t due this week\n  - RSAinC due next week\n  \n# Today\n- New\n  - Public Key Cryptography\n  - Fermat's little theorem\n  - RSA\n\n# Public Key Cryptography\n\n# Motivating Example\n\n- Canonical Example is Snowden x Greenwald 2013\n  - Snowden wished to communicate a secret to Greenwald\n  - Snowden and Greenwald had never met\n  - Snowden could not transmit the secret in plain text\n- Vs enigma, no prior agreement on how to encrypt/decrypt\n\n# Reads [Cryptobook](https://toc.cryptobook.us/book.pdf)\n\n> A key exchange protocol $P$ is a pair of probabilistic machines $(A, B)$ that take turns in sending messages to each other.\nAt the end of the protocol, when both machines terminate, they both obtain the same value $k$. A\nprotocol transcript $T_P$ is the sequence of messages exchanged between the parties in one exe-\ncution of the protocol. \n\n# Reads [Cryptobook](https://toc.cryptobook.us/book.pdf)\n\n> Since $A$ and $B$ are probabilistic machines, we obtain a different transcript\nevery time we run the protocol. Formally, the transcript $T_P$ of protocol $P$ is a random variable, which is a function of the random bits generated by $A$ and $B$. The eavesdropping adversary $E$ sees the entire transcript $T_P$ and its goal is to figure out the secret $k$.\n\n# Set the Stage\n\n- Snowden has e.g. files on a harddrive\n  - The files contain keywords that cannot be safely transmitted over US-based internet connections.\n  - Snowden is based in Hawai'i with no access to non-US-based connections.\n  - Snowden needs to encrypt the files in such as a way that *only* a trusted destination may read them.\n\n# First Contact\n\n- Snowden contacts Greenwald to agree to use a secure messaging protocol\n  - Use of such protocols is relatively non-suspicious, used for banking etc.\n  - It was enough to raise alarms for Snowden, but not quickly enough to stop him.\n- Greenwald agrees to a recommended protocol\n\n# Initialization\n\n- Greenwald generates a combination of numerical values on a local computing device.\n  - One of these is the public-key, which Greenwalk may circulate broadly.\n- We see an example of such a technology on the next slide.\n\n# SecureDrop\n\n- Embed doesn't work for what are likely obvious reasons:\n- [Link](https://theintercept.com/source/)\n\n<iframe \n  id=\"source\"\n  title=\"source\"\n  width=\"70%\"\n  height=\"70%\"\n  src=\"https://theintercept.com/source/\"></iframe>\n\n# Safety Note\n\n- Probably dropping to *The Intercept* is not recommended.\n- Reality Winner is currently incarcerated due to a leak fumbled by *The Intercept*\n- [Read more](https://www.google.com/search?client=firefox-b-1-d&q=reality+winner)\n\n# Step 2\n\n- Greenwald & co. hold in reserve a *private-key*\n- They defend it like lives depend on it, as they did for Winner and Snowden.\n- So: not stored in plaintext on a hard-drive\n- So: if on a hard-drive, hard-drive is in a secure site from e.g. federal law enforcement.\n\n# Step 3\n\n- Snowden, and hopefully enough others to avoid suspicion, use the public key to encrypt their payload.\n- In addition to e.g. top secret documents, concerned community members could send in less-secret materials such as analysis of policing data with which they would rather not be affiliated.\n- Journalists sift through the inputs.\n\n# It's that simple\n\n- Okay but like how do we do that:\n  - Any eaves-dropping adversary can see the public key.\n  - One-to-one communication of a key is already dangerous\n  - All this encryption/decryption needs to be managable by e.g. non-computing specialized journalists.\n\n\n# Today\n- New\n  - &check; Public Key Cryptography\n  - Fermat's little theorem\n  - RSA\n\n\n# Fermat's Little Theorem\n\n# Numbers\n\n- We have already learned from SHA and others, that if 'its in' a computer we can say it's a number.\n- We have already learned, from 4096_t and others, that numbers of arbitrarily large sizes can undertake operations in a computer.\n- We find a numerical operation that scrambles bits given a public key that is reversible only with a private key.\n\n# Theorem\n\n$$\n\\exists e, d, p, q \\in \\mathbb{N} : \\forall m \\in \\mathbb{N} : (m^e)^d \\equiv m \\pmod{pq}\n$$\n\n- $m$ : message, such as top secret documents or your credit card number.\n- $e$ : encryptor, the public key, that Greenwald or bandcamp post pubicly\n- $d$ : decryptor, the private key, that Greenwald stores in a bombproof safe or a dubiously secure AWS instance.\n\n# Strategy\n\n- We show Fermat's little theorem.\n\n$$\n\\begin{align}\n\\forall a \\in \\mathbb{N}, p \\in \\mathbb{P} : \\gcd(p,a) = 1 \\implies a^{p-1} \\equiv 1 \\pmod{p} \\\\ \n\\end{align}\n$$\n\n- That is, there's a prime you can raise a number to in order to get `1` mod that prime.\n\n# Proof\n\n- This is called \"combinatorics\"\n  - Look, I thought it was gonna be a CS class too.\n- We go live to a proof I never learned but love, \"counting necklaces\"\n  - Wikipedia is my legal guardian.\n\n# Necklaces\n\n-   Simplest known proof.\n-   Combinatorial proof.\n-   Adapted from [Golomb](https://en.wikipedia.org/wiki/Solomon_W._Golomb)'s proof.\n    - Golomb is an electrical engineer who allegedly invented Tetris\n    - A lot of people allegedly did that though.\n\n# Simplification\n\n*   Assume:\n$$\n0 \\leq a \\leq p - 1\n$$\n*   Consequence of modular arithmetic.\n$$\na^p \\pmod{p} \\lt p.\n$$\n\n\n# Simplification\n\n- We note the following expressions are logicially equivalent.\n\n$$\na^{p-1} \\equiv 1 \\pmod{p}\n$$\n\n- Multiply by $a$\n\n$$\na^p \\equiv a \\pmod{p}\n$$\n\n\n# Strings\n\n-   Consider strings/necklaces of length $p$.\n-   Alphabet with $a$ symbols.\n    - Jeweler with $a$ gemstones \n-   Total number of strings is $a^p$.\n-   Take $p = 5, a = 2$ say \"amethyst\" and \"beryl\"\n\n```{.py}\nnecklaces = [\n    \"AAAAA\", \"AAAAB\", \"AAABA\", \"AAABB\", \"AABAA\", \"AABAB\", \"AABBA\", \"AABBB\",\n    \"ABAAA\", \"ABAAB\", \"ABABA\", \"ABABB\", \"ABBAA\", \"ABBAB\", \"ABBBA\", \"ABBBB\",\n    \"BAAAA\", \"BAAAB\", \"BAABA\", \"BAABB\", \"BABAA\", \"BABAB\", \"BABBA\", \"BABBB\",\n    \"BBAAA\", \"BBAAB\", \"BBABA\", \"BBABB\", \"BBBAA\", \"BBBAB\", \"BBBBA\", \"BBBBB\"\n]\n```\n\n\n# Necklaces\n\n-   Strings as necklaces.\n-   Regard rotationally related necklaces as friends.\n```{.py}\ndef friends(n, m):\n  return any([n == m[i:] + m[:i] for i in range(len(m))])\n\nassert(friends(\"AAABB\", \"BBAAA\"))\n```\n\n# Friends 5gether\n\n- Get it? Not 2gether?\n\n```{.py}\nfriends = [\n    [\"AAAAB\", \"AAABA\", \"AABAA\", \"ABAAA\", \"BAAAA\"],\n    [\"AAABB\", \"AABBA\", \"ABBAA\", \"BBAAA\", \"BAAAB\"],\n    [\"AABAB\", \"ABABA\", \"BABAA\", \"ABAAB\", \"BAABA\"],\n    [\"AABBB\", \"ABBBA\", \"BBBAA\", \"BBAAB\", \"BAABB\"],\n    [\"ABABB\", \"BABBA\", \"ABBAB\", \"BBABA\", \"BABAB\"],\n    [\"ABBBB\", \"BBBBA\", \"BBBAB\", \"BBABB\", \"BABBB\"],\n    [\"AAAAA\"],\n    [\"BBBBB\"]\n]\n```\n\n# Aside\n\n- We note this suffices as a proof that:\n\n$$\n2^5 = 32 \\equiv 2 \\pmod{5}\n$$\n\n# Counting Friends\n\n- We note:\n  - There are exactly the same number of unique rotations as the length of the necklace\n    - After that we repeat.\n    - So... $p \\equiv 0 \\pmod{p}$ and $p$ is length.\n  - Unless there is only one symbol, then exactly one rotation.\n    - There are exactly $a$ unique symbols, so\n    - Exactly $a$ strings of this form.\n\n# Strategy\n\n- We show Fermat's little theorem.\n\n$$\n\\begin{align}\n\\forall a \\in \\mathbb{N}, p \\in \\mathbb{P} : \\gcd(p,a) = 1 \\implies a^{p-1} \\equiv 1 \\pmod{p} \\\\ \n\\end{align}\n$$\n\n- Proof\n```{.py}\nnofriends = [\n    [\"AAAAA\"],\n    [\"BBBBB\"]\n]\n```\n\n\n# Today\n- New\n  - &check; Public Key Cryptography\n  - &check; Fermat's little theorem\n  - RSA\n\n\n# New Goal\n\n- We want:\n$$\na^p \\equiv a \\pmod{p} \\implies \n$$\n$$\n\\exists e, d, p, q \\in \\mathbb{N} : \\forall m \\in \\mathbb{N} : (m^e)^d \\equiv m \\pmod{pq}\n$$\n- We can restrict $e,d,p,q$\n$$\n\\exists e, d\\in \\mathbb{N},  p, q \\in \\mathbb{P}: \\forall m \\in \\mathbb{N} : (m^e)^d \\equiv m \\pmod{pq}\n$$\n\n# Insight\n\n- We use something called the \"Carmichael function\" denoted, confusingly, as $\\lambda$:\n\n$$\n\\lambda(n) = \\text{min}(\\{m : \\forall a : gcd(a,n) = 1 : a^m \\equiv 1 \\pmod{n}\\})\n$$\n\n- Say, $\\lambda(n)$ is the smallest number that coprimes to $n$ are equivalent to zero mod $n$.\n- Easy for prime $p$, its $\\lambda(p) = p - 1$.\n  - Just try `5`, it's not too bad.\n\n# RSA\n\n1. Choose two big primes $p$, $q$\n2. Find $n = pq$\n3. Find $\\lambda(n)$\n4. Find $e : e \\lt \\lambda(n) \\land \\gcd(e, \\lambda (n)) = 1$\n5. Find $d : d \\equiv e^{-1} \\pmod{\\lambda (n)}$\n\n# 1. $p$, $q$\n\n- Do `4096_t` and use, probably, 6k+1 or a performance optimization.\n\n::: {#b041dc0b .cell execution_count=1}\n``` {.python .cell-code code-fold=\"false\"}\n# this will still be slow with big numbers\ndef find_large_prime(k):\n    candidate = 6 * k + 1\n    # you need a prime tester\n    while not is_prime(candidate):\n        candidate += 6\n    return candidate\n```\n:::\n\n\n- LibGMP provides `gmp_nextprime`\n\n\n# 2. $n$\n\n```{.C}\nn = p * q;\n```\n\n# 3. $\\lambda(n)$\n\n- This one is kept secret by the way.\n- It so happens:\n$$\n\\forall p,q \\in \\mathbb{P} : \\lambda(pq) = \\text{lcm}(p-1, q-1)\n$$\n- There's fast ways to this, but anything goes this week.\n\n# Aside: lcm\n\n- GitHub Copilot provides:\n\n::: {#62a92a5d .cell execution_count=2}\n``` {.python .cell-code code-fold=\"false\"}\ndef gcd(a, b):\n    \"\"\"Calculate the Greatest Common Divisor of a and b.\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"Calculate the Least Common Multiple of a and b.\"\"\"\n    return a * b // gcd(a, b)\n```\n:::\n\n\n# 4. $e$\n\n- Find $e : e \\lt \\lambda(n) \\land \\gcd(e, \\lambda (n)) = 1$\n- You know what is comprime with whatever $\\lambda (n)$ is?\n- A prime number.\n```{.C}\ne = 65537; // 2 ^ 16 + 1\n```\n\n# Aside: Hamming weight\n\n1. What is `65537` in binary?\n2. Is multiplying hard?\n3. Is bit-shifting hard?\n4. Can we combine bit-shifts to multiple?\n5. If we did that, what numbers would be easiest to multiply by?\n\n# 5. $d$\n\n- This one is very secret!\n- Find $d : d \\equiv e^{-1} \\pmod{\\lambda (n)}$\n- There's a good way to do this, or...\n- Find $de \\equiv 1 \\pmod{\\lambda (n)}$\n  - Just start at $d = 1$ and go up until you find it.\n  - It'll be less than $\\lambda (n)$\n\n# Today\n- New\n  - &check; Public Key Cryptography\n  - &check; Fermat's little theorem\n  - &check; RSA\n\n# Using RSA\n\n# Let's make a secret\n\n::: {#0990b382 .cell execution_count=3}\n``` {.python .cell-code code-fold=\"false\"}\ns = \"C\" # a random string\n```\n:::\n\n\n# Prime checker\n\n::: {#427beee3 .cell execution_count=4}\n``` {.python .cell-code code-fold=\"false\"}\nis_prime = lambda n : all([n % i for i in range(2, int(n **.5)+1)])\nis_prime(60), is_prime(61)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n(False, True)\n```\n:::\n:::\n\n\n# Two primes\n\n::: {#adf71b23 .cell execution_count=5}\n``` {.python .cell-code code-fold=\"false\"}\nhide_p = lambda: find_large_prime(10)\nhide_q = lambda: find_large_prime(15)\nn = hide_p() * hide_q()\nn\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n5917\n```\n:::\n:::\n\n\n# Confusingly Named\n\n::: {#8db05eb1 .cell execution_count=6}\n``` {.python .cell-code code-fold=\"false\"}\nhide_λ = lambda: lcm(hide_p() - 1,  hide_q() - 1)\n```\n:::\n\n\n# Public Key\n\n::: {#d6af31e5 .cell execution_count=7}\n``` {.python .cell-code code-fold=\"false\"}\ne = 65537\n```\n:::\n\n\n# $d$ (decryptor)\n\n::: {#075db7a8 .cell execution_count=8}\n``` {.python .cell-code code-fold=\"false\"}\ndef find_d():\n  d = 1\n  while 1 != (d * e % hide_λ()):\n    d += 1\n  return d\n```\n:::\n\n\n# The Process\n\n- Encrypt our message.\n\n::: {#4bdb248a .cell execution_count=9}\n``` {.python .cell-code code-fold=\"false\"}\nm = ord(s) # to number\nc = m ** e\nm, c, c % n\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">ValueError</span>                                Traceback (most recent call last)\nFile <span class=\"ansi-green-fg ansi-bold\">~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\formatters.py:711</span>, in <span class=\"ansi-cyan-fg\">PlainTextFormatter.__call__</span><span class=\"ansi-blue-fg ansi-bold\">(self, obj)</span>\n<span class=\"ansi-green-fg\">    704</span> stream <span style=\"color:rgb(98,98,98)\">=</span> StringIO()\n<span class=\"ansi-green-fg\">    705</span> printer <span style=\"color:rgb(98,98,98)\">=</span> pretty<span style=\"color:rgb(98,98,98)\">.</span>RepresentationPrinter(stream, <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>verbose,\n<span class=\"ansi-green-fg\">    706</span>     <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>max_width, <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>newline,\n<span class=\"ansi-green-fg\">    707</span>     max_seq_length<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>max_seq_length,\n<span class=\"ansi-green-fg\">    708</span>     singleton_pprinters<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>singleton_printers,\n<span class=\"ansi-green-fg\">    709</span>     type_pprinters<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>type_printers,\n<span class=\"ansi-green-fg\">    710</span>     deferred_pprinters<span style=\"color:rgb(98,98,98)\">=</span><span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>deferred_printers)\n<span class=\"ansi-green-fg ansi-bold\">--&gt; 711</span> <span class=\"ansi-yellow-bg\">printer</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">pretty</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">obj</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    712</span> printer<span style=\"color:rgb(98,98,98)\">.</span>flush()\n<span class=\"ansi-green-fg\">    713</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> stream<span style=\"color:rgb(98,98,98)\">.</span>getvalue()\n\nFile <span class=\"ansi-green-fg ansi-bold\">~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\IPython\\lib\\pretty.py:394</span>, in <span class=\"ansi-cyan-fg\">RepresentationPrinter.pretty</span><span class=\"ansi-blue-fg ansi-bold\">(self, obj)</span>\n<span class=\"ansi-green-fg\">    391</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> <span style=\"color:rgb(0,135,0)\">cls</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> _get_mro(obj_class):\n<span class=\"ansi-green-fg\">    392</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">cls</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>type_pprinters:\n<span class=\"ansi-green-fg\">    393</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># printer registered in self.type_pprinters</span>\n<span class=\"ansi-green-fg ansi-bold\">--&gt; 394</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">type_pprinters</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">cls</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">obj</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">cycle</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    395</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg\">    396</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># deferred printer</span>\n<span class=\"ansi-green-fg\">    397</span>         printer <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_in_deferred_types(<span style=\"color:rgb(0,135,0)\">cls</span>)\n\nFile <span class=\"ansi-green-fg ansi-bold\">~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\IPython\\lib\\pretty.py:649</span>, in <span class=\"ansi-cyan-fg\">_seq_pprinter_factory.&lt;locals&gt;.inner</span><span class=\"ansi-blue-fg ansi-bold\">(obj, p, cycle)</span>\n<span class=\"ansi-green-fg\">    647</span>         p<span style=\"color:rgb(98,98,98)\">.</span>text(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">,</span><span style=\"color:rgb(175,0,0)\">'</span>)\n<span class=\"ansi-green-fg\">    648</span>         p<span style=\"color:rgb(98,98,98)\">.</span>breakable()\n<span class=\"ansi-green-fg ansi-bold\">--&gt; 649</span>     <span class=\"ansi-yellow-bg\">p</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">pretty</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">x</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    650</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">len</span>(obj) <span style=\"color:rgb(98,98,98)\">==</span> <span style=\"color:rgb(98,98,98)\">1</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(obj, <span style=\"color:rgb(0,135,0)\">tuple</span>):\n<span class=\"ansi-green-fg\">    651</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># Special case for 1-item tuples.</span>\n<span class=\"ansi-green-fg\">    652</span>     p<span style=\"color:rgb(98,98,98)\">.</span>text(<span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">,</span><span style=\"color:rgb(175,0,0)\">'</span>)\n\nFile <span class=\"ansi-green-fg ansi-bold\">~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\IPython\\lib\\pretty.py:394</span>, in <span class=\"ansi-cyan-fg\">RepresentationPrinter.pretty</span><span class=\"ansi-blue-fg ansi-bold\">(self, obj)</span>\n<span class=\"ansi-green-fg\">    391</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">for</span> <span style=\"color:rgb(0,135,0)\">cls</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> _get_mro(obj_class):\n<span class=\"ansi-green-fg\">    392</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">cls</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">in</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>type_pprinters:\n<span class=\"ansi-green-fg\">    393</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># printer registered in self.type_pprinters</span>\n<span class=\"ansi-green-fg ansi-bold\">--&gt; 394</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">type_pprinters</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">cls</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">obj</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">cycle</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    395</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg\">    396</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># deferred printer</span>\n<span class=\"ansi-green-fg\">    397</span>         printer <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\">self</span><span style=\"color:rgb(98,98,98)\">.</span>_in_deferred_types(<span style=\"color:rgb(0,135,0)\">cls</span>)\n\nFile <span class=\"ansi-green-fg ansi-bold\">~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\IPython\\lib\\pretty.py:787</span>, in <span class=\"ansi-cyan-fg\">_repr_pprint</span><span class=\"ansi-blue-fg ansi-bold\">(obj, p, cycle)</span>\n<span class=\"ansi-green-fg\">    785</span> <span style=\"font-style:italic;color:rgb(175,0,0)\">\"\"\"A pprint that just redirects to the normal repr function.\"\"\"</span>\n<span class=\"ansi-green-fg\">    786</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Find newlines and replace them with p.break_()</span>\n<span class=\"ansi-green-fg ansi-bold\">--&gt; 787</span> output <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">repr</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">obj</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    788</span> lines <span style=\"color:rgb(98,98,98)\">=</span> output<span style=\"color:rgb(98,98,98)\">.</span>splitlines()\n<span class=\"ansi-green-fg\">    789</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> p<span style=\"color:rgb(98,98,98)\">.</span>group():\n\n<span class=\"ansi-red-fg ansi-bold\">ValueError</span>: Exceeds the limit (4300 digits) for integer string conversion; use sys.set_int_max_str_digits() to increase the limit</pre>\n```\n:::\n\n:::\n:::\n\n\n# Too Big\n\n- Haha Python can't handle big numbers.\n- Not to worry, we're working in modular arithmetic.\n\n::: {#ee450c9a .cell execution_count=10}\n``` {.python .cell-code code-fold=\"false\"}\ndef modexp(m, e, n):\n  if e == 0:\n      return 1\n  if e == 1:\n      return m % n\n  if e % 2:\n      return (m * modexp(m*m % n, e//2, n)) % n\n  return  modexp(m*m % n, e//2, n) % n\n```\n:::\n\n\n# Encrypt\n\n- Encrypt our message.\n\n::: {#b3431d20 .cell execution_count=11}\n``` {.python .cell-code code-fold=\"false\"}\nm = ord(s) # to number\nc = modexp(m, e, n)\nm, c\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n(67, 5887)\n```\n:::\n:::\n\n\n# Decrypt\n\n- Decrypt our message.\n\n::: {#f7072ad5 .cell execution_count=12}\n``` {.python .cell-code code-fold=\"false\"}\nnew_m = modexp(c % n, find_d(), n)\nnew_m, m\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n(67, 67)\n```\n:::\n:::\n\n\n# Is it good?\n\n::: {#21e2c5f7 .cell execution_count=13}\n``` {.python .cell-code code-fold=\"false\"}\nchr(modexp(modexp(ord(\"C\"), e, n), find_d(), n))\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n'C'\n```\n:::\n:::\n\n\n# All\n\n```python\ndef find_large_prime(k):\n    is_prime = lambda n : any([n % i for i in range(2, int(n **.5))])\n    candidate = 6 * k + 1\n    # you need a prime tester\n    while not is_prime(candidate):\n        candidate += 6\n    return candidate\n\ndef lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return a * b // gcd(a, b)\n\ns = \"C\" # a random string\nm = ord(s) # to number\n\nhide_p = lambda: find_large_prime(10)\nhide_q = lambda: find_large_prime(15)\nn = hide_p() * hide_q()\n\nhide_λ = lambda: lcm(hide_p() - 1,  hide_q() - 1)\n\ne = 65537 # encryptor\n\ndef find_d():\n    d = 1\n    while 1 != (d * e % hide_λ()):\n        d += 1\n    return d\n\ndef modexp(m, e, n):\n    if e == 0:\n        return 1\n    if e == 1:\n        return m % n\n    if e % 2:\n        return (m * modexp(m*m % n, e//2, n)) % n\n    return  modexp(m*m % n, e//2, n) % n\n\nc = modexp(m, e, n) # ciphertext\n\nnew_m = modexp(c % n, find_d(), n)\n\nprint(chr(modexp(modexp(ord(\"C\"), e, n), find_d(), n)))\n```\n\n",
    "supporting": [
      "fermat_files"
    ],
    "filters": [],
    "includes": {}
  }
}