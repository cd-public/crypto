<style>
  * {
    background-repeat: no-repeat;
    background-attachment: fixed;
  }
</style>

<script>
  [].forEach.call(document.querySelectorAll(".btn[data-bs-toggle='collapse']"), ($btn) => $btn.onmouseup = () => setTimeout(() => $btn.innerText = $btn.attributes["aria-expanded"].value === "true" ? "Hide" : "Show", 0))
</script>

---
title: KeyGen
subtitle: "Lab 0x6"

format: 
  html:
    theme: vapor
    mainfont: monospace
    highlight-style: github
    title-block-banner: true
---

# Review&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#review" role="button" aria-expanded="false" aria-controls="review">Show</a>

::: {#review .collapse .multi-collapse}

### Goal: Public Key Encryption

|Review:    | Newish:    |
| --------- | ---------- |
|- RSA   | - base64  |
|- FileIO  | - hexdump  |
|  | -OpenSSL  |

- In the lab you should've finished key generation.
- For this assignment we will:
  - Write keys to files
  - Encrpyt and decrypt based those keys.
- We will motivate with command line affairs.
  - I will use a wide range of command line utilities without documenting their installation.
  - This is left as an exercise to the student.

:::


# genrsa&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#genrsa" role="button" aria-expanded="false" aria-controls = "genrsa">Show</a>

::: {#genrsa .collapse .multi-collapse}

- Our motivating example for RSA is from the [GitHub docs](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)
```{.email}
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
```
- I found `ssh-keygen` difficult to work with, which is a good and bad thing.
  - It should not be easy to examine private keys, but...
  - We want to examine private keys.


## OpenSSL

- `ssh-keygen` may or may not be implemented on top of a larger and more culturally significant "OpenSSL" library.
  - It *always* was and now it *sometimes* is.
- OpenSSL has a cool backstory, [Read more](https://en.wikipedia.org/wiki/OpenSSL)
- While used in practice in security relevant applications (at least to the best of my knowledge) it could perhaps better be understood as an educational or informational library...
  - ...and is therefore well-suited to out purposes.

### `genrsa`

- The OpenSSL command to generate an private key is as follows:
  - `openssl` is the command-line utility
  - `genrsa` is the directive to generate a private rsa key.
```{.email}
openssl genrsa
```
- This is a big difficult to work with so we also:
  - Use `-out` specifies the destination
    - I specify I am not making security considerations by naming the key "unsafe"
    - I use one of several industry standard formats, `.pem`
      - For "privacy enhanced email"
      - It is a purely text-based format.
    - I make a 512 bit key, the smallest possible in OpenSSL, to make understanding it easier.
```{.email}
openssl genrsa
```
- I found `unsafe.pem` in the hidden `.ssh` folder in my home (`~`) directory.
  - It will not show up when naively listing files and folders via `ls`
  - It will show up when listing "all" files and folders via `ls -a`

```{.email}
openssl genrsa -out unsafe.pem 512
```

- Inspect the file with `cat unsafe.pem` or our most beloved text editor.

```{.email filename="unsafe.pem"}
-----BEGIN PRIVATE KEY-----
MIIBUwIBADANBgkqhkiG9w0BAQEFAASCAT0wggE5AgEAAkEAsWQ0ya/HGdpuzqJU
UEzr3OFj8grPajdPlCg7NHmsdNHLEiDui6rEgEb94Y43mAjUDn9NBfVHY6eLI5Bx
gbopwwIDAQABAkAt9dyHdPeNBz82YnCd7ZAexnbyu0JKLtJ7fID6c5vvGA2qjjXL
ZnuUqLw4rVckPod0f5GsCDxs7YVfJnikL39hAiEA10gzhGV1Wkbs2J8TL84rOkgB
VDlWeAcjRzlqHW54sTUCIQDS8V6aq+dF/i/bi06WY4+hFkq9OQWvgIzqKzj3WC8G
FwIgItv6G5IiMoARkfIQNUl5DnLiZDT0n3Lob3wIhsOAn5ECIEAUrR2lnTNpHZa/
QhdzlV1lTT0ghnajQaudh8e0FUzvAiAFk8f2Mjmkkt7noGGXGdIV7kKhYU6gA6yw
0bjjw1yM2w==
-----END PRIVATE KEY-----
```

- Generate a new key and see how it differs, or doesn't. Try other sizes.

### A Key in 3 Parts

- We recall that the private key minimally contains:
  - `n`, a modular base
  - `e`, an encryptor, and 
  - `d`, a descryptor.
- We note that:
  - That file is much larger than 512 bytes.
  - 522 characters - more than 8x in size.
  - We use `wc` (word count)
  ```{.email filename="wc unsafe.pem"}
10  14 522 unsafe.pem
```
  - So what is in there?

### `-text`

- OpenSSL provides a utility to see a formated readout of the contents of a `.pem` file.
```{.email}
openssl rsa -in unsafe.pem -text
```
- Mine appeared as follows.
  - We note you will have the same fields...
  - in similar but not exactly the same level of precision (number of digits)
  - but different values.
- If you any of your fields are e.g., of twice as many digits, check the size of the key you generated with `genrsa`

```{.email filename="openssl rsa -in unsafe.pem -text"}
Private-Key: (512 bit, 2 primes)
modulus:
    00:98:26:e6:f8:71:3a:bc:e9:ff:2a:47:90:85:84:
    ba:8e:22:3b:8e:e9:70:0e:64:af:6e:44:06:65:c2:
    de:ff:34:ce:87:f1:a1:94:7b:f9:92:7d:9f:ea:aa:
    b7:93:03:85:4a:57:a1:c8:56:ac:0d:ca:4c:da:59:
    1f:ef:ba:a3:d7
publicExponent: 65537 (0x10001)
privateExponent:
    3a:20:5a:8a:bd:4f:30:4e:c0:c1:99:37:78:1a:bd:
    de:80:eb:79:ec:6a:77:c5:35:54:0d:be:d7:ef:7b:
    9b:c9:2c:f0:3f:95:4f:3f:cc:b2:61:bb:50:da:5f:
    b2:49:07:ee:70:95:4a:fc:ce:6e:31:a1:35:d2:c1:
    02:8e:9b:01
prime1:
    00:c8:be:97:b0:ff:d0:20:b2:82:22:50:81:84:f5:
    0d:36:be:2e:ef:89:db:f5:cf:da:73:95:05:56:5e:
    f5:d2:57
prime2:
    00:c2:08:3f:d7:17:84:8d:b5:c7:ac:91:ba:84:a4:
    f8:0d:95:87:a8:47:79:e8:fa:4c:7d:fa:83:26:91:
    55:ca:81
exponent1:
    00:85:fc:20:06:f5:57:16:db:ce:5b:d4:db:fd:c0:
    09:87:c6:3c:51:88:f4:15:07:1c:49:14:e7:b1:14:
    44:82:95
exponent2:
    07:79:01:dc:6a:cf:74:15:b8:26:f1:45:d9:ad:f0:
    cf:b5:1e:90:60:90:55:64:ae:65:7b:ac:69:63:d7:
    86:01
coefficient:
    00:a7:e5:ed:d4:dd:16:e2:7e:90:de:ea:8e:7c:25:
    74:bb:88:eb:ea:0a:9d:07:75:25:dd:7e:3f:7a:0f:
    b4:6e:25
writing RSA key
-----BEGIN PRIVATE KEY-----
MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAmCbm+HE6vOn/KkeQ
hYS6jiI7julwDmSvbkQGZcLe/zTOh/GhlHv5kn2f6qq3kwOFSlehyFasDcpM2lkf
77qj1wIDAQABAkA6IFqKvU8wTsDBmTd4Gr3egOt57Gp3xTVUDb7X73ubySzwP5VP
P8yyYbtQ2l+ySQfucJVK/M5uMaE10sECjpsBAiEAyL6XsP/QILKCIlCBhPUNNr4u
74nb9c/ac5UFVl710lcCIQDCCD/XF4SNtceskbqEpPgNlYeoR3no+kx9+oMmkVXK
gQIhAIX8IAb1VxbbzlvU2/3ACYfGPFGI9BUHHEkU57EURIKVAiAHeQHcas90Fbgm
8UXZrfDPtR6QYJBVZK5le6xpY9eGAQIhAKfl7dTdFuJ+kN7qjnwldLuI6+oKnQd1
Jd1+P3oPtG4l
-----END PRIVATE KEY-----
```

- While I can't find a reference in OpenSSL documentation, to the best of my knowledge, this format is described by [RFC 3447](https://www.rfc-editor.org/info/rfc3447)

```{.email filename="rfc3447"}
   An RSA private key should be represented with the ASN.1 type
   RSAPrivateKey:

      RSAPrivateKey ::= SEQUENCE {
          version           Version,
          modulus           INTEGER,  -- n
          publicExponent    INTEGER,  -- e
          privateExponent   INTEGER,  -- d
          prime1            INTEGER,  -- p
          prime2            INTEGER,  -- q
          exponent1         INTEGER,  -- d mod (p-1)
          exponent2         INTEGER,  -- d mod (q-1)
          coefficient       INTEGER,  -- (inverse of q) mod p
          otherPrimeInfos   OtherPrimeInfos OPTIONAL
      }

   The fields of type RSAPrivateKey have the following meanings:

    * version is the version number, for compatibility with future
      revisions of this document.  It shall be 0 for this version of the
      document, unless multi-prime is used, in which case it shall be 1.

            Version ::= INTEGER { two-prime(0), multi(1) }
               (CONSTRAINED BY
               {-- version must be multi if otherPrimeInfos present --})

    * modulus is the RSA modulus n.

    * publicExponent is the RSA public exponent e.

    * privateExponent is the RSA private exponent d.

    * prime1 is the prime factor p of n.

    * prime2 is the prime factor q of n.

    * exponent1 is d mod (p - 1).

    * exponent2 is d mod (q - 1).

    * coefficient is the CRT coefficient q^(-1) mod p.
```

- Based on the KeyGen lab, it should be uncomplicated to calculate these values for 64 bit keys.
- It is probably complicated to store them in the encoding used within a `.pem` file.

:::

# base64&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#base64" role="button" aria-expanded="false" aria-controls = "base64">Show</a>

::: {#base64 .collapse .multi-collapse}

- I was unfamiliar with private key inspection for the very good reason of "protect your private key at all costs".
- So I wasn't familiar with text output of private keys.
- The two other ways to inspect file contents, to me, were clearly in (1) hexadecimal, and (2) "base64".
  - We note the deviation in naming scheme between what are otherwise two numerical bases.
  - Base64 can also be termed "tetrasexagesimal" (tetra~=4, sexa~=6)
  - I have literally never heard it called that.
- Base64 encoding is described in [RFC 4648](https://www.rfc-editor.org/info/rfc4648)
  - Check the [table](https://en.wikipedia.org/wiki/Base64#Base64_table_from_RFC_4648) or....
  - Understand it straightforwardly as follows:

```{.python}
def num_to_b64(n)
  if n not in range(64):
      exit()
  if n in range(26):
    # A-Z
    return "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[n]
  if n in range(26,52):
    # A-Z
    return "abcdefghijklmnopqrstuvwxyz"[n - 26]
  if n in range(52,62):
    # 0-9
    return str(n-52)
  # 62 -> `+`, 63 -> `/`
  return "+" if n==62 else "/"

```
- By convention, Base64 numerals at terminated with double equals `==`
  - By contrast, decimal numerals are unmarked.
  - By contrast, hexadecimal numerals are ofter `0x` prefixed, or
    - Colon delineated in pairs, like `01:23:AB:CD`
- Base64 may also be zero prefixed to ensure it aligns with 8-bit bytes.

#### Quoth the RFC:

1. The final quantum of encoding input is an integral multiple of 24 bits; here, the final unit of encoded output will be an integral  multiple of 4 characters with no "=" padding
2. The final quantum of encoding input is exactly 8 bits; here, the final unit of encoded output will be two characters followed by two "=" padding characters.
3. The final quantum of encoding input is exactly 16 bits; here, the final unit of encoded output will be three characters followed by one "=" padding character.

## The `base64` utility

- `base64` is also the name of a command line utility.
```{.email}
man base64
```
- The most useful flag for our purposes here is the `-d` flag, for decode.
- We note that a `.pem` file is *not* base64 encoded - rather it is a text file that *contains* a base64 numeral.
- So a naive application of `base64` draws an error.
```{.email filename="base64 -d unsafe.pem"}
base64: invalid input
```

- I used `head` and `tail` to remove the leading and tailing lines.
  - Or use `sed`
- It is worth taking a moment to ensure you do some line-based text manipulation at command line with some technique.
- I used a pipe `|` to use the output of one command, before the pipe, as the input to a latter command, after the pipe.
```{.email}
cat unsafe.pem | head -9 | tail -8 | base64 -d
```
  - `cat` shows file contents.
  - `head -9` takes the first 9 lines
  - `tail -8` takes the final 8 lines
  - `base64 -d` converts the base64 encoding to...
  - Bits! Which the command line attempts to interpret as characters, many of them unprintable.
```{.email filename="cat unsafe.pem | head -9 | tail -8 | base64 -d"}
�=0�9A�d4ɯ��n΢TPL���c�
��5�f{���8�W$>�t�<l�_&x�/a!�H3�euZF�؟/�+:HT9Vx#G9jnx�5!��^���E�/ۋN�c��J�9����+8�X/ "��"2���5Iyr�d4�r�o�À�� @���3i��Bs�]eM= �v�A���ǴL� ���29����a���B�aN���Ѹ��\��
```

## The "hexdump" utility

- Fortunately, we can direct the commandline to print out information in hexadecimal format via `hexdump`
  - We note the leftmost column gives number of bits from the beginning of the "file" being read
  - Here the file is whatever comes out of the "pipe" `|`
  - The first line is 8 chunks of 4 hexdigits each representing 4 bits
    - 8 * 4 * 4 = 128 bits = 10 bytes
    - Hence the second line beginning with `0000010`
```{.email filename="cat unsafe.pem | head -9 | tail -8 | base64 -d | hexdump"}
0000000 8230 5301 0102 3000 060d 2a09 4886 f786
0000010 010d 0101 0005 8204 3d01 8230 3901 0102
0000020 0200 0041 64b1 c934 c7af da19 ce6e 54a2
0000030 4c50 dceb 63e1 0af2 6acf 4f37 2894 343b
0000040 ac79 d174 12cb ee20 aa8b 80c4 fd46 8ee1
0000050 9837 d408 7f0e 054d 47f5 a763 238b 7190
0000060 ba81 c329 0302 0001 0201 2d40 dcf5 7487
0000070 8df7 3f07 6236 9d70 90ed c61e f276 42bb
0000080 2e4a 7bd2 807c 73fa ef9b 0d18 8eaa cb35
0000090 7b66 a894 38bc 57ad 3e24 7487 917f 08ac
00000a0 6c3c 85ed 265f a478 7f2f 0261 0021 48d7
00000b0 8433 7565 465a d8ec 139f ce2f 3a2b 0148
00000c0 3954 7856 2307 3947 1d6a 786e 35b1 2102
00000d0 d200 5ef1 ab9a 45e7 2ffe 8bdb 964e 8f63
00000e0 16a1 bd4a 0539 80af ea8c 382b 58f7 062f
00000f0 0217 2220 fadb 921b 3222 1180 f291 3510
0000100 7949 720e 64e2 f434 729f 6fe8 087c c386
0000110 9f80 0291 4020 ad14 a51d 339d 1d69 bf96
0000120 1742 9573 655d 3d4d 8620 a376 ab41 879d
0000130 b4c7 4c15 02ef 0520 c793 32f6 a439 de92
0000140 a0e7 9761 d219 ee15 a142 4e61 03a0 b0ac
0000150 b8d1 c3e3 8c5c 00db
0000157
```

:::

# Raw

```
user@DESKTOP-THMS2PJ:~/.ssh$ openssl pkey -in unsafe.pem -pubout -out unsafe-pub.pem
user@DESKTOP-THMS2PJ:~/.ssh$ cat unsafe-pub.pem
-----BEGIN PUBLIC KEY-----
MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALFkNMmvxxnabs6iVFBM69zhY/IKz2o3
T5QoOzR5rHTRyxIg7ouqxIBG/eGON5gI1A5/TQX1R2OniyOQcYG6KcMCAwEAAQ==
-----END PUBLIC KEY-----
user@DESKTOP-THMS2PJ:~/.ssh$ openssl asn1parse -in unsafe-pub.pem -inform PEM
    0:d=0  hl=2 l=  92 cons: SEQUENCE
    2:d=1  hl=2 l=  13 cons: SEQUENCE
    4:d=2  hl=2 l=   9 prim: OBJECT            :rsaEncryption
   15:d=2  hl=2 l=   0 prim: NULL
   17:d=1  hl=2 l=  75 prim: BIT STRING
user@DESKTOP-THMS2PJ:~/.ssh$ openssl rsa -noout -text -inform PEM -in unsafe-pub.pem -pubin
Public-Key: (512 bit)
Modulus:
    00:b1:64:34:c9:af:c7:19:da:6e:ce:a2:54:50:4c:
    eb:dc:e1:63:f2:0a:cf:6a:37:4f:94:28:3b:34:79:
    ac:74:d1:cb:12:20:ee:8b:aa:c4:80:46:fd:e1:8e:
    37:98:08:d4:0e:7f:4d:05:f5:47:63:a7:8b:23:90:
    71:81:ba:29:c3
user@DESKTOP-THMS2PJ:~/.ssh$ openssl genrsa -out unsaf3.pem 512
user@DESKTOP-THMS2PJ:~/.ssh$ openssl asn1parse -in unsaf3.pem -inform PEM
    0:d=0  hl=4 l= 340 cons: SEQUENCE
    4:d=1  hl=2 l=   1 prim: INTEGER           :00
    7:d=1  hl=2 l=  13 cons: SEQUENCE
    9:d=2  hl=2 l=   9 prim: OBJECT            :rsaEncryption
   20:d=2  hl=2 l=   0 prim: NULL
   22:d=1  hl=4 l= 318 prim: OCTET STRING      [HEX DUMP]:3082013A020100024100B6F60FD8F1B9A14ADA01FE609E3FC0550C7BEA1FFD61A0B5A792636EC1425361499C4E1C4E974D78D605EB07F5C3DB21C296749DA3679C4E849CFFFA9DF3969B0203010001024019BD5C55650C7C888F4B20826F4100C9F64BA8907F91308EDDD8566CCA7B8E47309816895A818FB0C357BDAE0F7E07AED008E3680AA15168BF6D04476CED4F61022100E57B90980553977097D9062E79720987D1828B33132DDCD94785ECE1E0F3C9B5022100CC1A52A25AF42108450C1A1C173FF5E5400D437663FC1B5C565D0D6B8EC6D10F022100AC776F36315A9F8829371BE435B5B4DFF45F6E0A56B1B33740FFB0061AB05DB902204DD46FD4677896AC0FA068C87379396C5D3B719150D94F19ABF939E7DCFF25B302205C97731A30B17E804E33549A07BB32FE63801B36F0107657BF07003EBABADF85
user@DESKTOP-THMS2PJ:~/.ssh$ openssl rsa -in unsaf2.pem -text
Private-Key: (512 bit, 2 primes)
modulus:
    00:98:26:e6:f8:71:3a:bc:e9:ff:2a:47:90:85:84:
    ba:8e:22:3b:8e:e9:70:0e:64:af:6e:44:06:65:c2:
    de:ff:34:ce:87:f1:a1:94:7b:f9:92:7d:9f:ea:aa:
    b7:93:03:85:4a:57:a1:c8:56:ac:0d:ca:4c:da:59:
    1f:ef:ba:a3:d7
publicExponent: 65537 (0x10001)
privateExponent:
    3a:20:5a:8a:bd:4f:30:4e:c0:c1:99:37:78:1a:bd:
    de:80:eb:79:ec:6a:77:c5:35:54:0d:be:d7:ef:7b:
    9b:c9:2c:f0:3f:95:4f:3f:cc:b2:61:bb:50:da:5f:
    b2:49:07:ee:70:95:4a:fc:ce:6e:31:a1:35:d2:c1:
    02:8e:9b:01
prime1:
    00:c8:be:97:b0:ff:d0:20:b2:82:22:50:81:84:f5:
    0d:36:be:2e:ef:89:db:f5:cf:da:73:95:05:56:5e:
    f5:d2:57
prime2:
    00:c2:08:3f:d7:17:84:8d:b5:c7:ac:91:ba:84:a4:
    f8:0d:95:87:a8:47:79:e8:fa:4c:7d:fa:83:26:91:
    55:ca:81
exponent1:
    00:85:fc:20:06:f5:57:16:db:ce:5b:d4:db:fd:c0:
    09:87:c6:3c:51:88:f4:15:07:1c:49:14:e7:b1:14:
    44:82:95
exponent2:
    07:79:01:dc:6a:cf:74:15:b8:26:f1:45:d9:ad:f0:
    cf:b5:1e:90:60:90:55:64:ae:65:7b:ac:69:63:d7:
    86:01
coefficient:
    00:a7:e5:ed:d4:dd:16:e2:7e:90:de:ea:8e:7c:25:
    74:bb:88:eb:ea:0a:9d:07:75:25:dd:7e:3f:7a:0f:
    b4:6e:25
writing RSA key
-----BEGIN PRIVATE KEY-----
MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAmCbm+HE6vOn/KkeQ
hYS6jiI7julwDmSvbkQGZcLe/zTOh/GhlHv5kn2f6qq3kwOFSlehyFasDcpM2lkf
77qj1wIDAQABAkA6IFqKvU8wTsDBmTd4Gr3egOt57Gp3xTVUDb7X73ubySzwP5VP
P8yyYbtQ2l+ySQfucJVK/M5uMaE10sECjpsBAiEAyL6XsP/QILKCIlCBhPUNNr4u
74nb9c/ac5UFVl710lcCIQDCCD/XF4SNtceskbqEpPgNlYeoR3no+kx9+oMmkVXK
gQIhAIX8IAb1VxbbzlvU2/3ACYfGPFGI9BUHHEkU57EURIKVAiAHeQHcas90Fbgm
8UXZrfDPtR6QYJBVZK5le6xpY9eGAQIhAKfl7dTdFuJ+kN7qjnwldLuI6+oKnQd1
Jd1+P3oPtG4l
-----END PRIVATE KEY-----
```