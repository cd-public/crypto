---
title: BigOps
theme: dark
author: Prof. Calvin
subtitle: "Week 0x5"
institute: Crypto
format: 
    revealjs: 
        code-fold: true
        theme: dark
        mainfont: monospace
        slide-number: true
        show-slide-number: all
        width: 1050
        height: 700
        footer: "[Home](../index.html)"

execute:
    echo: false
---
# Announcements

- **Welcome** to variously CS 276/CS 540
  - This is the arithmetic operations of the original "BigNum"
  - Lecture.
- **Action Items**:
- **Action Items**:
  - SHA-256 extended to two weeks.
  - Back to labs this week.
  - Next homework - `4096_t` -  due next Thurs

# Apocryphal Quote

> I am a weapons-grade finitist. I don't believe in numbers larger than two.

# Today

- Review
  -`stdint`
  -Finite sets, rings
  -Arbitrary/high precision integers
- New
  - Arithmetic operations
  - Function types

# Easy Mode

- Addition and subtraction are easy.
- For some value of easy.
  - Cut a too-big number into chunks.
  - Add or subtract within chunks of the same index/offset/significance.
  - Only wrinkle is a carry bit.
- Identical to digit-based addition.
  - `uint8_t`s as digits in base 256 arithmetic

# Hard Mode

- Some cryptographical algorithms, however, use two extremely advanced arithmetic operations:
  - Multiplication, and
  - Division, and
  - Modulo
- Fortunately this only two operations (need a combined `divmod`)

# Example

- Imagine an engineering team lead for:
  - 14 MS-level Computer Scientists
    - 9-12 hrs/wk
    - 14 week contract
  - 34 BS-level Computer Scientists
    - 6-9 hrs/wk
    - 15.5 week contract
- How many person hours is this?

# Napkin Math

- I'd say
  - $14 \times 12 \times 14$
  - $34 \times 9 \times 15.5$
- I... can't quite do that in one fell swoop.
  - $14 \times 12$ is trivially $12^2 + 24 = 168$
  - $9 \times 15.5$ is trivially $155 - 15.5 = 139.5$

# $34 \times 139.5$

- That just isn't easy 
 - (140 * 34 isn't bad, but we need a motivating example). 
- Express *digit-wise*:

| |1|3|9|5|
|-|-|-|-|-|
|3|-|-|-|-|
|4|-|-|-|-|

# $34 \times 139.5$

- Compute all products over single-digit factors

| |1|3|9|5|
|-|-|-|-|-|
|3|3|9|27|15|
|4|4|12|36|20|

- These:
  - Aren't single digit
  - Aren't of the same signficance

# $34 \times 139.5$

- Include sigificance

| |100|30|9|.5|
|-|-|-|-|-|
|30|3000|900|270|15|
|4|400|120|36|2|

# Dear Watson


::::{.columns}

:::{.column width="%50"}


| |100|30|9|.5|
|-|-|-|-|-|
|30|3000|900|270|15|
|4|400|120|36|2|


:::


:::{.column width="%50"}

$$
\begin{align*}
5& \times 4  \times 10^{-1}  &= 2&\\
+5& \times 3  \times 10^{0}  &= 15&\\
+9& \times 4  \times 10^{0}  &= 36&\\
+9& \times 3  \times 10^{1}  &= 270&\\
+3& \times 4  \times 10^{1}  &= 120&\\
+3& \times 3  \times 10^{2}  &= 900&\\
+1& \times 4  \times 10^{2}  &= 400&\\
+1& \times 3  \times 10^{3}  &= 3000&\\
\end{align*}
$$

:::

::::

# Express as
$$
\begin{align*}
139.5& = &1 * 10^2 + &3 * 10^1 + &9 * 10^0& + 5 * 10^{-1}\\
34& = &&3 * 10^1 + &4 * 10^0&\\
\end{align*}
$$

- Take $x = 10$
$$
\begin{align*}
139.5& = &1 * x^2 + &3 * x + &9& + 5 * x^{-1}\\
34& = &&3 * x + &4&\\
\end{align*}
$$

- That is polynomial; can work with those.

# Polynomial

$$
(x^2 + 3x + 9 + 5x^{-1})(3x + 4)
$$

$$
(x^2 + 3x + 9 + 5x^{-1})(3x) + (x^2 + 3x + 9 + 5x^{-1})(4)
$$


$$
(3x^3 + 9x^2 + 27x + 15) + (4x^2 + 12x + 36 + 20x^{-1})
$$

$$
3x^3 + 13x^2 + 39x + 51 + 20x^{-1}
$$

# Aside

- I think this is covered around ~8th grade
- I don't want to assume the integrity to US public school system
  - Or anything school system
  - Shout out school
- The point of this class isn't middle/high school math
  - That's the point of life itself /s

# Considerations

- It is natural to express multiplication of e.g. 4096 bit integers as a polynomial over, say, 64 bit integers.
- One teeny problem:
  - Overflow.

# Overflow

- The point of calculating this was to get things down to single digit:

$$
3x^3 + 13x^2 + 39x + 51 + 20x^{-1}
$$

- 13, 39, 51, and 20 are all not compliant (debatably 20 is okay)
- Essentially, 1-digit multiply may produce a 2-digit product.

# Uh oh

```{.C filename="/bin/sh"}
$ cat num.c
#include <stdlib.h>
#include <stdint.h>

int main(int argc, char **argv) {
    uint8_t x, y, z;
    x = atoi(argv[1]);
    y = atoi(argv[2]);
    z = x * y;
    return z;
}
$ gcc num.c ; ./a.out 30 30 ; echo $?
132
$ gcc num.c ; ./a.out 3 3 ; echo $?
9
$ python3 -c "print(30 * 30 % 2 ** 8)"
132
```

# Size of ints

- Say we have two integers of 8 bits of precision.
- We multiple them together.
- What is the largest number we can get, and
- How many bits does it require?
```{.email}
python3 -c "x = 2 ** 8 - 1 ; x = x * x ; print(x.bit_length())"
```
- 16

# Carrys for mults

- When we are doing big multiplications:
  - We must multiply chunks of at most half the size of our biggest integer.
  - We must keep track of significance - their position in an imagined larger integer
  - We must perform adds over these terms, using big addition

# One Technique

- I Made a pointer to a `uint32_t`
  - `uint32_t *alias;
- Set it equal to the location of some array of `uint64_t`
  - `uint32_t *alias = &array;
- Copied elements of the "alias" into 64 bit values.
  - `uint64_t tmp = alias[5];`
- Multiplied, tracking significance.

# Division

- Remember long division?
- Do that.
  - Align the highest digits.
    - I took the log base 2.
  - Divide.
  - Keep track of significance.
    - Difference between logs.
  - Calculate remainder.
  - Loop.
- The final remainder is the mod.

# Today

- Review
  - &check; `stdint`
  - &check; Finite sets, rings
  - &check; Arbitrary/high precision integers
- New
  - &check;  Arithmetic operations
  - Function types

# A 4096 bit type

- It's not too bad to pass around 4096 bits.
  - An array of 64 `uint64_t`s or 128 `uint32_t`s
- Here's an example function declaration:
```{.C filename="bigadd"}
uint64_t bigadd(uint64_t *in0, uint64_t *in1, uint64_t *sum);
```

# Usage

- Before call this function, declare three arrays:
```{.C }
uint64_t in0[64], in1[64], sum[64];
bigadd(in0,in1,sum);
```

- You can recycle the arrays, as needed.
  - An astute student would be able to implement "in-place add"
  - Sum overrights (either) operand
  ```{.C }
uint64_t in0[64], in1[64], sum[64];
bigadd(in0,in1,in0);
```

# Usage

- Remember this is banned:

```{C}
uint64_t *whatever(uint64_t *in0, uint64_t *in1) {
    uint64_t sum[64];
    /* much code */
    return sum;
}
```
- My `uint64_t` value returned the carry value (it was nice to keep track of)

# FAQ

- Isn't there a way to return the value from the function, rather than write a value to the memory location at a provided argument.
  - Yes.
  - This form of coding we use here is *memory-safe*
  - It was endorsed by the White House from 26 Feb 24 to 19 Jan 25
  - [Read more](https://web.archive.org/web/20250118013136/https://www.whitehouse.gov/oncd/briefing-room/2024/02/26/press-release-technical-report/)

# FAQ

- How do we deal with integers that aren't of known length.
  - Ask me after the midterm.
  - [Read more](https://gmplib.org/)
  - [Read more](https://man7.org/linux/man-pages/man3/free.3.html)

# Today

- Review
  - &check; `stdint`
  - &check; Finite sets, rings
  - &check; Arbitrary/high precision integers
- New
  - &check;  Arithmetic operations
  - &check;  Function types


# Stinger

```{.C}
/* print the big value as a string */
void seebig(uint64_t *a) {
    size_t i;
    for (i = S-1; i < S ; i--) {
        printf("%016lx ", a[i]); 
        if ((i % 8 == 0 && i)) {
            printf("\n");
        }       
    }
    printf("\n\n");
    return;
}
```