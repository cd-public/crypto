[
  {
    "objectID": "shainc.html",
    "href": "shainc.html",
    "title": "SHAinC",
    "section": "",
    "text": "Review Show\n\n\nGoal: Implement SHA-256\n\nMy responsibility\n\nI will provide 1 week of instruction on SHA-256\nI will provide an autograder Containerfile\n\nYour responsibility\n\nYou will implement SHA-256 in C89 as an “shainc.c” file\nYou will store your “shainc.c” file in the “shainc” folder on your “crypto” GitHub repository.\n\n\n\n\nTopic Areas\n\n\n\nReview:\nNewish:\n\n\n\n\n- SHA-2\n- C89\n\n\n\n\n\nResources\n\nThe Endian lab\n\nThe “Option” exercise formed my starter code.\n\nMy SHA256 Slides\n\nI used this, and its references. Try scroll mode (press ‘r’)\nWikipedia Pseudocode\n\nI used this to implement the first chunk.\n\nSaravanan Vijayakumaran’s Slides\n\nI used to extend my implementation to multiple chunks.\n\n@manceraio’s .js demo\n\nI used this to debug my endian transforms.\n\n\nYou needn’t compute round constants; I provide them below:\n\n\n\n\n\nConsts Show\n\n\nThe \\(k\\) values: fractional components of the cube roots of the first 64 primes.\nThe \\(h\\) values: fractional components of the square roots of the first 8 primes.\nI found it better to use the established constants than risk a difference in implementation of fractions.\nAlso available on GitHub\n\n\n\nrounds.c\n\n/* round constants */\n/* network endian */\nuint32_t k[64] = {\n    0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,\n    0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,\n    0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,\n    0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,\n    0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,\n    0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,\n    0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,\n    0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,\n    0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,\n    0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,\n    0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,\n    0xd192e819,0xd6990624,0xf40e3585,0x106aa070,\n    0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,\n    0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,\n    0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,\n    0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2\n};\n\n\n\nhashes.c\n\n/* initial hash values (h_0) */\n/* network endian */\nuint32_t h[8] = {\n    0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,\n    0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19\n};\n\n\n\n\nTester Show\n\n\nTester\n\nI am providing the following Containerfile, which will serve as a minimal autograder\n\nIt sets up an Ubuntu container.\nIt downloads a .sh script to test.\nIt copies in “shainc.c” from your system.\n\n\n\n\nContainerfile\n\nFROM ubuntu \n\nRUN apt update && apt install gcc curl -y\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/shainc/tester.sh -o tester.sh\n\nCOPY shainc.c .\n\n\nIt may be easier to review the test script here than on GitHub:\n\n\n\ntester.sh\n\ngcc shainc.c --std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -o shainc\necho \"15 characters.\" &gt; 15char.txt\necho \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\" &gt; lipsum.txt\ncurl https://github.com/cd-public/books/raw/main/pg1342.txt -o austen.txt 2&gt;/dev/null\necho \" === Finding errors vs. reference implementation. === \"\ndiff &lt;(sha256sum 15char.txt) &lt;(./shainc 15char.txt)\ndiff &lt;(sha256sum lipsum.txt) &lt;(./shainc lipsum.txt)\ndiff &lt;(sha256sum austen.txt) &lt;(./shainc austen.txt)\necho \" === Errors printed. No errors denotes \\\"Perfect!\\\" === \"\n\n\n\nUsage\n\nI built my container via:\n\npodman build -t tester .\n\nI tested my code via:\n\npodman run tester /bin/bash tester.sh\n\nIf the above script returns the following you are done:\n\nUpload your code to your GitHub on which I am a collaborator.\n\nI will review the most recent version prior to the due date.\n\n === Finding errors vs. reference implementation. === \n === Errors printed. No errors denotes \"Perfect!\" === \n\n\nTesting\n\nWhen the container is built, it copies in shainc.c\nWithin the container, tester.sh:\n\nCompiles shainc.c as C89 with appropriate gcc flags.\nCreates two (2) small files:\n\n“15char.txt”, a short 15 character text file, and\n“lipsum.txt”, a short text file of several hundred characters.\n\nDownloads a copy of Jane Austen’s “Pride and Prejudice”\n\n“austen.txt”, a file of several hundred thousand characters.\nIt took ~.08s to hash on my system.\n\nHashes all 3 files with:\n\nThe built-in sha256sum utility.\nYour compiled shainc executable.\n\nCompares the differences in output.\nAny difference is indicative of a shainc.c bug of some kind."
  },
  {
    "objectID": "rsainc.html",
    "href": "rsainc.html",
    "title": "RSAinC",
    "section": "",
    "text": "Review Show\n\n\nGoal: Public Key Encryption\n\n\n\nReview:\nNewish:\n\n\n\n\n- RSA\n- modexp\n\n\n- FileIO\n\n\n\n\n\nIn the lab you should’ve finished key generation.\n\nOtherwise, return to a complete the lab.\nKeyGen\n\nThis assignment concerns two distinct executable files:\n\nWrite keys to files\n\nkeygen.c\nCovered in the lab section.\n\nEncrpyt and decrypt based those keys.\n\nrsainc.c\nCovered here, but requiring keygen.c\n\n\n\n\n\n\n\nKeyGen Show\n\n\nThis section summarizes the lab. If you completed the lab, you may move onto “ModExp”\nRecall a sample Python implementation was provided, but was not very readable.\n\n\nA Private Key in 3 Parts\n\nWe recall that the private key minimally contains:\n\nn, a modular base\ne, an encryptor, and\nd, a descryptor.\n\nBased on the KeyGen lab, it should be uncomplicated to calculate these values for 64 bit keys.\nWe will use .bad instead of .pem and insecurely store these values in plaintext.\nWe will then make executables to generate .bad and encrypt content provided a .bad\n\nWe name a .bad so helpfully we don’t use it by accident.\n\nWe will naively print 3 lines of hexademical values, n, e, then d.\nWe will write them to a 5-line file as follows:\n\nThe first line is the precise header text.\nThe second line is the n value in hexadecimal.\nThe third line is the e value, which is 10001.\nThe fourth line is the d value, which should be kept secret.\nThe fifth and final line is the precise footer text.\n\n\n\n\nunsafe.bad\n\n-----BEGIN UNSAFE PRIVATE KEY-----\n95a61f99198bd8e9\n10001\nfbea5e6a3ed31e8f\n-----END UNSAFE PRIVATE KEY-----\n\n\n\nA Public Key in 2 Parts\n\nWe recall that the public key contains, and should only contain:\n\nn, a modular base, and\ne, an encryptor\n\nBased on the KeyGen lab, we already have the ability to write these values to file.\nWe will use .pub instead of .pem or .bad\n\nNot a huge deal how these are stored, actually.\nThe key itself though, is still unsafe to use.\n\nWe will naively print 2 lines of hexademical values, n, then e.\nWe will right them to a file prefixed and suffixed as follows:\n\n\n\nunsafe.pub\n\n-----BEGIN UNSAFE PUBLIC KEY-----\n95a61f99198bd8e9\n10001\n-----END UNSAFE PUBLIC KEY-----\n\n\nEnsure your keys are 32 bit.\n\nSimply encrypt values up to 1 &lt;&lt; 31 in size.\n\nHere is a testing script:\n\ndef modexp(m, e, n):\n    if e == 0:\n        return 1\n    if e == 1:\n        return m % n\n    if e % 2:\n        return (m * modexp(m*m % n, e//2, n)) % n\n    return  modexp(m*m % n, e//2, n) % n\n\nmake_encrypt = lambda e, n : lambda m : modexp(m,e,n)\n\nlines = open(\"unsafe.bad\").readlines()\nn = int(lines[1], 16) \ne = int(lines[2], 16) \nd = int(lines[3], 16) \n\nlines = open(\"unsafe.pub\").readlines()\nif n != int(lines[1], 16) or e != int(lines[2], 16):\n    print(\"Public key does not match private key.\")\n    exit()\n\nencrypt = make_encrypt(e,n)\ndecrypt = make_encrypt(d,n)\n\nif all([i == decrypt(encrypt(i)) for i in range(0x100)]):\n    print(\"Keys work for small values.\")\nelse:\n    print(\"Keys failed on small values.\")\n\nif all([i == decrypt(encrypt(i)) for i in range(0,1 &lt;&lt; 31, 1 &lt;&lt; 29)]):\n    print(\"Keys work for larger values.\")\nelse:\n    print(\"Keys failed on larger values.\")\n\nBy successfully encrypting and decrypting up to 1 &lt;&lt; 31, the key is large enough for some small tasks, such encrypting the string “hi” - a string of length 3 when including the null terminator, which therefore contains 24 bits of information.\n\n\n\n\n\nModExp Show\n\n\nFor C language encryption and decryption, it is necessary to implement “modexp” in C.\nDo so in a novel file, rsainc.c, which should:\n\nAccept 3 command line arguments:\n\nA flag -d or -e for decrypt or encrypt\nThe file name of an input file.\nThe file name of an output file.\n\nIt should:\n\nRead the content of the input file.\nEncrypt or decrypt, as specified, the file contents.\n\nIt should read n and d from “unsafe.bad” to decrypt.\nIt should read n and e from “unsafe.pub” to encrypt.\n\nWrite the encrypted or decrypted content to the output file.\n\n\nHere is a Python implementation.\n\nIt is exceptionally annoying because Python doesn’t like to treat files as holding data rather than text.\n\n\n\n\nrsa_py.py\n\nif __name__ != \"__main__\":\n    exit()\n\nimport sys\n\ndef modexp(m, e, n):\n    if e == 0:\n        return 1\n    if e == 1:\n        return m % n\n    if e % 2:\n        return (m * modexp(m*m % n, e//2, n)) % n\n    return  modexp(m*m % n, e//2, n) % n\n\nif 'e' in sys.argv[1]:\n    lines = open(\"unsafe.pub\").readlines()\n    n, e = int(lines[1], 16), int(lines[2], 16) \nelif 'd' in sys.argv[1]:\n    lines = open(\"unsafe.bad\").readlines()\n    n, e = int(lines[1], 16), int(lines[3], 16) # have to call it e, not d\nelse:\n    exit()\ns = open(sys.argv[2], \"rb\").read()\nm = int.from_bytes(s, byteorder=sys.byteorder, signed=False)\nc = modexp(m,e,n)\ns = open(sys.argv[3], \"wb\").write(c.to_bytes(4, byteorder=sys.byteorder))\n\n\nHint\n\nYou will probably want to use something like this:\n\nfscanf(key, \"-----BEGIN UNSAFE PRIVATE KEY-----\\n%lx\\n%lx\\n-----END UNSAFE PRIVATE KEY-----\\n\", &n, &e);\n\n\n\n\nTester Show\n\n\nI am providing the following Containerfile, which will serve as a minimal autograder.\nUse the tester with caution outside of containers as it deletes files you may want to preserve\n\n\n\nContainerfile\n\nFROM ubuntu \n\nRUN apt update && apt install gcc curl python3 -y\n\nCOPY keygen.c .\n\nCOPY rsainc.c .\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/rsainc/tester.py -o tester.py\n\n\nUsage\n\nI built my container via:\n\npodman build -t tester .\n\nI tested my code via:\n\npodman run tester python3 tester.py\n\nIf the above script returns the following you are done:\n\nUpload your code to your GitHub on which I am a collaborator.\n\nI will review the most recent version prior to the due date.\n\nA+\nA+\nA+\nA+\nA+\nA+\nA+\nA+\n\n\nSketch\n\nWe note the tester performs no error handling, for which you as the student are responsible.\nThis assignment was essentially as follows:\n\nCreate a keygen.c that compiles into a keygen executable with is functionally identical to python3 keygen.py\n\nKey generation should create an unsafe.bad private key and an unsafe.pub public key.\n\nCreate a rsainc.c that compiles into a rsainc executable with is functionally identical to python3 rsa_py.py\n\nEncryption and decryption will use a created unsafe.bad private key and an unsafe.pub public key.\n\n\n\n\n\nTester\n\nThe tester:\n\nEnsures the local directory contains no prior message, key, or executable files.\nUses curl to fetch the latest keygen.py and rsa_py.py from the instructional GitHub\nCompiles keygen.c and rsainc.c will all flags:\n\ngcc keygen.c --std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -o keygen\ngcc rsainc.c --std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -o rsainc\n\nCreates a short message file containing at most two characters.\nTests RSA for all permutations of C and Python for each stage:\n\nGenerates keys\nEncrypts the message, and\nDecrypts the message, then\nPrints the output."
  },
  {
    "objectID": "podman.html#kennedy-is-my-middle-name",
    "href": "podman.html#kennedy-is-my-middle-name",
    "title": "Podman",
    "section": "Kennedy is my middle name",
    "text": "Kennedy is my middle name\n\nNot an endorsement; I voted for ******* **** ****** ********!"
  },
  {
    "objectID": "keygen.html",
    "href": "keygen.html",
    "title": "KeyGen",
    "section": "",
    "text": "Review Show\n\n\nGoal: Public Key Encryption\n\n\n\nReview:\nNewish:\n\n\n\n\n- Public key encryption\n- RSA in C\n\n\n- Fermat’s little theorm\n- .pem files\n\n\n- RSA\n\n\n\n\n\nThere are no required exercises of this lab.\nIt is supplementary material to the RSAinC homework.\n\nThis lab will generate the key \\((n, e, d)\\)\n\n\\(n\\), the modular base, part of the public and private key.\n\\(e\\), the encryptor, part of the public key.\n\\(d\\), the decryptor, part of the private key.\n\n\nRSAinC will additional require the usage of these to encrpyt and decrypt text.\n\nRSAinC will require two .c files, the first of which is keygen.\nI would do all my work for this lab in keygen.c in an rsainc folder.\nFor this lab, I provide an intermediate autograder, as a Python script, to support partial homework completion.\n\nThe script is under the “32 bit” heading.\n\n\n\n\n\n\n\nPodman Show\n\n\n\nSetup\n\nFor this lab, I used the following Containerfile\n\nSame as the printb lab\n\n\n\n\nContainerfile\n\nFROM ubuntu\n\nRUN apt update && apt install gcc vim python3 astyle -y\n\n\nMostly, having astyle and python3 is nice.\n\n\n\n\nPython Show\n\n\nThere is a complete, correct, RSA implementation embedded in the Fermat slides.\n\nI extracted .qmd to .ipynb and .ipynb to .py.\nI editted lightly for readability (removed comments).\n\n\n\n\nfermat.py\n\ndef sixkp1(k): # 6k+1\n    is_prime = lambda n : any([n % i for i in range(2, int(n **.5))])\n    candidate = 6 * k + 1\n    while not is_prime(candidate):\n        candidate += 6\n    return candidate\n\ndef lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return a * b // gcd(a, b)\n\ns = \"C\" # a random string\nm = ord(s) # to number\n\nhide_p = lambda: sixkp1(10)\nhide_q = lambda: sixkp1(15)\nn = hide_p() * hide_q()\n\nhide_λ = lambda: lcm(hide_p() - 1,  hide_q() - 1)\n\ne = 65537 # encryptor\n\ndef find_d():\n    d = 1\n    while 1 != (d * e % hide_λ()):\n        d += 1\n    return d\n\ndef modexp(m, e, n):\n    if e == 0:\n        return 1\n    if e == 1:\n        return m % n\n    if e % 2:\n        return (m * modexp(m*m % n, e//2, n)) % n\n    return  modexp(m*m % n, e//2, n) % n\n\nc = modexp(m, e, n) # ciphertext\n\nchr(modexp(modexp(ord(\"C\"), e, n), find_d(), n))\n\n\nI did not show this in class, but it’s probably easier to think of as follows:\n\n# make_encrypt takes an \n# * encryptor e and \n# * modular base n and \n# returns a function the performs public key encryption.\n\nmake_encrypt = lambda e, n : lambda m : modexp(m,e,n)\n\nencrypt = make_encrypt(e,n)\ndecrypt = make_encrypt(find_d(),n)\n\nchr(decrypt(encrypt(ord(\"C\"))))\n\nThere’s no graceful (or even ungraceful) way to retuun functions in C, but I thought this was really cool ¯\\_(ツ)_/¯\n\n\n\n\n6k + 1 Show\n\n\nImplement primality generation in C.\nYou may use any method but I recommend \\(6k + 1\\)\n\n\n\nfermat.py\n\ndef sixkp1(k): # 6k+1\n    is_prime = lambda n : any([n % i for i in range(2, int(n **.5))])\n    candidate = 6 * k + 1\n    while not is_prime(candidate):\n        candidate += 6\n    return candidate\n\n\nFor BigRSA, you will primality testing for the 4096_t.\nLikewise, for BigRSA, you will need fairly narrow bounds on precision, or how many bits your primes take up.\nThat said, for now the following should be sufficient:\n\nuint64_t sixkp1(uint64_t k) {\n  /* Your code here (and update the return statement)  */\n  return 6 * k + 1;\n}\n\n\n\n\n\n\nAdvanced Primality Testing\n\n\n\n\nAdvanced students may wish to implement sieves but should not do so unless they achieve a memory safe implementation, likely utilizing (enormous) buffers for the file system.\nAdvanced students may with to implement Pocklington-Lehmer primality testing, for which I am not familiar with memory usage.\n\nFermat primality testing is a component of Pocklington-Lehmer, a fun callback to lecture.\n\nA student implementing either will be invited to deliver a guest lecture on their implementation in a future class session or other venue.\n\n\n\n\n\n\ngcdlcm Show\n\n\nImplement lcm - least common multiple - calculation in C.\nAs with \\(6k+1\\), I will make a non-binding to calculate the gcd - greatest common denominator - as your method.\n\n\n\nfermat.py\n\ndef lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return a * b // gcd(a, b)\n\n\nFor BigRSA, this operation will require considerably optimizations related to the “Extended Euclidean Algorithm”.\nNote that inner functions are non-standard C and not permitted in C89.\nThat said, for now the following should be sufficient:\n\nuint64_t gcd(uint64_t a, uint64_t b) {\n  /* Your code here (and update the return statement)  */\n  return 1;\n}\n\nuint64_t lcm(uint64_t a, uint64_t b) {\n  /* Your code here (and update the return statement)  */\n  return a * b;\n}\n\n\n\n\n\n\nOptimizations and Assertions\n\n\n\n\nAdvanced students may wish to apply a series of tests, perhaps as assert statements, to monitor overflow during this calculation.\n\nWe note that the lcm can be larger than two values that are implicitly only bounded by the 64 bit size.\nHow should we manage this?\n\\(\\exists\\) proofs of correctness, given starting assumptions.\n\nAdvanced students may wish to implement the extended Euclidean algorithm without using signed integers, which I found to be non-trivial but not impossibly difficult.\n\n\n\n\n\n\nKeyGen Show\n\n\nA Key in 3 Parts\n\nWe recall that the private key minimally contains:\n\nn, a modular base\ne, an encryptor, and\nd, a descryptor.\n\nBased on the KeyGen lab, it should be uncomplicated to calculate these values for 64 bit keys.\nWe will use .bad instead of .pem and insecurely store these values in plaintext.\nWe will then make executables to generate .bad and encrypt content provided a .bad\n\nWe name a .bad so helpfully we don’t use it by accident.\n\nWe will naively print 3 lines of hexademical values, n, e, then d.\nWe will write them to a 5-line file as follows:\n\nThe first line is the precise header text.\nThe second line is the n value in hexadecimal.\nThe third line is the e value, which is 10001.\nThe fourth line is the d value, which should be kept secret.\nThe fifth and final line is the precise footer text.\n\n\n\n\nunsafe.bad\n\n-----BEGIN UNSAFE PRIVATE KEY-----\n95a61f99198bd8e9\n10001\nfbea5e6a3ed31e8f\n-----END UNSAFE PRIVATE KEY-----\n\n\nThis format is based on the .pem format\n\nFor privacy enhanced email.\nUsed to store keys generated by ssh-keygen.\nIt does not split up n, e, and d\nMore on it latter.\n\nFor reference This is a 1024 bit key made by ssh-keygen -b 1024\n\nThis 1024 bit key is too small to be regarded secure.\nSo our 32 bit keys are far too small to be regarded secure.\nAnd separating components may be regarded as less secure.\n\n\n\n\n~/.ssh/id_rsa\n\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAlwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAIEAv97YRG/TOK6VnXi3LK8N6z/meRvSo5vkjjm0YUIV5zEx8OyZUdTV\ncu114ll/eC4ZgrW3bISzyIO0MB5rnt8oPcO5uiSJIqRSKbd2LNJdkefIpMe4LJJLuzfB4z\nxqtG9vgsxrJNYUMJ6Vsn5YKRQCaCZQdKxMPx+itHkPeQLWQ40AAAIQ0XWwz9F1sM8AAAAH\nc3NoLXJzYQAAAIEAv97YRG/TOK6VnXi3LK8N6z/meRvSo5vkjjm0YUIV5zEx8OyZUdTVcu\n114ll/eC4ZgrW3bISzyIO0MB5rnt8oPcO5uiSJIqRSKbd2LNJdkefIpMe4LJJLuzfB4zxq\ntG9vgsxrJNYUMJ6Vsn5YKRQCaCZQdKxMPx+itHkPeQLWQ40AAAADAQABAAAAgEOvSh2CUU\nHKnK7rWbrimgdmCFiqzvi2Ur81bgNtO6rN+O8jl8Z9TTr4t8A8kDIGGSu6DNW0TnOqulLL\nOG3YDSp4UqMyK1ofNE9ikVFlUEyneNtcIoAtRElcqzwV65yQpujqRKtA0t2HxxRTREX4Jb\n6dHkAPnVC9Yvjede203GVhAAAAQAd79ekwwt++/m6PadnZeLvvWUzHZqkjgOjN5M3a1uS8\n82Y2LQ1oO8hmVTc4d/Gy8+3YkJ480Kjpxm7nirTdYf4AAABBAOC1HxQeZaQcaK7oEulsAL\nw3tvwxZXcTAHGyrwXAhwbEym5V/naUGIB8QWlsbG3tZB03V0qnregcYdtQRXTy1KkAAABB\nANqXE1Toyq5aPp2DqN5Il1zTK5gmDOcmil+ao8M93Zc5ZDAANG40RcEDBHj1xxMzNCwJDo\nXTYW2ynMpXNi5QokUAAAAUdXNlckBERVNLVE9QLVRITVMyUEoBAgMEBQYH\n-----END OPENSSH PRIVATE KEY-----\n\n\n\n\n\nPubKey Show\n\n\nA Key in 2 Parts\n\nWe recall that the public key contains, and should only contain:\n\nn, a modular base, and\ne, an encryptor\n\nBased on the KeyGen lab, it should be uncomplicated to calculate these values for 64 bit keys.\nWe will use .pub instead of .pem or .bad\n\nNot a huge deal how these are stored, actually.\nThe key itself though, is still unsafe to use.\n\nWe will naively print 2 lines of hexademical values, n, then e.\nWe will right them to a file prefixed and suffixed as follows:\n\n\n\nunsafe.pub\n\n-----BEGIN UNSAFE PUBLIC KEY-----\n95a61f99198bd8e9\n10001\n-----END UNSAFE PUBLIC KEY-----\n\n\nUpdate your keygen.c such that each time it runs it:\n\nGenerates a new unsafe.bad\nGenerates a new unsafe.pub\nThat the n and e value in each of these agree.\nThe the n, e, and d value may be used to encrypt and decrypt a letter.\n\n\n\n\n\n\n32 bit Show\n\n\nThe largest keys we can naively fit in the uint64_t type at 32 bit keys.\n\nWhy? Well:\n\nWe do all operations modulo n\nWe must be able to multiple numbers as large as n together.\nThe product of two numbers requires as many bits to store as the both factors.\nSo we must cap intermediate result at 32 bits by capping n at 32 bits.\n\n\nWe get 32 bit n by generating 16 bit primes.\n\nWhy? Well:\n\nn is the product of the primes.\nThe product of two 16 bit numbers is a 32 bit number.\n\n\nWe get 16 bit primes by finding primes less than 2 ** 16 and more than 2 ** 15.\n\nThis is easy to write in hex as 0x8000 and 0x10000.\n\nEnsure your keys are 32 bit.\n\nSimply encrypt values up to 1 &lt;&lt; 31 in size.\n\nHere is a testing script:\n\n\n\ntester.py\n\ndef modexp(m, e, n):\n    if e == 0:\n        return 1\n    if e == 1:\n        return m % n\n    if e % 2:\n        return (m * modexp(m*m % n, e//2, n)) % n\n    return  modexp(m*m % n, e//2, n) % n\n\nmake_encrypt = lambda e, n : lambda m : modexp(m,e,n)\n\nlines = open(\"unsafe.bad\").readlines()\nn = int(lines[1], 16) \ne = int(lines[2], 16) \nd = int(lines[3], 16) \n\nlines = open(\"unsafe.pub\").readlines()\nif n != int(lines[1], 16) or e != int(lines[2], 16):\n    print(\"Public key does not match private key.\")\n    exit()\n\nencrypt = make_encrypt(e,n)\ndecrypt = make_encrypt(d,n)\n\nif all([i == decrypt(encrypt(i)) for i in range(0x100)]):\n    print(\"Keys work for small values.\")\nelse:\n    print(\"Keys failed on small values.\")\n\nif all([i == decrypt(encrypt(i)) for i in range(0,1 &lt;&lt; 31, 1 &lt;&lt; 29)]):\n    print(\"Keys work for larger values.\")\nelse:\n    print(\"Keys failed on larger values.\")\n\n\nBy successfully encrypting and decrypting up to 1 &lt;&lt; 31, the key is large enough for some small tasks, such encrypting the string “hi” - a string of length 3 when including the null terminator, which therefore contains 24 bits of information.\n\n\nPython Reference solution\n\nThis reference solution is logically correct to the best of my knowledge.\nIt is not intended for readability.\n\n\n\nkeygen.py\n\nimport random\n\ndef find_large_prime():\n    is_prime = lambda n : all([n % i for i in range(2, int(n **.5))])\n    candidate = 6 * random.randint(5460,10000) + 1\n    while not is_prime(candidate):\n        candidate += 6\n    return candidate\n\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n    \nlcm = lambda a, b: a * b // egcd(a, b)[0]\np, q = find_large_prime(), find_large_prime()\nn = p * q\ne = 65537\nlmdb = lcm(p - 1,  q - 1)\nd = egcd(e, lmdb)[1]\nwhile d &lt; 0: # fix sign problem\n    d += lcm(p - 1,  q - 1)\nhd = \"-----BEGIN\"\nft = \"-----END\"\ntl = \" UNSAFE PRIVATE KEY-----\\n\"\nopen(\"unsafe.bad\", \"w\").write(f\"{hd}{tl}{n:x}\\n{e:x}\\n{d:x}\\n{ft}{tl}\")\ntl = \" UNSAFE PUBLIC KEY-----\\n\"\nopen(\"unsafe.pub\", \"w\").write(f\"{hd}{tl}{n:x}\\n{e:x}\\n{ft}{tl}\")"
  },
  {
    "objectID": "enigma.html",
    "href": "enigma.html",
    "title": "Enigma",
    "section": "",
    "text": "Enigma Show\n\n\nGoal: Learn C I/O and strings\n\nMy responsibility\n\nI will provide a reference solution in Python (solved)\nI will provide an autograder Containerfile (tester)\n\nYour responsibility\n\nYou will create a solution in C as an “enigma.c” file\nYou will create a Gist with an “enigma.c”\nYou will email me, from your credentialed school email, the url of your Gist, it will look something like:\n\nhttps://gist.github.com/cd-public/a840e95e71ac7309a53ab0bb1282ba40\nWhat follows is reference material to prepare you to implement “enigma.c”\n\nEnigma, Solved, Visual, and Rotors form a description of the requirements\nTester documents the autograder\nOther headings cover the technical details that support the implementation.\n\n\n\n\nTopic Areas\n\n\n\nReview:\nNewish:\n\n\n\n\n- podman\n- curl\n\n\n- vim\n- stdio\n\n\n- gcc\n- ciphers\n\n\n- git\n\n\n\n\n\n\nMotivation\n\nEnigma was a historically significant technology\n\nIt was a Nazi encryption device, using ciphers\nIt was broken by Turing, gay icon and one of the first and greatest computer scientists\n\nAt Willamette, Enigma is an (in)famous CS 151 Intro to Programming assignment\n\nBasically it is the first assignment that requires nested for loops\n\nIn this course, Enigma will demonstrate the obscurity/clarity divide\n\nIn Python, letters and numbers are different things\nIn C, there are no letters or really numbers, just bits and bytes\nThis makes Enigma in C easier, despite being a “harder” language.\n\n\n\n\nReference Materials\n\nYou can review the Python assignment if you wish:\n\nWrite-ups:\n\nProf. Roberts\nProf. Rembold\nProf. Calvin\n\nSlides\n\nProf. Rembold\nProf. Calvin\n\nAssignment Repository\n\nI also provide\n\n“Solved”: A Python implementation of the machine\n“Visual”: A text visualizer of the Engima machine’s ciphers\n“Rotors”: A text visualizer of the full Enigma machine\n\n\n\n\n\n\nSolved Show\n\n\nHere is a reference solution, with a few tests, in Python.\n\nGist\n\nI regard this code as considerably easier to read, test, and understand than most plaintext descriptions.\nI will also do a visual representation.\nThe ciphers are sometimes called “rotors” because historically they were implemented as a rotating… cipher.\n\n#!/usr/bin/env python3\n\n# constants                       # constant\nrs = [                            # rotors\n    \"BDFHJLCPRTXVZNYEIWGAKMUSQO\", # fast\n    \"AJDKSIRUXBLHWTMCQGZNPYFVOE\", # medium\n    \"EKMFLGDQVZNTOWYHXUSPAIBRCJ\", # slow\n    \"IXUHFEZDAOMTKQJWNSRLCYPBVG\"  # reflect\n]\nA  = ord('A')                     # value of 'A'\nNC = len(rs[0])                   # number of characters\n\n# apply a cipher/rotor `r` to a letter `c`\nrapply = lambda c, r : r[ord(c) - A]\n\n# invert a cipher/rotor `r`\n    # create a list of letters with their index\n        # [(r[i],i) for i in range(NC)]\n    # sort the list\n        # for p in sorted\n    # convert indexes to back to letters in the alphabet\n        # chr(p[1]+A)\ninvert = lambda r : [chr(p[1]+A) for p in sorted([(r[i],i) for i in range(NC)])]\n\n# extend the rotor set to include inverted ciphers\n    # In reversed order, as well\n    # fas med slo ref slo med fas\nrs += [invert(r) for r in rs[2::-1]]\n\n# encrypt letter `c` with rotors in default* positions\nrotors = lambda c : [c := rapply(c,r) for r in rs][-1]\n\n# default position a,b,c -&gt; r,f,o, respectively\nassert([\n    rotors('A'),\n    rotors('B'),\n    rotors('C')\n] == ['R','F','O'])\n\n# shift letter `c` forward `n` letters in alphabet\nnshift = lambda c, n : chr((ord(c) - A + n) % NC + A)\n\n# allow rotor rotations\n    # fast spins every letter\n    # medi spins every time fast loops back NC-&gt;0\n    # slow \"\"               medi \"\"\nshifts = lambda l, n : [\n    l % NC, l // NC % NC, l // (NC*NC) % NC,\n    0,\n    l // (NC*NC) % NC, l // NC % NC, l % NC\n][n]\n\n# combine shift apply? don't know what to call\nshiply = lambda c, n, r : nshift(rapply(nshift(c,n),r),-n)\n# or if you prefer\nshiply = lambda c, n, r : chr((ord(r[(ord(c)-A+n)%NC])-A-n)%NC+A)\n\n# single letter enigma, with number of previous letters `l`\nletter = lambda c, l : [c := shiply(c,shifts(l,i),rs[i]) for i in range(len(rs))][-1]\n\n# phrase\n    # enigma starts with an single rotation before first encryption.\nenigma = lambda s : \"\".join([letter(s[i],i+1) for i in range(len(s))])\n\n# test\nassert([\n    enigma(\"AAA\"),\n    enigma(\"ABC\"),\n    enigma(\"ZLC\")\n] == [\"ZLC\",\"ZRA\",\"AAA\"])\n\nif __name__ == \"__main__\":\n    import sys\n    print(enigma(sys.argv[1]))\n\nHere is an example of how it is used to print “HELLOWORLD”:\n\npython3 enigma.py MNBOASVTTB\n\n\n\nVisual Show\n\n\nSingle Cipher\n\nVisualize a cipher as mapping a A-Z to A-Z.\n\nSay, ‘E’ becomes ‘J’\n\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J\n\n\nIterative Cipher\n\nWe can apply ciphers iteratively.\n\nSo the output ‘J’ of the first cipher is input to the next cipher.\n\n\n ____________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher[0]\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J&gt;&gt;&gt;&gt;J               \n __________|_________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[          |                 ]  \n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # cipher[1]\n ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n           B\n\n\nAll Ciphers\n\nEnigma ciphers/rotors are named:\n\nFast\nMedium\nSlow\nReflect, which has special properties\n\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J&gt;&gt;&gt;&gt;J               \n __________|_________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[          |                 ]  \n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   B&lt;&lt;&lt;&lt;&lt;&lt;&lt;B\n __|_________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[  |                         ]\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   K&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n            M\n\nReflector\n\nWe note that with the reflector:\n\nIf we take the alphabet and find a corresponding letter in the cipher, or\nIf we take the cipher and find a corresponding letter in the alphabet\nWe get the same letter…\n\nThis is…\n\nThe special property of the reflector, and\nHow we will re-use the fast, medium, and slow ciphers.\n\n\n\n\n            K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n            M\n\n              K\n _____________|______________\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n[             |              ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n              M\n\n\n\n\n\nDecryption\n\nAfter the reflect cipher, values are decrypted\n\nA letter’s place in the cipher, not alphabet, is found\nThis location is used to determine the letter in the alphabet\nEssentially, a change from mapping the alphabet to a cipher, and vice versa.\n\n‘H’ comes out of the reflector\n\n‘H’ is is index 7 letter of the alphabet\nSo in the next cipher, we’ll look up the index 7 letter of the cipher\nIt is now more helpful to think of an index than a letter - that is what changes here.\n\n\n            K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    M&lt;&lt;&lt;&lt;&lt;&lt;&lt;M\n ___|________________________\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n[   |                        ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C\n\n\nInversion\n\nWe can separately calculate what cipher would correspond to the “inverted” slow cipher.\n\nWe take all the slow-&gt;alphabet pairs\nWe alphabetize the pairs by the first letter\nThe output is no longer alphabetized, as is a new cipher.\n\nIt is left to the student as a design decision whether do\n\n“Decrypt” via a provided cipher, or\n“Invert” a provided cipher, and apply the inverted cipher.\n\nStudents should consider the complexity of both methods.\n\n\n\n    M\n ___|________________________\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n[   |                        ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C\n\n              M\n _____________|______________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[             |              ]\n[ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1\n ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n              C\n\n\n\n\nIterating Back\n\nThe next cipher is “medium” and its index 7 letter is ‘U’\n\n‘U’ is the index 20 letter of the alphabet.\n\n\n\n\n    M\n ___|________________________\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n[   |                        ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;C\n ________________|____________\n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n[                |           ]  \n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾\n                 P\n\n              M\n _____________|______________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[             |              ]\n[ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1\n ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;C\n ___|________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[   |                        ]  \n[ AJPCZWRLFBDKOTYUQGENHXMIVS ] # medium^-1\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    P            \n\n\n\n\nEnd-to-end\n\nThe entire end-to-end cipher application can be visualized as follows…\n\n\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J&gt;&gt;&gt;&gt;J               \n __________|_________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[          |                 ]  \n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   B&lt;&lt;&lt;&lt;&lt;&lt;&lt;B\n __|_________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[  |                         ]\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   K&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    M&lt;&lt;&lt;&lt;&lt;&lt;&lt;M\n ___|________________________\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n[   |                        ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;C\n ________________|____________\n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n[                |           ]  \n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾\n         P&lt;&lt;&lt;&lt;&lt;&lt;&lt;P\n ________|___________________\n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast\n[        |                   ]  \n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n         H\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J&gt;&gt;&gt;&gt;J               \n __________|_________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[          |                 ]  \n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   B&lt;&lt;&lt;&lt;&lt;&lt;&lt;B\n __|_________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[  |                         ]\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   K&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n            M&gt;M\n _____________|______________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[             |              ]\n[ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1\n ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;C\n ___|________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[   |                        ]  \n[ AJPCZWRLFBDKOTYUQGENHXMIVS ] # medium^-1\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    P&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;P    \n ________________|___________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[                |           ]  \n[ TAGBPCSDQEUFVNZHYIXJWLRKOM ] # fast^-1\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾\n                 H\n\n\nFor the remainder of the write-up, I will assume without loss of generality the usage of inverted ciphers.\n\n\n\n\nRotors Show\n\n\nSingle Rotor\n\nVisualize a rotor as mapping a A-Z to A-Z.\n\nSay, ‘E’ becomes ‘J’\n\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J\n\n\nRotation\n\nWe call these things rotors because they rotate:\n\nThe mapping from e.g. index i of the input to index j of the output is unalterated\n\nFor example, ‘E’ is index 5 and maps to ‘J’ at index 10, both of the alphabet\n\nHowever, we can change the rotors as follows:\n\nThe input index is shifted forward by some shift value n\nThis input index is mapped to an output index\nThis output index is shifted backward by the same n\n\n\nLet’s visualize with n = 3\n\n      E\n      |&gt;&gt;&gt;\n      EFGH\n      &gt;&gt;&gt;|\n ________|___________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[        |                   ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n         P\n      &lt;&lt;&lt;|\n      MNOP \n      |&lt;&lt;&lt;\n      M\n\n\nAs ciphers\n\nIt is worth noting this identical to generating ciphers that start an the index n letter of the alphabet and wrap around from Z to A.\n\n\n\n      E\n      |\n      |&gt;&gt;&gt;\n      EFGH\n      &gt;&gt;&gt;|\n         |\n         |\n ________|___________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[        |                   ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n         P\n         |\n      &lt;&lt;&lt;|\n      MNOP \n      |&lt;&lt;&lt;\n      |\n      M\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ DEFGHIJKLMNOPQRSTUVWXYZABC ] # forward(3)\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      H&gt;&gt;H\n ________|___________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[        |                   ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n         P&gt;&gt;&gt;&gt;&gt;&gt;&gt;P\n ________________|___________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[                |           ]  \n[ XYZABCDEFGHIJKLMNOPQRSTUVW ] # forward(-3)\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾\n                 M\n\n\nFor the remainder of the write-up, I will assume without loss of generality that rotations can be understood without considering them to be ciphers.\n\n\nFor Enigma\n\nThe Enigma machine triggers rotor rotations every time a letter is encrypted.\nThey rotate as follows\n\nBefore a letter is encryped, the fast rotor rotates forward once.\n\nSo before the first encryption,\n\n(n = 0 : A-&gt;A) becomes (n = 1 : A-&gt;B) before the fast rotor.\n\nTo understand this, the rotation must be applied at two points:\n\nIf the fast rotor “loops back” from a rotation from (n = 25 : A-&gt;Z) to a non-rotation of (n = 26 = 0 : A-&gt;A), then\n\nThe medium rotor advances once, from e.g. (n = 0 : A-&gt;A) to (n = 1 : A-&gt;B)\n\nWhen medium loops back, slow advances once.\nThere are no rotations related to the reflector.\n\nImagine we have typed 29 letters:\n\nthe fast rotor has progressed 29 times and progresses once more before encryption.\n\nSo shift by n = 30, or n = 30-26 = 4.\n\nthe medium rotor progresed 1 time,\nand slow rotor progressed not at all.\n\nSteps labelled “adjust” are not computational\n\nI change horizontal alignment of letters to align the rotors.\nThis is a visual change only, as it was in “Visual” above.\n\n\n     X\n     |\n=====|===========================================\n=    X                                          =\n=    |&gt;&gt;&gt;&gt;                                      =\n=    XYZAB                           # rotate   =\n=    &gt;&gt;&gt;&gt;|                                      =\n=        B                                      =\n=      __|_________________________             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet = \n=     [  |                         ]            = # fast\n=     [ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast     =\n=      ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾             =\n=        D                                      =\n=    &lt;&lt;&lt;&lt;|                                      =\n=    ZABCD                           # rotate   =\n=    |&lt;&lt;&lt;&lt;                                      =\n=    Z                                          =\n=====|===========================================\n     |\n     Z&gt;Z                             # adjust\n       |\n=======|=========================================\n=      Z                                        =\n=      |&gt;                                       =\n=      ZA                            # rotate   =\n=      &gt;|                                       =\n=       A                                       =\n=      _|__________________________             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =\n=     [ |                          ]            = # medium\n=     [ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium   =\n=      ‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾             =\n=       A                                       =\n=      &lt;|                                       =\n=      ZA                            # rotate   =\n=      |&lt;                                       =\n=      Z                                        =\n=======|=========================================\n       |\n       Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Z   # adjust\n                                 |\n=================================|===============\n=                                Z              =\n=                                |              =\n=                                Z   # rotate   =\n=                                |              =\n=                                Z              =\n=      __________________________|_             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =\n=     [                          | ]            = # slow\n=     [ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow     =\n=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾             =\n=                                J              =\n=                                |              =\n=                                J   # rotate   =\n=                                |              =\n=                                J              =\n=================================|===============\n                                 |\n                 J&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;J   # adjust\n       __________|_________________\n      [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n      [          |                 ]              # reflect\n      [ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n       ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n                 O&gt;&gt;&gt;&gt;O              # adjust\n                      |\n======================|==========================\n=                     O                         =\n=                     |                         =\n=                     O              # rotate   =\n=                     |                         =\n=                     O                         =\n=      _______________|____________             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =\n=     [               |            ]            = # slow\n=     [ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1  =\n=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾             =\n=                     M                         =\n=                     |                         =\n=                     M              # rotate   =\n=                     |                         =\n=                     M                         =\n======================|==========================\n                      |\n                    M&lt;M              # adjust\n                    |\n====================|=============================\n=                   M                           =\n=                   |&gt;                          =\n=                   MN               # rotate   =\n=                   &gt;|                          =\n=                    N                          =\n=      ______________|_____________             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =\n=     [ |            |             ]            = # medium\n=     [ AJPCZWRLFBDKOTYUQGENHXMIVS ] # medium^-1=\n=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾             =\n=                    T                          =\n=                   &lt;|                          =\n=                   ST               # rotate   =\n=                   |&lt;                          =\n=                   S                           =\n====================|============================\n                    |\n                    S&gt;&gt;&gt;&gt;&gt;S          # adjust\n                          |\n==========================|======================\n=                         |                     =\n=                         S                     =\n=                         |&gt;&gt;&gt;&gt;      # rotate   =\n=                         STUVW                 =\n=                         &gt;&gt;&gt;&gt;|                 =\n=      _______________________|____             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet = \n=     [                       |    ]            = # fast\n=     [ TAGBPCSDQEUFVNZHYIXJWLRKOM ] # fast^-1  =\n=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾             =\n=                             R                 =\n=                         &lt;&lt;&lt;&lt;|                 =\n=                         NOPQR       # rotate  =\n=                         |&lt;&lt;&lt;&lt;                 =\n=                         N                     =\n==========================|======================\n                          |\n                          N\n\n\n\n\nchar * Show\n\n\nHello, world!\n\nI start “enigma.c” with “hello.c” from Alpine\n\nThis file will successfully create an executable, not correctly encrypt or decrypt.\nTry it out with the autograder container.\n\n\n\n\nenigma.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"hello, world\\n\");\n    return 0 ;\n}\n\n\n\nNo strings attached\n\nIn C there are no strings.\n\nThere are instead things called char *\nSay “character star”\nWe attach the * to the variable name\n\nWe’ll revisit this later - it will make sense.\n\nThat is, an array, or buffer, of characters\n\nNot quite a list - closer to a NumPy array.\n\n\nIt matters what things are called.\n\nIn C we must say what kind of thing a variable is when we “declare” the variable.\nLater we use the variable, without specifying the kind of thing\nBut we cannot change its kind.\nC variable declaration is like how Python function declaration, with def\n\nWe will use format print and variable declarations to introduce char *\n\nWe note that Python print appends a newline and C printf does not.\n\nI specify an non-newline terminator in Python for equivalence.\n\n\n\n\n\n\n\ntest.py\n\nx = 1\nprint(f\"{x:d}\", end=\"\")\n# we can reassign x and change its type\nx = \"hello world\"\nprint(f\"{x:s}\", end=\"\")\n\n\n\n\ntest.c\n\nint n = 1;\nprintf(\"%d\", n) ;\n/* we have to make a new variable of novel type */\nchar *m = \"hello world\";\nprintf(\"%s\", m) ;\n\n\n\n\nBoth have the same output:\n\nThe numerical value “1” and the string value “hello world” on the same line.\n\n\n1hello world\n\nYou can update “hello.c” to use a format print.\n\nThis will form the basis of output in this assignment.\n\n\n\n\nenigma.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    char *str = \"hello, world\";\n    printf(\"%s\\n\", str);\n    return 0 ;\n}\n\n\n\nConstants\n\nThe C language has a form of support for constants\n\nThese are values that are fixed when the executable is created.\nThey may not be reassigned by any line of code.\n\nThe #define “pre-processor directive” is used to create constants.\n\n#define is like #include which is somewhat like import\nIt defines new values, which are not variables, for use in the .c file\nThe pre-processor reads .c files before the executable is created.\n\nWe can also use #define for strings, such as the rotor strings.\n\nBy convention, constants are named in all caps, like ROTORS\nI used a single string of all rotors concatenated.\nYou may do whatever works for you.\n\n\n\n\nenigma.c\n\n#include &lt;stdio.h&gt;\n\n#define STR \"hello, world\"\n\nint main() {\n    printf(\"%s\\n\", STR);\n    return 0 ;\n}\n\n\nAn astute learner will note that constants need not be computed within an executable.\nIt is not uncommon to compute constants in a different file, or even in a different language.\n\nMy ROTORS constant was computed in Python.\nI used Python file operations to save this computation to “enigma.c”\nVia vim I used the “yank” and “paste” features to move it to the top of “enigma.c”.\n\n\n\n\nJust a little bit\n\nIn C, characters aren’t printing characters.\n\nThey are “just bits” - a collection of ones and zeroes, or a number.\nWe attach the * to the variable name\n\nWe’ll revisit this latter - it will make sense.\n\nThis differs from Python, which uses strings of length one.\n\nThis is sketchy, sometimes.\nStrings are a non-numeric.\n\n\nIf we want to use a numerical value as a printing character, we use a format print.\nC characters use single quotes, and C strings use double quotes.\n\n\n\n\n\ntest.py\n\nx = ord('A')\nprint(f\"{x:d}, {x:x}, {x:c}\")\n\n\n\n\ntest.c\n\n/* We do not use anything like ord() */\nprintf(\"%d, %x, %c\\n\", 'A','A','A');\n\n\n\n\nBoth have the same output:\n\nThe decimal (base 10), hexadecimal (base 16), and unicode/ascii representations of the same value.\n\n\n65, 41, A\n\nAn astute learner will note that this insight is sufficient to implement a rotor.\n\n\n\n\n\nC loop Show\n\n\nBuilding Character\n\nThe core complication of the Enigma machine was that it was an iterative cipher.\nLet’s practice iteration by iterating over a char *\nWe note:\n\nIn C there is no string, list, tuple, generator, dictionary, or set type.\nIn Python, for loops require one of these types.\nHenceforth we refer to the C for loop as a “for loop” and the Python for loop as a “for each loop”.\n\nA for loop is composed of three components:\n\nInitiate\nTerminate\nIterate\n\nSyntactically, they are structured follows:\n\nfor ( 𝘪𝘯𝘪𝘵𝘪𝘢𝘵𝘦; 𝘵𝘦𝘳𝘮𝘪𝘯𝘢𝘵𝘦; 𝘪𝘵𝘦𝘳𝘢𝘵𝘦) { \n    𝘤𝘰𝘥𝘦 𝘣𝘭𝘰𝘤𝘬\n}\n\nPrint 0 through 9\n\nint i ;\nfor ( i = 0; i &lt; 10; i++) { \n    printf(\"%d\\n\", i);\n}\n\nWe now explore each component.\nAn astute learner will note that this insight is sufficient to implement the entire enigma machine.\n\nRemaining headings provide guidance on common pitfalls.\nIf you can do enigma now, skip to “C args”\n\n\n\nIterate\n\nThe last of the three for loop components, the iterator, is closest to the Python for each loop.\nThe iterator statement is run each time the loop completes, after the internal code block is run.\nAny statement may be placed in this position.\nThe most common is i++, a special shorthand for incrementation.\n\nIt is logically equivalent to Python i += 1.\n\nExample: Find the length of the first word in a string with an iterator only:\n\nIncrease a string index by one within the iterator.\nInclude an if statement in the for loop code block.\nUse a return statement in the if statement code block.\n\n\nchar *str = \"hello world\";\nint i = 0;\nfor ( ; ; i++) {\n        if (str[i] == ' ') {\n                printf(\"%d\\n\", i);\n                return 0;\n        }\n}\n\n\nTerminate\n\nUnlike Python strings, C character arrays have no length.\nRather, they end with a special character.\n\nThis character is called the null terminator\nIt is non-printing (not visible).\nIt is denoted explicitly via '\\0'\n\nSingle quotes to denote a character.\nA backslash “escape” character to denote a special character.\nA zero to denote it is “null”, “zero”, or “nothing”\n\nIt is numerically equal to zero.\n\nUnlike Python booleans, C has no boolean type.\n\nRather, it has truthiness, akin to Python if statements with numerical conditions.\nThe numerical value zero is false.\nAll other numerical values are true.\n\nThe termination statement causes the loop to end when it is equal to zero.\nExample: Find the length of the first word in a string with a terminator only:\n\nCheck if a character is the null terminator in the termination statement.\nInclude an incrementation in the for loop code block.\n\n\nchar *str = \"hello world\";\nint i = 0;\nfor ( ; str[i] ; ) {\n        i++;\n}\nprintf(\"%d\\n\", i);\nreturn 0;\n\nThis is also a good example of how sometimes the C for loop may have no code block.\n\nHere is a logically equivalent way to measure the length of a char * serving as a string.\n\n\nchar *str = \"hello world\";\nint i = 0;\nfor ( ; str[i] ; i++ ) { }\nprintf(\"%d\\n\", i);\nreturn 0;\n\nThis is also a good chance to test what order the terminator and iterator are checked.\n\nThe terminator is checked before the iterator.\nThe iterator does not if the terminator is true.\n\nThis matters a lot in this case, where the length calculated would be off by one.\n\n12 instead of 11\nThe value of the iteration variable i is increased the same time the terminator is checked.\nSo the null terminator is at index 11 but this C code would print the numerical value 12.\n\n\nchar *str = \"hello world\";\nint i = 0;\nfor ( ; str[i++] ; ) { }\nprintf(\"%d\\n\", i);\nreturn 0;\n\n\nInitiate\n\nThe initiator allows setting a variable to a certain value before beginning a loop.\nI mostly use it when I have more than one loop, and want to use i for both.\nHere is the above example, with an iniatiator.\n\nchar *str = \"hello world\";\nint i ;\nfor ( i = 0; str[i++] ; ) { }\nprintf(\"%d\\n\", i);\nreturn 0;\n\nThe following is permissable in all modern forms of C, but was not an initial feature of the language.\n\nAs a rule, I try not to declare variables in the initializer so my code works on older devices.\nIt also makes writing a C compiler easier, if you ever plan to do that.\n\n\nchar *str = \"hello world\";\nfor ( int i = 0; str[i++] ; ) { }\nprintf(\"%d\\n\", i);\nreturn 0;\n\n\n\n\n\nArrays Show\n\n\nCollections\n\nC lacks any collection type (list, set, tuple, string)\n* notation is used instead\n\n* denotes the location of a some value\nThe type of this value gives its size\nSuccessive values are at successive locations\nThese are memory addresses.\n\n[] notation may also be used\n\nWe simply include the length within brackets.\n\nWe don’t worry about any of that for now.\nYou will likely want to use a collection on Enigma:\n\nRotor rotations\nRotors themselves\nI don’t know, for fun.\n\nC array notation is very similar to Python set notation, but maintains order\n\nYou are responsible for keeping track of the length.\n\n\nchar carray[5] = {'a', 'e', 'i', 'o', 'u'};\nint iarray[5] = {2, 4, 8, 16, 32};\nint i;\nfor (i = 0; i &lt; 5; i++) {\n    printf(\"%c %d\\n\", carray[i], iarray[i]);\n}\n\nCharacter arrays\n\nUnlike Python, where a list of characters and a string of characters differ, in C, an array of characters and a “string” of characters are identical.\n\nchar carray[5] = {'a', 'e', 'i', 'o', 'u'};\nchar string[5] = \"abcde\";\nint i;\nfor (i = 0; i &lt; 5; i++) {\n        printf(\"%c %c\\n\", carray[i], string[i]);\n}\n\nC strings are implicitly null terminated, so there is a minor difference, but that is immaterial here.\n\nHow would you check if a string is null terminated?\n\n\n\n\n\n\n\nC math Show\n\n\nInteger Division\n\nIn C, there are numerous integer data types, including int and char\nAll use integer division by default.\nTest as follows:\n\nint i;\nfor (i = 0; i &lt; 5; i++) {\n        printf(\"%d / %d -&gt; %d\\n\", i, 2, i / 2);\n}\n\nThe results are clear:\n\n0 / 2 -&gt; 0\n1 / 2 -&gt; 0\n2 / 2 -&gt; 1\n3 / 2 -&gt; 1\n4 / 2 -&gt; 2\n\n\nModulo\n\nBoth C and Python have a % operator\n\nIn Python it is the “more mathematically correct” modulo operation\nIn C it is the less common remainder operation.\n\nThe differences were non-obvious and led to a pernicious bug in my enigma.c\n\n\nPython %\n\nFirst, test Python\n\n\n\nmodulo.py\n\n[print(f\"{i:2d} % 3 -&gt; {i%3:d}\") for i in range(-5,5)]\n\n\nWe see the predictable result.\n\n-5 % 3 -&gt; 1\n-4 % 3 -&gt; 2\n-3 % 3 -&gt; 0\n-2 % 3 -&gt; 1\n-1 % 3 -&gt; 2\n 0 % 3 -&gt; 0\n 1 % 3 -&gt; 1\n 2 % 3 -&gt; 2\n 3 % 3 -&gt; 0\n 4 % 3 -&gt; 1\n\n\nC %\n\nNow, test C\n\n\n\nremainder.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n        int i;\n        for (i = -5; i != 5; i++) {\n                printf(\"%2d %% %d -&gt; %2d\\n\", i, 3, i % 3);\n        }\n        return 0;\n}\n\n\nWe see the predictable result.\n\n-5 % 3 -&gt; -2\n-4 % 3 -&gt; -1\n-3 % 3 -&gt;  0\n-2 % 3 -&gt; -2\n-1 % 3 -&gt; -1\n 0 % 3 -&gt;  0\n 1 % 3 -&gt;  1\n 2 % 3 -&gt;  2\n 3 % 3 -&gt;  0\n 4 % 3 -&gt;  1\n\nUnlike Python, C % may generate negative results.\nThere are a number of ways to deal with that.\n\n\n\nPythonic % in C\n\nWith thanks to Stack Overflow\n\nprintf(\"%2d Py%% %d -&gt; %d\\n\", i, 3, ((i % 3) + 3) % 3);\n\nThis gives necessarily positive values.\n\n-5 Py% 3 -&gt; 1\n-4 Py% 3 -&gt; 2\n-3 Py% 3 -&gt; 0\n-2 Py% 3 -&gt; 1\n-1 Py% 3 -&gt; 2\n 0 Py% 3 -&gt; 0\n 1 Py% 3 -&gt; 1\n 2 Py% 3 -&gt; 2\n 3 Py% 3 -&gt; 0\n 4 Py% 3 -&gt; 1\n\n\n\n\n\nC args Show\n\n\nArguments\n\nThe reference Python contains the following snippet:\n\nif __name__ == \"__main__\":\n    import sys\n    print(enigma(sys.argv[1]))\n\nThis is roughly equivalent to printing the return result of the enigma function within a function called main.\nThis is close to C, but we haven’t introduced a way to use command line arguments.\nLet’s look at a minimal Python example.\n\n\nPyEcho\n\n\npyecho.py\n\nimport sys\nprint(sys.argv[1])\n\n\nWe use as follows:\n\npython3 pyecho.py \"hello world\"\n\nWe can construct the same within C.\n\n\n\nCEcho\n\nThe Python sys module contains many features present by default in a systems programming language.\nOne such is argv, a vector (in the mathematical sense) of arguments.\n\nThese are command line arguments.\nIn Python a list of strings\nIn C an array of char *\nThe zeroth argument is the name of the Python script or C executable\n\nThere is additionally something called argc, an integer count of arguments.\n\nIn C this is needed to know the length of the vector\nIn Python it is redundant, but potentially useful\n\nWe have thus far written main with no arguments, so we also introduce how to write functions with arguments.\n\nC function arguments are identical to Python function arguments\nAs with other variables, C function argument variables must be declared with a type\nUsing functions will make writing C much easier.\n\n\n\n\ncecho.c\n\n#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv) {\n        printf(\"%s\\n\", argv[1]);\n        return 0;\n}\n\n\nYou may wish to compile then try the following:\n\ngcc cecho.c -o cecho\n\nNo arguments, which gives a segmentation fault, a type of error when you try to read something that doesn’t exist\n\n./cecho\n\nOne argument, which is printed.\n\n./cecho hello\n\nTwo arguments, of which one is printed.\n\n./cecho hello world\n\nTwo words as a single argument using quotes.\n\n./cecho \"hello world\"\n\nYou may note that Python has all the same features.\n\n\n\n\n\n\nTester Show\n\n\nPodman\n\nI am providing the following Containerfile, which will serve as a minimal autograder\n\nIt sets up an Alpine container.\nIt downloads a Python script to test.\nIt copies in “enigma.c” from your system.\n\n\n\n\nContainerfile\n\nFROM alpine\n\nRUN apk add gcc libc-dev python3 curl\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/main/enigma/tester.py -o tester.py\n\nCOPY enigma.c .\n\n\n\nUsage\n\nI built my container via:\n\npodman build -t tester .\n\nI tested my code via:\n\npodman run tester python3 tester.py\n\nIf the above script returns “Perfect!” you are done.\n\nCreate a Gist with an “enigma.c”.\nEmail me the url of your Gist, it will look something like, from your official school email:\n\n\nhttps://gist.github.com/cd-public/a840e95e71ac7309a53ab0bb1282ba40\n\nI will review the most recent version prior to the due date.\n\n\n\nVim trick:\n\nYou will probably want to work in a container with vim and also test your code in the same container.\n\nIt is possible to create a second command line tab that is also within the container.\n\nConsult podman documentation - many ways to do this.\n\nI recommend using vim built-in :term command, which splits the screen into a vim editor and a vim terminal.\nYou can move between windows using ctrl+w - if it doesn’t work, Google it.\n\n\n\n\nPodman trick:\n\nYou will probably want to create one container then work in that container until you finish.\npodman run will create a new container each time, which is not what you probably want.\nThe following recycles the previous container, mostly.\n\nRead more: Stack Overflow\n\n\npodman start -a -i `podman ps -q -l`"
  },
  {
    "objectID": "encode.html#announcements",
    "href": "encode.html#announcements",
    "title": "Encode",
    "section": "Announcements",
    "text": "Announcements\n\nWelcome to CS 276\nDesynced Lecture\n\nNo Class Thursday, 30 Jan"
  },
  {
    "objectID": "encode.html#today",
    "href": "encode.html#today",
    "title": "Encode",
    "section": "Today",
    "text": "Today\n\nEncoding\n\nEndianness\nCasts\nTwo’s Complement"
  },
  {
    "objectID": "encode.html#good-at",
    "href": "encode.html#good-at",
    "title": "Encode",
    "section": "“Good at”",
    "text": "“Good at”\n\nComputers “are good at” storing numerical data.\n\nAt a high level numerical computing\n\nNumPy\nR\nJulia\nStata\nSAS"
  },
  {
    "objectID": "encode.html#why",
    "href": "encode.html#why",
    "title": "Encode",
    "section": "Why?",
    "text": "Why?\n\n\n\nImagine thinking in digits.\nTo store a ~3 digit number, need \\(3 \\times 10 = 30\\) “things” that can hold a number.\n\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n10^0\n\n10^1\n\n10^2\n\n\n\nstruct0\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\n\nstruct:0-&gt;struct0\n\n\n\n\n\nstruct1\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\n\nstruct:1-&gt;struct1\n\n\n\n\n\nstruct2\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\n\nstruct:2-&gt;struct2"
  },
  {
    "objectID": "encode.html#binary",
    "href": "encode.html#binary",
    "title": "Encode",
    "section": "Binary",
    "text": "Binary\n\nWe are familiar with binary encoding.\nWe note: \\(\\log_2(999) \\lt 10\\)\nDecimal encoding squanders \\(\\dfrac{2}{3}\\) of it’s storage space.\nSo we store in binary.\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^0\n\n2^1\n\n2^2\n\n2^3\n\n2^4\n\n2^5\n\n2^6\n\n2^7\n\n2^8\n\n2^9\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1"
  },
  {
    "objectID": "encode.html#binary-1",
    "href": "encode.html#binary-1",
    "title": "Encode",
    "section": "Binary",
    "text": "Binary\n\nThe benefit here is that is sufficient to note the presence or absence of a digit (1)\nVersus the specific digit \\(\\in [1,9]\\) and presence of absense (0)\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^0\n\n2^1\n\n2^2\n\n2^3\n\n2^4\n\n2^5\n\n2^6\n\n2^7\n\n2^8\n\n2^9\n\n \n\n1\n\n \n\n \n\n1\n\n1\n\n \n\n \n\n1"
  },
  {
    "objectID": "encode.html#wait-a-minute.",
    "href": "encode.html#wait-a-minute.",
    "title": "Encode",
    "section": "Wait a minute.",
    "text": "Wait a minute.\n\n\n\nWhy is the ones digit (\\(n^0\\)) leftmost ?\n\nThe “least significant bit” or “lsb”\n\nIn e.g. English place the “lsb” last.\n\nCS 276 ⇒\n\n\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n10^0\n\n10^1\n\n10^2\n\n\n\nstruct0\n\n \n\n \n\n \n\n \n\n \n\n \n\n6\n\n \n\n \n\n \n\n\n\nstruct:0-&gt;struct0\n\n\n\n\n\nstruct1\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n7\n\n \n\n \n\n\n\nstruct:1-&gt;struct1\n\n\n\n\n\nstruct2\n\n \n\n \n\n2\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\nstruct:2-&gt;struct2"
  },
  {
    "objectID": "encode.html#languages",
    "href": "encode.html#languages",
    "title": "Encode",
    "section": "Languages",
    "text": "Languages\n\nIn e.g. spoken word, makes sense to lead with the biggest value.\n\n200 of something is closer to 299 of something than 0 of something is to 9 of something.\n\nIn e.g. programming, we often lead with lowest numerical index.\n\nWe look at the arr[0] or something before the arr[1] of something."
  },
  {
    "objectID": "encode.html#in-practice",
    "href": "encode.html#in-practice",
    "title": "Encode",
    "section": "In Practice",
    "text": "In Practice\n\nWe end up with\n\n\"276\"[0] == '2' and 276 % (10 ** 1) == 6\n\nConfusing!"
  },
  {
    "objectID": "encode.html#annoyance",
    "href": "encode.html#annoyance",
    "title": "Encode",
    "section": "Annoyance",
    "text": "Annoyance\n\nThis gets very annoy when trying to move numbers around that don’t quite fit in some number of bits.\n\nSay I have 123,456 followers on Instagram📷\nBoycott Meta etc etc.\nAnd/or follow me @calvinallegedly\n\nAlso imagine it is 1969 and you only have 8 bit integers."
  },
  {
    "objectID": "encode.html#scanf",
    "href": "encode.html#scanf",
    "title": "Encode",
    "section": "Scanf",
    "text": "Scanf\n\nWe can use scanf - the inverse of printf\n\nWe give scanf a format string, like:\n\n%d,%d\nTwo comma-separated decimal values.\nAstute observers will realize where .csv’s come from\n\nFrom whence .csv’s hail\n\n\n\n\nscanf(\"%d,%d\");"
  },
  {
    "objectID": "encode.html#test",
    "href": "encode.html#test",
    "title": "Encode",
    "section": "Test",
    "text": "Test\n\nTest it\n\n\n\nscanf.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    scanf(\"%d,%d\");\n    return 0;\n}"
  },
  {
    "objectID": "encode.html#warning",
    "href": "encode.html#warning",
    "title": "Encode",
    "section": "Warning",
    "text": "Warning\n\nWe draw a warning for missing arguments for each format code\n\nscanf.c: In function ‘main’:\nscanf.c:4:13: warning: format ‘%d’ expects a matching ‘int *’ argument [-Wformat=]\n    4 |     scanf(\"%d,%d\");\n      |            ~^\n      |             |\n      |             int *\nscanf.c:4:16: warning: format ‘%d’ expects a matching ‘int *’ argument [-Wformat=]\n    4 |     scanf(\"%d,%d\");\n      |               ~^\n      |                |\n      |                int *"
  },
  {
    "objectID": "encode.html#arguments",
    "href": "encode.html#arguments",
    "title": "Encode",
    "section": "Arguments",
    "text": "Arguments\n\nWe need integers.\n\n    int a,b;\n\nWell actually, were asked to provided an int * for each integer format code.\n\n\nformat ‘%d’ expects a matching ’int *’\n\n    int a[1], b[1]; /* Think of these as arrays of one element. */\n\nRegard int *n is just an int n[m] for which we don’t say what m is."
  },
  {
    "objectID": "encode.html#section",
    "href": "encode.html#section",
    "title": "Encode",
    "section": "[]",
    "text": "[]\n\n\n\nSome of you used arrays of unspecified length on enigma, that is banned by c89.\nYou should know how long the arrays in your code are.\nThis is a security class and that stuff matters.\nSee more\nRead more"
  },
  {
    "objectID": "encode.html#use-small-arrays",
    "href": "encode.html#use-small-arrays",
    "title": "Encode",
    "section": "Use small arrays",
    "text": "Use small arrays\n\nJust like the Python x = [0] example.\n\n\n\nscanf.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a[1], b[1];\n    scanf(\"%d,%d\", a, b);\n    return 0;\n}\n\n\nUse as follows:\n\n$ gcc scanf.c && ./a.out\n123,456\n$\n\nClean exit!"
  },
  {
    "objectID": "encode.html#use-small-arrays-1",
    "href": "encode.html#use-small-arrays-1",
    "title": "Encode",
    "section": "Use small arrays",
    "text": "Use small arrays\n\nPrint the value commaless.\n\n\n\nscanf.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a[1], b[1];\n    scanf(\"%d,%d\", a, b);\n    return 0;\n}\n\n\nUse as follows:\n\n$ gcc scanf.c && ./a.out\n123,456\n$\n\nClean exit!"
  },
  {
    "objectID": "encode.html#printing",
    "href": "encode.html#printing",
    "title": "Encode",
    "section": "Printing",
    "text": "Printing\n\nLet’s print our values back…\n\n\n\nscanf.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a[1], b[1];\n    scanf(\"%d,%d\", a, b);\n    printf(\"%d%d\\n\", a, b);\n    return 0;\n}\n\n\nOops!\n\nscanf.c: In function ‘main’:\nscanf.c:6:14: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘int *’ [-Wformat=]\n    6 |     printf(\"%d%d\\n\", a, b);\n      |             ~^       ~\n      |              |       |\n      |              int     int *\n      |             %ls\n..."
  },
  {
    "objectID": "encode.html#printing-1",
    "href": "encode.html#printing-1",
    "title": "Encode",
    "section": "Printing",
    "text": "Printing\n\nPrint needs values, not references.\n\n\n\nscanf.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a[1], b[1];\n    scanf(\"%d,%d\", a, b);\n    printf(\"%d%d\\n\", a[0], b[0]);\n    return 0;\n}\n\n\nNothing too fancy.\n\n$ gcc scanf.c && ./a.out\n123,456\n123456\n$"
  },
  {
    "objectID": "encode.html#double-it",
    "href": "encode.html#double-it",
    "title": "Encode",
    "section": "Double it",
    "text": "Double it\n\nLet’s say we want to double our input value.\n\n\n\n\n\nscanf.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a[1], b[1];\n    scanf(\"%d,%d\", a, b);\n    a[0] *= 2;\n    b[0] *= 2;\n    printf(\"%d%d\\n\", a[0], b[0]);\n    return 0;\n}\n\n\n$ gcc scanf.c && ./a.out\n123,456\n246912\n$ ./a.out\n123,567\n2461134\n$\n\nUh oh."
  },
  {
    "objectID": "encode.html#carries",
    "href": "encode.html#carries",
    "title": "Encode",
    "section": "Carries",
    "text": "Carries\n\nOne reason to put the one’s place first is for carries.\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^\n\n \n\n+\n\n=\n\n0\n\n1\n\n0\n\n1\n\n1\n\n0\n\n1\n\n1\n\n2\n\n0\n\n0\n\n0\n\n3\n\n1\n\n1\n\n?\n\n\n\n\n\n\n\n\n\nAs we add across a value, we want to carry over a bit to a higher power.\nSame with multiply!"
  },
  {
    "objectID": "encode.html#carries-1",
    "href": "encode.html#carries-1",
    "title": "Encode",
    "section": "Carries",
    "text": "Carries\n\nOne reason to put the one’s place first is for carries.\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^\n\n \n\n+\n\nc\n\n=\n\n0\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n1\n\n0\n\n1\n\n2\n\n0\n\n0\n\n0\n\n0\n\n3\n\n1\n\n1\n\n0\n\n0"
  },
  {
    "objectID": "encode.html#carries-2",
    "href": "encode.html#carries-2",
    "title": "Encode",
    "section": "Carries",
    "text": "Carries\n\nAddition is easier least-to-most\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^\n\n \n\n+\n\nc\n\n=\n\n0\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n1\n\n0\n\n1\n\n2\n\n0\n\n0\n\n0\n\n0\n\n3\n\n1\n\n1\n\n0\n\n0\n\n4\n\n0\n\n0\n\n1\n\n1\n\n\n\n\n\n\n\n\n\nThis denotes a binary add of 0b01001 to 0b01010 which equals 0b10011\n\n&gt;&gt;&gt; bin(0b01001 + 0b01010)\n'0b10011'\n&gt;&gt;&gt; bin(0b01001 + 0b01010)[2::-1]\n'1b0'\n&gt;&gt;&gt; bin(0b01001 + 0b01010)[:2:-1]\n'1100'\n&gt;&gt;&gt; bin(0b01001 + 0b01010)[:1:-1]\n'11001'"
  },
  {
    "objectID": "encode.html#does-it-matter",
    "href": "encode.html#does-it-matter",
    "title": "Encode",
    "section": "Does it matter?",
    "text": "Does it matter?\n\nKinda.\nThis is called, Endianness, the subject a latter lab.\nIt mostly matters when we rearrange numbers around.\n\nSHA256 works with chunks of various sizes - 8, 32, 256, 512.\nIn which order do we place values from 4 8-bit fields into 1 32-bit field."
  },
  {
    "objectID": "encode.html#section-1",
    "href": "encode.html#section-1",
    "title": "Encode",
    "section": "32 -> 64",
    "text": "32 -&gt; 64\n\nIt is common to find 32 bit code that is running on 64 bit devices.\n\nSay e.g. “World of Warcraft: Classic”\n\nReleased in 2004 for 32 bit devices.\nRepopularized in 2019 then 2024\nLiteral trillion dollar company (MS)\n\n\nNeed a very good way to go between 32 and 64 bits."
  },
  {
    "objectID": "encode.html#casts-1",
    "href": "encode.html#casts-1",
    "title": "Encode",
    "section": "Casts",
    "text": "Casts\n\nThat way is casts\nIn C, we prefix a value by a type (in parens) when assigning it to a variable.\n\n1 is a value.\nlong is a type (usually the 64 bit type)\n(long)1 is the value of 1 as a 64 bit type\n\nlong x = 0;\nint y = 10;\nx = (long)y;"
  },
  {
    "objectID": "encode.html#arrays",
    "href": "encode.html#arrays",
    "title": "Encode",
    "section": "Arrays",
    "text": "Arrays\n\nWe regarded, following “macros”, C integers as akin to arrays of booleans.\nC integers can also be regarded as arrays of bytes.\nFor example, an int is commonly 4 bytes, or char values.\nWe can achieve this with a cast."
  },
  {
    "objectID": "encode.html#example",
    "href": "encode.html#example",
    "title": "Encode",
    "section": "Example",
    "text": "Example\n\n\n\nCreate a variable x\nIt can refer to an int\n\nx : list[int] # not x = [None]\n\nCan’t use yet.\n\nx[0] = 1 # this would error\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int *x;\n    char buf[4];\n    buf[0] = 0xA;\n    buf[1] = 0xB;\n    buf[2] = 0xC;\n    buf[3] = 0xD;\n    x = (int *)buf;\n    printf(\"%x\\n\", x[0]);\n    return 0;\n}"
  },
  {
    "objectID": "encode.html#example-1",
    "href": "encode.html#example-1",
    "title": "Encode",
    "section": "Example",
    "text": "Example\n\n\n\nCreate variable buf\nArray of 4 char.\nVersus a char *:\n\nThe value buf holds some reference.\n\nbuf =  = [None] * 4\n\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int *x;\n    char buf[4];\n    buf[0] = 0xA;\n    buf[1] = 0xB;\n    buf[2] = 0xC;\n    buf[3] = 0xD;\n    x = (int *)buf;\n    printf(\"%x\\n\", x[0]);\n    return 0;\n}"
  },
  {
    "objectID": "encode.html#example-2",
    "href": "encode.html#example-2",
    "title": "Encode",
    "section": "Example",
    "text": "Example\n\n\n\nEasy-to-recognize values.\n\nCan assign \\(n\\) at once but\nBut only for declares.\n(The array could be the wrong size)\n\n\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int *x;\n    char buf[4];\n    buf[0] = 0xA;\n    buf[1] = 0xB;\n    buf[2] = 0xC;\n    buf[3] = 0xD;\n    x = (int *)buf;\n    printf(\"%x\\n\", x[0]);\n    return 0;\n}\n\nchar buf[4] = { 0xA, OxB, 0xC, 0xD }; /* okay */\n/* say, char notbuf[2]; buf = notbuf; */\nbuf = {1,2,3,4}; /* banned - it isn't safe */"
  },
  {
    "objectID": "encode.html#i-lied",
    "href": "encode.html#i-lied",
    "title": "Encode",
    "section": "I lied",
    "text": "I lied\n\n\n\nTell gcc that no, really, buf is actually an array of integers.\nIt will believe you.\nIf you omit the cast, you will get a warning or error\n\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int *x;\n    char buf[4];\n    buf[0] = 0xA;\n    buf[1] = 0xB;\n    buf[2] = 0xC;\n    buf[3] = 0xD;\n    x = (int *)buf;\n    printf(\"%x\\n\", x[0]);\n    return 0;\n}\nd0c0b0a"
  },
  {
    "objectID": "encode.html#ordering",
    "href": "encode.html#ordering",
    "title": "Encode",
    "section": "Ordering",
    "text": "Ordering\n\n\n\nLet’s see the output.\nWhat order is that?\n\nSame order within bytes\n\n0x0 before 0xa\n\nReverse order within a number\n\n0x0b before 0x0a\n\n\n\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int *x;\n    char buf[4];\n    buf[0] = 0xA;\n    buf[1] = 0xB;\n    buf[2] = 0xC;\n    buf[3] = 0xD;\n    x = (int *)buf;\n    printf(\"%x\\n\", x[0]);\n    return 0;\n}\n\nI got no warnings/errors.\n\nd0c0b0a"
  },
  {
    "objectID": "encode.html#takeaway",
    "href": "encode.html#takeaway",
    "title": "Encode",
    "section": "Takeaway:",
    "text": "Takeaway:\n\nThe way integers are printed and the way they are stored in the computer aren’t necessarily related.\nThis matters a lot on SHA-256."
  },
  {
    "objectID": "encode.html#negative-values",
    "href": "encode.html#negative-values",
    "title": "Encode",
    "section": "Negative values",
    "text": "Negative values\n\nFrom time to time we like to use a negative value.\nI know, I was disappointed too.\nWe build them using subtraction."
  },
  {
    "objectID": "encode.html#int-vs-uint",
    "href": "encode.html#int-vs-uint",
    "title": "Encode",
    "section": "int vs uint",
    "text": "int vs uint\n\nIt is a simply enough matter to establish the ranges for potentially negative (signed, or default) values and necessarily positive (unsigned) values.\nWe work with char and unsigned char"
  },
  {
    "objectID": "encode.html#output",
    "href": "encode.html#output",
    "title": "Encode",
    "section": "Output",
    "text": "Output\n\n\na\n0, 0\n...\na\n120, 120\na\n-126, 130\na\n-116, 140\n...\na\n-16, 240\na\n-6, 250\na\n4, 4\n\n\nUnsigned values have roughly double the maximum of signed values.\nUnsigned values have similar maximum and minimum values by absolute values.\n\nRead more e via man abs"
  },
  {
    "objectID": "encode.html#more-tests",
    "href": "encode.html#more-tests",
    "title": "Encode",
    "section": "More tests",
    "text": "More tests\n\nCreate somewhere to store an integer.\nScan input into said integer.\nCast integer to a char and print\nCast integer to an unsigned char and print.\n\n\n\ntester.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n        int x[0];\n        while (scanf(\"%d\", x)) {\n                printf(\"%hhd, %u\\n\", (char)x[0], (unsigned char)x[0]);\n        }\n        return 0;\n}"
  },
  {
    "objectID": "encode.html#output-1",
    "href": "encode.html#output-1",
    "title": "Encode",
    "section": "Output",
    "text": "Output\n\n\n10\n10, 10\n126\n126, 126\n127\n127, 127\n128\n-128, 128\n255\n-1, 255\n256\n0, 0\n\n\nSigned values in \\(n\\) bit integers loop at \\(2^{n-1}\\)\n\nOr do they? Test it on ints!\n\nUnsigned values are maximal when signed values are -1\nmax + 1 and -1 + 1 both equal zero."
  },
  {
    "objectID": "encode.html#look-at-ints",
    "href": "encode.html#look-at-ints",
    "title": "Encode",
    "section": "Look at ints",
    "text": "Look at ints\n\n\ntester.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n        int x[0];\n        while (scanf(\"%d\", x)) {\n                printf(\"%d, %u, %032b\\n\", \n                *x, (unsigned)*x, x[0]);\n        }\n        return 0;\n}"
  },
  {
    "objectID": "encode.html#some-things-to-try",
    "href": "encode.html#some-things-to-try",
    "title": "Encode",
    "section": "Some things to try",
    "text": "Some things to try\n65536\n65536, 65536, 00000000000000010000000000000000\n-1\n-1, 4294967295, 11111111111111111111111111111111\n4294967295\n-1, 4294967295, 11111111111111111111111111111111\n4294967296\n0, 0, 00000000000000000000000000000000\n255\n255, 255, 00000000000000000000000011111111\n256\n256, 256, 00000000000000000000000100000000\n-255\n-255, 4294967041, 11111111111111111111111100000001"
  },
  {
    "objectID": "encode.html#takeaways",
    "href": "encode.html#takeaways",
    "title": "Encode",
    "section": "Takeaways",
    "text": "Takeaways\n\nThe algorithm is simply.\n\nFor unsigned values, simple binary\nFor signed values, negatives are 1-prefixed not 0-prefixed.\n\nThe only difference is in printing.\nArithmetic operations proceed smoothly without consideration of signage.\nCall this “two’s complement” - negatives by binary (0-&gt;1) complement."
  },
  {
    "objectID": "encode.html#stinger",
    "href": "encode.html#stinger",
    "title": "Encode",
    "section": "Stinger",
    "text": "Stinger\n#include &lt;stdio.h&gt;\n\nint main() {\n        int x[0], y[0];\n        while (1) {\n                scanf(\"%d %d\", x, y);\n                printf(\"%d, %u, %032b\\n\",\n                                x[0]/y[0],\n                                (unsigned)x[0]/y[0],\n                                x[0]/y[0]);\n        }\n        return 0;\n}"
  },
  {
    "objectID": "bigadd.html",
    "href": "bigadd.html",
    "title": "BigAdd",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- stdint\n- headers\n\n\n- modulo\n\n\n\n- rings\n\n\n\n\n\nThere are no required exercises of this lab.\nIt is supplementary material to the 4096_t homework.\n\n4096_t requires add, sub, mul, div\nThis lab provides sub\nThis lab introduces add"
  },
  {
    "objectID": "bigadd.html#the-.h-file",
    "href": "bigadd.html#the-.h-file",
    "title": "BigAdd",
    "section": "The .h file",
    "text": "The .h file\n\nThere are two main types of C files.\n\nThe .c files we have been working with.\n\nThese tend to contain executable code.\nThey contain a main function.\nLarger projects may have multiple .c files for which only one has a main\n\nThe .h files we have incorporated via #include\n\nWe can (and should) write these ourselves.\nThis week we will write a library for a future task.\nWith the Macros assignment, we copy pasted code.\nThe code this week is far too large."
  },
  {
    "objectID": "bigadd.html#t.h",
    "href": "bigadd.html#t.h",
    "title": "BigAdd",
    "section": "4096_t.h",
    "text": "4096_t.h\n\nCreate two new files.\n\n4096_t.c, and\n4096_t.h\n\nWe will work within both.\n\nYou may, perhaps, which to keep both open in separate vim windows, or\nImplement completely in 4096_t.c then split latter.\n\nWe will want to be able to #include this work into rsainc.c next week.\n\n\nDouble Inclusion\n\nBy convention, there is a double inclusion guard\n\nDon’t want to include one function with the same name twice.\nSo we define a variable in the preprocess, like a constant.\nWe check to see if it’s defined.\nWe write all header code within the #ifndef\n\n\n\n\n\n\n4096_t.h\n\n/* 4096_t.h */\n\n#ifndef _4096_T_H\n#define _4096_T_H\n\n/* We will put stuff here soon */\n\n#endif /* _4096_T_H */\n\n\n\n\n4096_t.c\n\n/* 4096_t.c */\n\n/*\ngcc 4096_t.c --std=c89 -Wall -Wextra -Werror -Wpedantic\n*/\n\nint main() {\n  /* Perhaps test some big operations */\n  return 0;\n}\n\n\n\n\n\nOther headers\n\nBy convention, includes are made within a .h file\n\nI will use, say, string for memcpy and stdint for uint64_t\n\n\n\n\n\n\n4096_t.h\n\n/* 4096_t.h */\n\n#ifndef _4096_T_H\n#define _4096_T_H\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#endif /* _4096_T_H */\n\n\n\n\n4096_t.c\n\n/* 4096_t.c */\n\n/*\ngcc 4096_t.c --std=c89 -Wall -Wextra -Werror -Wpedantic\n*/\n\nint main() {\n  /* Perhaps test some big operations */\n  return 0;\n}\n\n\n\n\n\nConstants\n\nI intended this library specifically for use with 4096 bit values.\nSpecify that in the header.\n\nBy convention, constants are defined in the .h file.\nConstants in the header are visible when the header is included.\nWe can keep secret (like private fields in Python) values just within the .c file, if needed.\nThat is pretty out-of-scope.\n\nAt this time, I also add the #include to the .c file.\n\nNote I use double quotes \" rather than the &lt;&gt;\nThis is convention for user-defined headers.\n\nWe could argue using uint64_t is an implementation detail not needed for broad distribution.\n\nHowever, this detail will be exposed by our function declarations latter.\nUsers of 4096_t will need to be able to use S to determine how large to make arrays.\nWe’ll come back to this!\n\n\n\n\n\n\n4096_t.h\n\n/* 4096_t.h */\n\n#ifndef _4096_T_H\n#define _4096_T_H\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define BYTES 4096 / 8 \n#define S BYTES / sizeof(uint64_t)\n\n#endif /* _4096_T_H */\n\n\n\n\n4096_t.c\n\n/* 4096_t.c */\n\n/*\ngcc 4096_t.c --std=c89 -Wall -Wextra -Werror -Wpedantic\n*/\n\n#include \"4096_t.h\"\n\nint main() {\n  /* Perhaps test some big operations */\n  return 0;\n}\n\n\n\n\n\nFunctions\n\nAll functions used within another file are declared (but not defined) within the .h file.\n\nThey are defined within the .c file.\nSeparate declaration/definition is also necessary in C for mutually recursive functions.\nIn C, unlike Python, a function may not refer to a function latter in the file.\nHowever, it may refer to a declaration, much akin to a variable, that is latter defined.\nDeclarations are like definitions but instead of a code block are semicolon terminated.\n\nWe will use bigsub which I am providing for this assignment.\n\nI make no claims my bigsub is good or anything.\n\nIt does not handle negative results.\nI don’t know why it’d need to do that…\n\n\n\n\n\n\n\n4096_t.h\n\n/* 4096_t.h */\n\n#ifndef _4096_T_H\n#define _4096_T_H\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define BYTES 4096 / 8 \n#define S BYTES / sizeof(uint64_t)\n\n/* Given a\n * minuend    uint64_t min[S]\n * subtrahend uint64_t sub[S]\n * difference uint64_t dif[S]\n * 1. Populate dif with the difference between min and sub\n * 2. Return the \"carry bit\" capturing whether an overflow occured.\n  */\nuint64_t bigsub(uint64_t *min, uint64_t *sub, uint64_t *dif); \n\n#endif /* _4096_T_H */\n\n\n\n\n4096_t.c\n\n/* 4096_t.c */\n\n/*\ngcc 4096_t.c --std=c89 -Wall -Wextra -Werror -Wpedantic\n*/\n\n#include \"4096_t.h\"\n\nuint64_t bigsub(uint64_t *min, uint64_t *sub, uint64_t *dif) {\n      size_t i;\n      uint64_t carry = 0, tmp;\n      for (i = 0; i &lt; S; i++) {\n          tmp = min[i] - sub[i] - carry;\n          carry = min[i] &lt; sub[i];\n          dif[i] = tmp;\n    }\n    return carry;\n}\n\nint main() {\n  /* Perhaps test some big operations */\n  return 0;\n}\n\n\n\n\n\nTesting\n\nIt is nontrival to test this code.\n\nHow would we input a 4096_t?\n\nWrite some supporting testing and printing operations.\nI provide a (very) minimal example.\n\n\n\n4096_t.c\n\nint main() {\n    uint64_t min[S], sub[S], dif[S];\n    size_t i;\n    memset(min, 0, BYTES);\n    memset(sub, 0, BYTES);\n    for (i = 0; i &lt; S; i++) {\n        min[i] = i * 3;\n        sub[i] = i * 2;\n    }\n    bigsub(min, sub, dif);\n    for (i = 0; i &lt; S; i++) {\n        printf(\"dif[%02lx] = %02lx\\n\", i, dif[i]);\n    }\n    return 0;\n}\n\n\nWe note this testing can only work if S, BYTES, and memcpy are successfully included!\n\n\n\n4096_t.h\n\nThe 4096_t homework autograder will require code compliant with the following header file:\n\n\n\n4096_t.h\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define S (size_t)(4096 / 64)\n#define BYTES S * sizeof(uint64_t)\n\nuint64_t bigadd(uint64_t *in0, uint64_t *in1, uint64_t *sum); \nuint64_t bigsub(uint64_t *min, uint64_t *sub, uint64_t *dif); \nuint64_t bigmul(uint64_t *in0, uint64_t *in1, uint64_t *out); \nuint64_t bigquo(uint64_t *num, uint64_t *den, uint64_t *quo);\nuint64_t bigrem(uint64_t *num, uint64_t *den, uint64_t *rem);\n\n\nYou may use a different header file while you are working on your code, but:\n\nFor the homework, will need to implement these functions.\nFor SHA-256, will need to implement these functions."
  },
  {
    "objectID": "bigadd.html#section",
    "href": "bigadd.html#section",
    "title": "BigAdd",
    "section": "2 ⇒ 3",
    "text": "2 ⇒ 3\n\nPython 2 had maximum integer sizes, not unlike C\nPython 3 lacks such limitations.\n\nRead more\n\nWhile unsuitable for cryptographic applications for limitations including performance, it is suitable for testing.\nIt is a simple enough matter to translate the following into Python:\n\n\n\n4096_t.c\n\nint main() {\n    uint64_t min[S], sub[S], dif[S];\n    size_t i;\n    memset(min, 0, BYTES);\n    memset(sub, 0, BYTES);\n    for (i = 0; i &lt; S; i++) {\n        min[i] = i * 3;\n        sub[i] = i * 2;\n    }\n    bigsub(min, sub, dif);\n    for (i = 0; i &lt; S; i++) {\n        printf(\"dif[%02lx] = %02lx\\n\", i, dif[i]);\n    }\n    return 0;\n}\n\n\nSimply:\n\nCreate two accumulating variables.\nAdd in values multiplied by powers of two.\nPerform the built-in Python subtract\nPrint the output as a hex value, perhaps split onto multiple lines.\n\n\nS = 64\n\nmin, sub = 0, 0\n# Factor this, obviously.\n[min := min + 3 * n * (2 ** (n * 64)) for n in range(S)]\n[sub := sub + 2 * n * (2 ** (n * 64)) for n in range(S)]\nprint(hex(min-sub))"
  },
  {
    "objectID": "bigadd.html#recommendation",
    "href": "bigadd.html#recommendation",
    "title": "BigAdd",
    "section": "Recommendation",
    "text": "Recommendation\n\nIt is recommended but not required to develop an interface between Python and your 4096_t.\n\nI recommend passing numerical values as hexadecimal strings.\nGenerate values in Python, perform operations, and test results vs. 4096_t\n\nI found it difficult to debug bigadd and bigsub without constructing an interface.\nHere is an example of a function I used in testing:\n\n/* print the big value as a string */\nvoid seebig(uint64_t *a) {\n    size_t i;\n    for (i = S-1; i &lt; S ; i--) {\n        fprintf(stderr, \"%016lx \", a[i]); \n        if ((i % 8 == 0 && i)) {\n            fprintf(stderr, \"\\n\");\n        }       \n    }\n    fprintf(stderr, \"\\n\\n\");\n    return;\n}"
  },
  {
    "objectID": "bigadd.html#autograder",
    "href": "bigadd.html#autograder",
    "title": "BigAdd",
    "section": "Autograder",
    "text": "Autograder\n\nThe interface implemented by the autograder may be informative here.\n\nIt uses a Python script.\nIt uses a dedicated .c file with a main function.\nIt uses gcc 4096_t.c tester.c to compile the 4096_t code for use in the tester executable.\nIt uses Python subprocess to examine the results.\n\nI was unable to achieve a bugfree multiply absent this interface, but was able to progress rapidly once I developed it.\n\ntester.py\ntester.c"
  },
  {
    "objectID": "bigadd.html#big-addition",
    "href": "bigadd.html#big-addition",
    "title": "BigAdd",
    "section": "Big Addition",
    "text": "Big Addition\n\nUsing what you know so far, write bigadd.\n\nDeclare bigadd in the header file.\nDefine bigadd in the .c file.\nTest bigadd to ensure, mostly, you are handling carries correctly.\n\n\n\n\n4096_t.h\n\n/* 4096_t.h */\n\n#ifndef _4096_T_H\n#define _4096_T_H\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define BYTES 4096 / 8 \n#define S BYTES / sizeof(uint64_t)\n\n/* Given a\n * minuend    uint64_t min[S]\n * subtrahend uint64_t sub[S]\n * difference uint64_t dif[S]\n * 1. Populate dif with the difference between min and sub\n * 2. Return the \"carry bit\" capturing whether an overflow occured.\n  */\nuint64_t bigsub(uint64_t *min, uint64_t *sub, uint64_t *dif); \n\n/* Given a\n * addend_0     uint64_t in0[S]\n * addend_1     uint64_t in1[S]\n * sum          uint64_t sum[S]\n * 1. Populate sum with the sum over in0 and in1\n * 2. Return the \"carry bit\" capturing whether an overflow occured.\n  */\nuint64_t bigadd(uint64_t *in0, uint64_t *in1, uint64_t *sum); \n\n#endif /* _4096_T_H */\n\n\nIf you want different names for the inputs, use “augend” and “addend”.\nAddition is generally regarded associative (order doesn’t matter), but\nThere are times in computing that operand order matters.\n\nIn x86 assembly, add accepts two operands, storing the result in the first (augend) operand’s location.\n\nIt would be suitable to write all bigops in this format, if that is your perference!\n\nJust different."
  },
  {
    "objectID": "bigadd.html#testing-1",
    "href": "bigadd.html#testing-1",
    "title": "BigAdd",
    "section": "Testing",
    "text": "Testing\n\nYou should minimally be able to do the following, over arbitrary data.\n\nCheck the carries just in case, of course.\nOr use an e.g. biggte to determine which value is greater than or equal before subtracting.\n\n\n\n\n4096_t.c\n\nint main() {\n    uint64_t a[S], b[S], c[S], d[S];\n    size_t i;\n    memset(a, 0, BYTES);\n    memset(b, 0, BYTES);\n    for (i = 0; i &lt; S; i++) {\n        min[i] = i * 3;\n        sub[i] = i * 2;\n    }\n    bigsub(a, b, c);\n    bigadd(b, c, d);\n    /* You may have written `bigeqs` or */\n    for (i = 0; i &lt; S; i++) {\n        if (a[i] != d[i]) {\n            return 1;\n        }\n    }\n    return 0;\n}"
  },
  {
    "objectID": "alpine.html",
    "href": "alpine.html",
    "title": "Alpine",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- podman\n- Alpine\n\n\n- vim\n- Images\n\n\n- gcc\n- Copies\n\n\n- git\n\n\n\n\n\n\n\n\nYou should have Podman installed.\nIf you are on Windows, you should have WSL installed.\n\nI use it with Ubuntu but do what you like.\n\n\n\nTODO (windows only)\nwsl --install -d ubuntu"
  },
  {
    "objectID": "alpine.html#run",
    "href": "alpine.html#run",
    "title": "Alpine",
    "section": "Run",
    "text": "Run\n\nFirst thing we’ll do in Podman is podman run\n\n\nTODO\npodman run\n\nIt should look something like this:\nC:\\Users\\cd-desk&gt;podman run\nError: requires at least 1 arg(s), only received 0"
  },
  {
    "objectID": "alpine.html#images",
    "href": "alpine.html#images",
    "title": "Alpine",
    "section": "Images",
    "text": "Images\n\nThe thing we run is called an image\nWe’ll use a sample image named Python\n\nYou’ll never guess what it does (Python)\n\nStudents may wish to specify “python:alpine”\n\nThat is the python command in the alpine operating system.\nThis is a 20x smaller image, so 20x faster download\nIt is on a less common Linux OS (alpine) that may be harder to use.\n\n\n\nTODO\npodman run python:alpine\n\nIt should look something like this:\nC:\\Users\\cd-desk&gt;podman run python:alpine\nResolved \"python\" as an alias (/etc/containers/registries.conf.d/000-shortnames.conf)\nTrying to pull docker.io/library/python:latest...\nGetting image source signatures\nCopying blob sha256:abab87fa45d0b95db90eb47059d7e87f5a69281fe5d76fcdb7889ec5c310f44c\n...\nWriting manifest to image destination\n\nC:\\Users\\cd-desk&gt;"
  },
  {
    "objectID": "alpine.html#just-do--it",
    "href": "alpine.html#just-do--it",
    "title": "Alpine",
    "section": "Just do -it",
    "text": "Just do -it\n\nWe downloaded an image and ran it as a container but…\n\nWe didn’t ask the container to do anything\nSo it exits instantly\nOf note, we only have to download once (image) to run many times (container)\n\nTo work within the container run -it for “interactive terminal”\n\n\nTODO\npodman run -it python:alpine\n\nIt should look something like this:\nC:\\Users\\cd-desk&gt;podman run -it python\nPython 3.13.1 (main, Dec  4 2024, 20:40:27) [GCC 12.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;"
  },
  {
    "objectID": "alpine.html#containerfiles",
    "href": "alpine.html#containerfiles",
    "title": "Alpine",
    "section": "Containerfiles",
    "text": "Containerfiles\nThis section concerns something called variously “Containerfiles” or “Dockerfiles” - commonly referred to as “Dockerfiles”, though I believe this is changing over time. If you get stuck, it may be easier to look up “Dockerfiles” documentation - I’ve been looking at both.\n\nUsually when I’m using a container, I need something for which I can’t simply find a default image.\nIn my case, I specifically want a container with something called a “Containerfile”.\nHere is a minimal example:\n\n\n\nContainerfile\n\nFROM alpine\n\n\nI use Alpine as my base image\nIt’s a lightweight Linux operating system\nIt (tends to) have everything I need.\n\n\nTODO\necho \"FROM alpine\" &gt; Containerfile\n\n\nI would save “Containerfile” wherever I save classwork.\n\nFor me, a class-specific directory inside my home directory in the Linux filesystem\n\nincluding on Windows - I work within the WSL filesystem.\n\n\n\nUltimately for me, it looks something like this:\nuser@DESKTOP-THMS2PJ:~$ mkdir crypto\nuser@DESKTOP-THMS2PJ:~$ cd crypto/\nuser@DESKTOP-THMS2PJ:~/crypto$ echo \"FROM alpine\" &gt; Containerfile\nuser@DESKTOP-THMS2PJ:~/crypto$ pwd\n/home/user/crypto\nuser@DESKTOP-THMS2PJ:~/crypto$ ls\nContainerfile"
  },
  {
    "objectID": "alpine.html#build",
    "href": "alpine.html#build",
    "title": "Alpine",
    "section": "Build",
    "text": "Build\n\nWith a “Containerfile” written, we can use podman build.\n\n\nTODO\npodman build\n\nIt should look something like this:\nuser@DESKTOP-THMS2PJ:~/crypto$ podman build\nError: no context directory and no Containerfile specified"
  },
  {
    "objectID": "alpine.html#pale-blue-.",
    "href": "alpine.html#pale-blue-.",
    "title": "Alpine",
    "section": "Pale blue .",
    "text": "Pale blue .\n\nAs with podman run, with podman build we must specify what image to use\n\nBut now we can use an image described by a “Containerfile”!\n\nTo specify, we simply give the current directory ..\n\n\nTODO\npodman build .\n\nIt should look something like this:\nuser@DESKTOP-THMS2PJ:~/crypto$ podman build .\nSTEP 1/1: FROM alpine\nResolved \"alpine\" as an alias (/etc/containers/registries.conf.d/shortnames.conf)\nTrying to pull docker.io/library/alpine:latest...\nGetting image source signatures\nCopying blob 38a8310d387e done\nCopying config 4048db5d36 done\nWriting manifest to image destination\nStoring signatures\nCOMMIT\n--&gt; 4048db5d367\n4048db5d36726e313ab8f7ffccf2362a34cba69e4cdd49119713483a68641fce"
  },
  {
    "objectID": "alpine.html#we-love-the--t",
    "href": "alpine.html#we-love-the--t",
    "title": "Alpine",
    "section": "We love the -t",
    "text": "We love the -t\n\nThis creates a new image but we don’t know what to call it\n\nThe default name is that numerical value in the 2nd to last time above\n\nUse the -t option to podman build, to name the image.\n\nAs far as I can tell, it stands for “tag”\n\nWe can then use this image by name with other commands.\n\n\nTODO\npodman build -t crypto .\n\nIt should look something like this:\nuser@DESKTOP-THMS2PJ:~/crypto$ podman build -t crypto .\nSTEP 1/1: FROM alpine\nCOMMIT crypto\n--&gt; 4048db5d367\nSuccessfully tagged localhost/crypto:latest\nSuccessfully tagged docker.io/library/alpine:latest\n4048db5d36726e313ab8f7ffccf2362a34cba69e4cdd49119713483a68641fce"
  },
  {
    "objectID": "alpine.html#run-1",
    "href": "alpine.html#run-1",
    "title": "Alpine",
    "section": "Run",
    "text": "Run\n\nThe “crypto” image is now being maintained on your device by Podman.\nWe can use run as we did with any other image.\n\n\nTODO\npodman run -it crypto\n\nIt should look something like this:\nuser@DESKTOP-THMS2PJ:~/crypto$ podman run -it crypto\n/ #"
  },
  {
    "objectID": "alpine.html#vim",
    "href": "alpine.html#vim",
    "title": "Alpine",
    "section": "vim",
    "text": "vim\n\nFirst, we can see if we have, say vim. We do not:\n\n\nTODO\nvim\n\nIt should look something like this:\n/ # vim\n/bin/sh: vim: not found"
  },
  {
    "objectID": "alpine.html#apk",
    "href": "alpine.html#apk",
    "title": "Alpine",
    "section": "apk",
    "text": "apk\n\nTo add software to Alpine linux, we use apk - the Alpine Package Keeper.\n\n\nTODO\napk\n\nIt should look something like this:\n/ # apk\napk-tools 2.14.6, compiled for x86_64.\n\nusage: apk [&lt;OPTIONS&gt;...] COMMAND [&lt;ARGUMENTS&gt;...]\n\nPackage installation and removal:\n  add        Add or modify constraints in WORLD and commit changes"
  },
  {
    "objectID": "alpine.html#add",
    "href": "alpine.html#add",
    "title": "Alpine",
    "section": "add",
    "text": "add\n\nGenerally speaking, we can use add with the name of a command, and apk will find and install that command for us:\n\nvim\ngcc\npython\n\nprobably have to say python2 or python3\n\npodman\n\ncan probably run within a container, I didn’t check.\n\n\n\n\nTODO\napk add vim\n\nIt should look something like this:\n/ # apk add vim\n(1/5) Installing vim-common (9.1.0707-r0)\n(2/5) Installing xxd (9.1.0707-r0)\n(3/5) Installing ncurses-terminfo-base (6.5_p20241006-r3)\n(4/5) Installing libncursesw (6.5_p20241006-r3)\n(5/5) Installing vim (9.1.0707-r0)\nExecuting busybox-1.37.0-r8.trigger\nOK: 35 MiB in 20 packages\n\nTo install vim, apk had to install a few other things first…\n\nIncluding the legendary C library ncurses!\nUsed to make legendary game “Rogue”\nFun!\n\nBut ultimately, apk got vim working"
  },
  {
    "objectID": "alpine.html#vim-1",
    "href": "alpine.html#vim-1",
    "title": "Alpine",
    "section": "vim",
    "text": "vim\n\nTest it:\n\n\nTODO\nvim\n\nIt should look something like this:\n~               VIM - Vi IMproved\n~                  version 9.1\n~            by Bram Moolenaar et al.\n~   Vim is open source and freely distributable\n~\n~          Become a registered Vim user!\n~  type  :help register&lt;Enter&gt;   for information\n~\n~  type  :q&lt;Enter&gt;              to exit\n~  type  :help&lt;Enter&gt;  or  &lt;F1&gt; for on-line help\n~  type  :help version9&lt;Enter&gt;  for version info"
  },
  {
    "objectID": "alpine.html#quick-q",
    "href": "alpine.html#quick-q",
    "title": "Alpine",
    "section": "Quick :q",
    "text": "Quick :q\n\nThat is vim running in podman in a “crypto” folder in my home folder.\nLet’s get back to home, following back up:\n\n~ (Linux home)\n\n~/crypto (folder name)\n\npodman run -it crypto (crypto image run by podman executable)\n\nvim (vim executable run by crypto image)\n\n\n\n\nWe first leave vim\n\n\nTODO\n:q\n\nIt should look something like this, with whatever previous commands you used before vim present:\n/ # vim\n/bin/sh: vim: not found\n/ # apk add vim\n(1/5) Installing vim-common (9.1.0707-r0)\n(2/5) Installing xxd (9.1.0707-r0)\n(3/5) Installing ncurses-terminfo-base (6.5_p20241006-r3)\n(4/5) Installing libncursesw (6.5_p20241006-r3)\n(5/5) Installing vim (9.1.0707-r0)\nExecuting busybox-1.37.0-r8.trigger\nOK: 35 MiB in 20 packages\n/ # vim\n/ #"
  },
  {
    "objectID": "alpine.html#exit",
    "href": "alpine.html#exit",
    "title": "Alpine",
    "section": "Exit",
    "text": "Exit\n\nThat is vim running in podman in a “crypto” folder in my home folder.\nLet’s get back to home, following back up:\n\n~ (Linux home)\n\n~/crypto (folder name)\n\npodman run -it crypto (crypto image run by podman executable)\n\n\n\nWe then exit the container\n\n\nTODO\nexit\n\nIt should look something like this, with whatever previous commands you used before vim present:\n/ # vim\n/ # exit\nuser@DESKTOP-THMS2PJ:~/crypto$"
  },
  {
    "objectID": "alpine.html#exit-1",
    "href": "alpine.html#exit-1",
    "title": "Alpine",
    "section": "Exit",
    "text": "Exit\n\nWe entered a container via run and installed vim.\nIn theory this means we can\n\nrun, again, then\nuse vim without installing with apk\n\nTest it\n\n\nTODO\npodman run -it crypto\nvim\n\nIt should look like this::\nuser@DESKTOP-THMS2PJ:~/crypto$ podman run -it crypto\n/ # vim\n/bin/sh: vim: not found\n\nWe installed vim to a container.\nWe ran an image\nAn image is an instance of the container\n\nNothing done in a container persists post-exit\nIf we want to use vim immediately, we need to add it to the image\n\nWe’ll exit the container then solve this problem.\n\n\nTODO\nexit"
  },
  {
    "objectID": "alpine.html#note",
    "href": "alpine.html#note",
    "title": "Alpine",
    "section": "Note",
    "text": "Note\n\nThis section will be much less explicit and apply what you learned.\n\nIf you get stuck, check prior sections.\n\nIf you get stuck, move onto the next section “Git it” to save you work and finish up latter.\n\nIt contains the answer key"
  },
  {
    "objectID": "alpine.html#goal",
    "href": "alpine.html#goal",
    "title": "Alpine",
    "section": "Goal",
    "text": "Goal\n\nWe will:\n\nSet up the “crypto” image for C development\n\nWrite C code\nCompile C code\nRun C code\nCopy the C code back the host system"
  },
  {
    "objectID": "4096_t.html",
    "href": "4096_t.html",
    "title": "4096_t",
    "section": "",
    "text": "Review Show\n\n\nGoal: Implement 4096 bit integers\n\nMy responsibility\n\nI will provide 1 week of instruction on rings, number theory, and programming languages.\nI will provide an autograder Containerfile\n\nYour responsibility\n\nYou will implement a 4096 bit unsigned integer in C89 as:\n\n“4096_t.c” implementation file, and\n“4096_t.h” header file.\n\nYou will store your “4096_t” files in the “4096_t” folder on your “crypto” GitHub repository.\n\n\n\n\nTopic Areas\n\n\n\nReview:\nNewish:\n\n\n\n\n- Rings\n- \\(\\varnothing\\)\n\n\n\n\n\nResources\n\nThe BigAdd lab\n\nThe “Header” entry formed my starter code.\n\nMy Finite Slides\n\nContextual background\n\nMy BigNum Slides\n\nI used this, and its references. Try scroll mode (press ‘r’)\nI think my slides are suitable for multiplication.\nDivision is something of a challenge problem.\n\nI would begin with the following:\nWikipedia Division Algorithms\n\nI used this and Stack Overflow to implement division.\nI used a variety of bitshifts.\n\n\n\n\n\n\n\n\nBigMul Show\n\n\nI find the following bulletin summary the most helpful to making a bigmul implementation:\n\nI Made a pointer to a uint32_t\n`uint32_t *alias;\nSet it equal to the location of some array of uint64_t\n`uint32_t *alias = &array;\nCopied elements of the “alias” into 64 bit values.\nuint64_t tmp = alias[5];\nMultiplied, tracking significance.\n\nVersus in class, I will note I made uint32_t aliases for all operands.\nAdditional, I made a uint64_t twice as large as the input arrays, to hold intermediate results.\n\nuint64_t bigmul(uint64_t *in0, uint64_t *in1, uint64_t *out) {\n    size_t i, j;\n    uint64_t wrk[S*2 + 1];\n    uint32_t *al0 = (uint32_t *)in0, *al1 = (uint32_t *)in1 , *alw = (uint32_t *)wrk, *alo = (uint32_t *)out;\n\n\n\nBigDiv Show\n\nWhile I hope all students complete BigDiv, it is a de facto challenge problem - I found no “easy” solution, and understand it is a comparatively complex system.\n\nI implemented division as a recursive long division with considerable error handling.\nI began by aligning the most significant non-zero bit, which was non-trivial but simple enough.\nYou should write the following functions:\n\nuint64_t bigdiv(uint64_t *num, uint64_t *den, uint64_t *quo, uint64_t *rem) {\n    /* Your code here */\n    return 0;\n}\n\nuint64_t bigquo(uint64_t *num, uint64_t *den, uint64_t *quo) {\n    uint64_t rem[S];\n    bigdiv(num,den,quo,rem);\n    return 0;\n}\n\nuint64_t bigrem(uint64_t *num, uint64_t *den, uint64_t *rem) {\n    uint64_t quo[S];\n    bigdiv(num,den,quo,rem);\n    return 0;\n}\n\nI additionally wrote the following helper functions.\nThese are not all required, or even recommended, simply what I used.\nThey are not debugged - some errors are likely handled within my bigdiv\n\nI expect many off-by-one errors from the comments, which I added just for this document.\n\n\n/* Detemine the log of a 4096bit in base 2^64 */\nuint64_t biglog(uint64_t *in) {\n    uint64_t log = S;\n    while (log && !in[--log]) { }\n    return log;\n}\n\n/* Detemine the log of a 64bit in base 2 */\nuint64_t lillog(uint64_t in) {\n    uint64_t log = 0;\n    while ((in &gt;&gt; log++) && log &lt; 64) {}\n    return log;\n}\n\n/* Find the address of the most significant bit of a 4096bit integer */\nuint64_t getmsb(uint64_t *n) {\n    uint64_t b, l;\n    b = biglog(n);\n    l = lillog(n[b]);\n    return b * 64 + l;\n}\n\n/* Return 64 bits from a 4096 bit integer, begging at bit `ind` */\nuint64_t get_64(uint64_t *n, uint64_t ind) {\n    uint64_t b = ind / 64, l = ind % 64;\n    return (n[b] &lt;&lt; (64 - l)) + (b ? (n[b - 1] &gt;&gt; l) : 0);\n}\n\n\n\nTester Show\n\n\nI am providing the following Containerfile, which will serve as a minimal autograder\n\nI pivoted back to Alpine because Ubuntu was slow.\n\n\n\n\nContainerfile\n\nFROM alpine \n\nRUN apk add build-base gcc curl python3\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/4096_t/4096_t.h -o 4096_t.h\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/4096_t/tester.c -o tester.c\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/4096_t/tester.py -o tester.py\n\nCOPY 4096_t.c .\n\n\nAll three of the these files were previous introduced in the BigAdd lab.\n\n\nUsage\n\nI built my container via:\n\npodman build -t tester .\n\nI tested my code via:\n\npodman run tester python3 tester.py\n\nIf the above script returns the following you are done:\n\nUpload your code to your GitHub on which I am a collaborator.\n\nI will review the most recent version prior to the due date.\n\nADD passes.\nMUL passes.\nQUO passes.\nREM passes.\n\n\nTesting\n\nWhen the container is built, it copies in 4096_t.c\nWithin the container, tester.py:\n\nCompiles tester.c as C89 with appropriate gcc flags.\n\ntester.c is dependent on both your 4096_t.c and my 4096_t.h\n\nCreates two values of size less than 2048 bits.\nPerforms all relevant operations over these values, check the results."
  },
  {
    "objectID": "base64.html",
    "href": "base64.html",
    "title": "KeyGen",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- RSA\n- base64\n\n\n- FileIO\n- hexdump\n\n\n\n-OpenSSL\n\n\n\n\nIn the lab you should’ve finished key generation.\nFor this assignment we will:\n\nWrite keys to files\nEncrpyt and decrypt based those keys.\n\nWe will motivate with command line affairs.\n\nI will use a wide range of command line utilities without documenting their installation.\nThis is left as an exercise to the student."
  },
  {
    "objectID": "base64.html#openssl",
    "href": "base64.html#openssl",
    "title": "KeyGen",
    "section": "OpenSSL",
    "text": "OpenSSL\n\nssh-keygen may or may not be implemented on top of a larger and more culturally significant “OpenSSL” library.\n\nIt always was and now it sometimes is.\n\nOpenSSL has a cool backstory, Read more\nWhile used in practice in security relevant applications (at least to the best of my knowledge) it could perhaps better be understood as an educational or informational library…\n\n…and is therefore well-suited to out purposes.\n\n\n\ngenrsa\n\nThe OpenSSL command to generate an private key is as follows:\n\nopenssl is the command-line utility\ngenrsa is the directive to generate a private rsa key.\n\nopenssl genrsa\nThis is a big difficult to work with so we also:\n\nUse -out specifies the destination\n\nI specify I am not making security considerations by naming the key “unsafe”\nI use one of several industry standard formats, .pem\n\nFor “privacy enhanced email”\nIt is a purely text-based format.\n\nI make a 512 bit key, the smallest possible in OpenSSL, to make understanding it easier.\n\nopenssl genrsa\n\nI found unsafe.pem in the hidden .ssh folder in my home (~) directory.\n\nIt will not show up when naively listing files and folders via ls\nIt will show up when listing “all” files and folders via ls -a\n\n\nopenssl genrsa -out unsafe.pem 512\n\nInspect the file with cat unsafe.pem or our most beloved text editor.\n\n\n\nunsafe.pem\n\n-----BEGIN PRIVATE KEY-----\nMIIBUwIBADANBgkqhkiG9w0BAQEFAASCAT0wggE5AgEAAkEAsWQ0ya/HGdpuzqJU\nUEzr3OFj8grPajdPlCg7NHmsdNHLEiDui6rEgEb94Y43mAjUDn9NBfVHY6eLI5Bx\ngbopwwIDAQABAkAt9dyHdPeNBz82YnCd7ZAexnbyu0JKLtJ7fID6c5vvGA2qjjXL\nZnuUqLw4rVckPod0f5GsCDxs7YVfJnikL39hAiEA10gzhGV1Wkbs2J8TL84rOkgB\nVDlWeAcjRzlqHW54sTUCIQDS8V6aq+dF/i/bi06WY4+hFkq9OQWvgIzqKzj3WC8G\nFwIgItv6G5IiMoARkfIQNUl5DnLiZDT0n3Lob3wIhsOAn5ECIEAUrR2lnTNpHZa/\nQhdzlV1lTT0ghnajQaudh8e0FUzvAiAFk8f2Mjmkkt7noGGXGdIV7kKhYU6gA6yw\n0bjjw1yM2w==\n-----END PRIVATE KEY-----\n\n\nGenerate a new key and see how it differs, or doesn’t. Try other sizes.\n\n\n\nA Key in 3 Parts\n\nWe recall that the private key minimally contains:\n\nn, a modular base\ne, an encryptor, and\nd, a descryptor.\n\nWe note that:\n\nThat file is much larger than 512 bytes.\n522 characters - more than 8x in size.\nWe use wc (word count)\n\n\n\nwc unsafe.pem\n\n10  14 522 unsafe.pem\n\n\nSo what is in there?\n\n\n\n\n-text\n\nOpenSSL provides a utility to see a formated readout of the contents of a .pem file.\n\nopenssl rsa -in unsafe.pem -text\n\nMine appeared as follows.\n\nWe note you will have the same fields…\nin similar but not exactly the same level of precision (number of digits)\nbut different values.\n\nIf you any of your fields are e.g., of twice as many digits, check the size of the key you generated with genrsa\n\n\n\nopenssl rsa -in unsafe.pem -text\n\nPrivate-Key: (512 bit, 2 primes)\nmodulus:\n    00:98:26:e6:f8:71:3a:bc:e9:ff:2a:47:90:85:84:\n    ba:8e:22:3b:8e:e9:70:0e:64:af:6e:44:06:65:c2:\n    de:ff:34:ce:87:f1:a1:94:7b:f9:92:7d:9f:ea:aa:\n    b7:93:03:85:4a:57:a1:c8:56:ac:0d:ca:4c:da:59:\n    1f:ef:ba:a3:d7\npublicExponent: 65537 (0x10001)\nprivateExponent:\n    3a:20:5a:8a:bd:4f:30:4e:c0:c1:99:37:78:1a:bd:\n    de:80:eb:79:ec:6a:77:c5:35:54:0d:be:d7:ef:7b:\n    9b:c9:2c:f0:3f:95:4f:3f:cc:b2:61:bb:50:da:5f:\n    b2:49:07:ee:70:95:4a:fc:ce:6e:31:a1:35:d2:c1:\n    02:8e:9b:01\nprime1:\n    00:c8:be:97:b0:ff:d0:20:b2:82:22:50:81:84:f5:\n    0d:36:be:2e:ef:89:db:f5:cf:da:73:95:05:56:5e:\n    f5:d2:57\nprime2:\n    00:c2:08:3f:d7:17:84:8d:b5:c7:ac:91:ba:84:a4:\n    f8:0d:95:87:a8:47:79:e8:fa:4c:7d:fa:83:26:91:\n    55:ca:81\nexponent1:\n    00:85:fc:20:06:f5:57:16:db:ce:5b:d4:db:fd:c0:\n    09:87:c6:3c:51:88:f4:15:07:1c:49:14:e7:b1:14:\n    44:82:95\nexponent2:\n    07:79:01:dc:6a:cf:74:15:b8:26:f1:45:d9:ad:f0:\n    cf:b5:1e:90:60:90:55:64:ae:65:7b:ac:69:63:d7:\n    86:01\ncoefficient:\n    00:a7:e5:ed:d4:dd:16:e2:7e:90:de:ea:8e:7c:25:\n    74:bb:88:eb:ea:0a:9d:07:75:25:dd:7e:3f:7a:0f:\n    b4:6e:25\nwriting RSA key\n-----BEGIN PRIVATE KEY-----\nMIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAmCbm+HE6vOn/KkeQ\nhYS6jiI7julwDmSvbkQGZcLe/zTOh/GhlHv5kn2f6qq3kwOFSlehyFasDcpM2lkf\n77qj1wIDAQABAkA6IFqKvU8wTsDBmTd4Gr3egOt57Gp3xTVUDb7X73ubySzwP5VP\nP8yyYbtQ2l+ySQfucJVK/M5uMaE10sECjpsBAiEAyL6XsP/QILKCIlCBhPUNNr4u\n74nb9c/ac5UFVl710lcCIQDCCD/XF4SNtceskbqEpPgNlYeoR3no+kx9+oMmkVXK\ngQIhAIX8IAb1VxbbzlvU2/3ACYfGPFGI9BUHHEkU57EURIKVAiAHeQHcas90Fbgm\n8UXZrfDPtR6QYJBVZK5le6xpY9eGAQIhAKfl7dTdFuJ+kN7qjnwldLuI6+oKnQd1\nJd1+P3oPtG4l\n-----END PRIVATE KEY-----\n\n\nWhile I can’t find a reference in OpenSSL documentation, to the best of my knowledge, this format is described by RFC 3447\n\n\n\nrfc3447\n\n   An RSA private key should be represented with the ASN.1 type\n   RSAPrivateKey:\n\n      RSAPrivateKey ::= SEQUENCE {\n          version           Version,\n          modulus           INTEGER,  -- n\n          publicExponent    INTEGER,  -- e\n          privateExponent   INTEGER,  -- d\n          prime1            INTEGER,  -- p\n          prime2            INTEGER,  -- q\n          exponent1         INTEGER,  -- d mod (p-1)\n          exponent2         INTEGER,  -- d mod (q-1)\n          coefficient       INTEGER,  -- (inverse of q) mod p\n          otherPrimeInfos   OtherPrimeInfos OPTIONAL\n      }\n\n   The fields of type RSAPrivateKey have the following meanings:\n\n    * version is the version number, for compatibility with future\n      revisions of this document.  It shall be 0 for this version of the\n      document, unless multi-prime is used, in which case it shall be 1.\n\n            Version ::= INTEGER { two-prime(0), multi(1) }\n               (CONSTRAINED BY\n               {-- version must be multi if otherPrimeInfos present --})\n\n    * modulus is the RSA modulus n.\n\n    * publicExponent is the RSA public exponent e.\n\n    * privateExponent is the RSA private exponent d.\n\n    * prime1 is the prime factor p of n.\n\n    * prime2 is the prime factor q of n.\n\n    * exponent1 is d mod (p - 1).\n\n    * exponent2 is d mod (q - 1).\n\n    * coefficient is the CRT coefficient q^(-1) mod p.\n\n\nBased on the KeyGen lab, it should be uncomplicated to calculate these values for 64 bit keys.\nIt is probably complicated to store them in the encoding used within a .pem file."
  },
  {
    "objectID": "base64.html#the-base64-utility",
    "href": "base64.html#the-base64-utility",
    "title": "KeyGen",
    "section": "The base64 utility",
    "text": "The base64 utility\n\nbase64 is also the name of a command line utility.\n\nman base64\n\nThe most useful flag for our purposes here is the -d flag, for decode.\nWe note that a .pem file is not base64 encoded - rather it is a text file that contains a base64 numeral.\nSo a naive application of base64 draws an error.\n\n\n\nbase64 -d unsafe.pem\n\nbase64: invalid input\n\n\nI used head and tail to remove the leading and tailing lines.\n\nOr use sed\n\nIt is worth taking a moment to ensure you do some line-based text manipulation at command line with some technique.\nI used a pipe | to use the output of one command, before the pipe, as the input to a latter command, after the pipe.\n\ncat unsafe.pem | head -9 | tail -8 | base64 -d\n\ncat shows file contents.\nhead -9 takes the first 9 lines\ntail -8 takes the final 8 lines\nbase64 -d converts the base64 encoding to…\nBits! Which the command line attempts to interpret as characters, many of them unprintable.\n\n\n\ncat unsafe.pem | head -9 | tail -8 | base64 -d\n\n�=0�9A�d4ɯ��n΢TPL���c�\n��5�f{���8�W$&gt;�t�&lt;l�_&x�/a!�H3�euZF�؟/�+:HT9Vx#G9jnx�5!��^���E�/ۋN�c��J�9����+8�X/ \"��\"2���5Iyr�d4�r�o�À�� @���3i��Bs�]eM= �v�A���ǴL� ���29����a���B�aN���Ѹ��\\��"
  },
  {
    "objectID": "base64.html#the-hexdump-utility",
    "href": "base64.html#the-hexdump-utility",
    "title": "KeyGen",
    "section": "The “hexdump” utility",
    "text": "The “hexdump” utility\n\nFortunately, we can direct the commandline to print out information in hexadecimal format via hexdump\n\nWe note the leftmost column gives number of bits from the beginning of the “file” being read\nHere the file is whatever comes out of the “pipe” |\nThe first line is 8 chunks of 4 hexdigits each representing 4 bits\n\n8 * 4 * 4 = 128 bits = 10 bytes\nHence the second line beginning with 0000010\n\n\n\ncat unsafe.pem | head -9 | tail -8 | base64 -d | hexdump\n\n0000000 8230 5301 0102 3000 060d 2a09 4886 f786\n0000010 010d 0101 0005 8204 3d01 8230 3901 0102\n0000020 0200 0041 64b1 c934 c7af da19 ce6e 54a2\n0000030 4c50 dceb 63e1 0af2 6acf 4f37 2894 343b\n0000040 ac79 d174 12cb ee20 aa8b 80c4 fd46 8ee1\n0000050 9837 d408 7f0e 054d 47f5 a763 238b 7190\n0000060 ba81 c329 0302 0001 0201 2d40 dcf5 7487\n0000070 8df7 3f07 6236 9d70 90ed c61e f276 42bb\n0000080 2e4a 7bd2 807c 73fa ef9b 0d18 8eaa cb35\n0000090 7b66 a894 38bc 57ad 3e24 7487 917f 08ac\n00000a0 6c3c 85ed 265f a478 7f2f 0261 0021 48d7\n00000b0 8433 7565 465a d8ec 139f ce2f 3a2b 0148\n00000c0 3954 7856 2307 3947 1d6a 786e 35b1 2102\n00000d0 d200 5ef1 ab9a 45e7 2ffe 8bdb 964e 8f63\n00000e0 16a1 bd4a 0539 80af ea8c 382b 58f7 062f\n00000f0 0217 2220 fadb 921b 3222 1180 f291 3510\n0000100 7949 720e 64e2 f434 729f 6fe8 087c c386\n0000110 9f80 0291 4020 ad14 a51d 339d 1d69 bf96\n0000120 1742 9573 655d 3d4d 8620 a376 ab41 879d\n0000130 b4c7 4c15 02ef 0520 c793 32f6 a439 de92\n0000140 a0e7 9761 d219 ee15 a142 4e61 03a0 b0ac\n0000150 b8d1 c3e3 8c5c 00db\n0000157"
  },
  {
    "objectID": "endian.html",
    "href": "endian.html",
    "title": "Endian",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- SHA\n- stdint\n\n\n- Bits\n- fileio\n\n\n- Arrays\n- htonll\n\n\n- Printb\n- memset\n\n\n\n\nThere are no required exercises of this lab.\nIt is supplementary material to the SHAinC homework.\nOption and htonll are the major optional exercises that support SHAinC.\n\nThey are what I regard as likely to be the optimal solutions to problems I expect you to encounter.\n\n‘Memset’ might, or might not, help a lot (depending on how you think).\nArrays will help you at high probability if you encounter a segmentation fault."
  },
  {
    "objectID": "endian.html#stdint.h",
    "href": "endian.html#stdint.h",
    "title": "Endian",
    "section": "stdint.h",
    "text": "stdint.h\n\nBefore doing anything else, we should get 32 bit words.\nI use stdint.h.\nChange last weeks homework to:\n\nAdd an include and\nRemove unsigned by converting to\nuint32_t\n\nSay I had this (incorrect) code:\n\n\n\nmacros.c\n\n#define CHOICE(e,f,g) ((e)?(f):(g))\n#define MEDIAN(e,f,g) ((!!(e) + !!(f) + !!(g)) &gt; 1)\n#define ROTATE(a,n) ((a) &gt;&gt; (n))\n\nint main() {\n    unsigned e = 0xAA, f = 0x55, g = 0x66;\n    CHOICE(e,g,g);\n    MEDIAN(e,f,g);\n    ROTATE(e,f);\n    return 0;\n}\n\n\nInclude stdint and update type names:\n\n\n\nmacros.c\n\n#include &lt;stdint.h&gt; / * !!! NEW */\n\n#define CHOICE(e,f,g) ((e)?(f):(g))\n#define MEDIAN(e,f,g) ((!!(e) + !!(f) + !!(g)) &gt; 1)\n#define ROTATE(a,n) ((a) &gt;&gt; (n))\n\nint main() {\n    uint32_t e = 0xAA, f = 0x55, g = 0x66; /* !!! NEW */\n    CHOICE(e,g,g);\n    MEDIAN(e,f,g);\n    ROTATE(e,f);\n    return 0;\n}\n\n\n\n\n\n\n\nNote\n\n\n\nAn astute student may note that one obvious way to make such change is to:\n\nOpen Python\nRead in macros.c via open into a string variable.\nClose the file descriptor to macros.c\nPerform a replace from unsigned touint32_t`.\nWrite the file to macros.c\n\nWhile in this case we are performing a single string substitutions, and Python is hardly the best choice for so simple a transform, it is always appropriate to use scripts, rather than manual methods, write and edit code.\n\n\n\nYou also need to use exactly one 64 bit numerical value, l\n\nThe message length in bits.\nWe recall the SHA-2 standard caps messages at length 2 ** 62 - 1\nUsually (almost always) a multiple of 8.\nRarely needs all 64 bits, but is required to have them for the standard.\n\nOther values - hash values, messages chunks, etc, are 32 bit.\n\n\n\nmacros.c\n\n#include &lt;stdint.h&gt; / * !!! NEW */\n\nint main() {\n    uint32_t h_i[0x08];  /* 256 bit hash */\n    uint32_t m_i[0x10];  /* 512 bit message chunk */\n    uint64_t l;        /* 64 bit message length */\n    /* Etc, etc. */\n    return 0;\n}\n\n\nWe will use these variables to read information from a file."
  },
  {
    "objectID": "endian.html#file-io",
    "href": "endian.html#file-io",
    "title": "Endian",
    "section": "File I/O",
    "text": "File I/O\n\nWe uphold the following exemplar of SHA256: sha256sum\n\n$ echo \"15 characters.\" &gt; 15char.txt\n$ wc 15char.txt\n 1  2 15 15char.txt\n$ cat 15char.txt\n15 characters.\n$ sha256sum 15char.txt\n5794032f0c0c7ec2c1f43ac9500f65076ad65ec45b8f76e7e2e4cf882b55c3bb  15char.txt\n\nIt computes an SHA-256 hash based on a filename.\nWe introduce file input (not really output) for equivalence.\n\nfopen()\nfread()\nfprintf()\nfclose()\n\n\n\nfopen()\n\nC fopen is almost identical to Python open\n\nTake a filename, and\nA mode, and\nReturn a “file pointer”\n\nIn Python, an _io.TextIOWrapper\n\n&gt;&gt;&gt; open(\"lipsum.txt\", \"r\")\n&lt;_io.TextIOWrapper name='lipsum.txt' mode='r' encoding='cp1252'&gt;\n\nIn C, a FILE *\n\nFILE *fopen(const char *pathname, const char *mode);\nWe capture the return value in a variable for use with other functions.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAn astute student may note that while the Python script can be run directly, testing a line of C code requires additional supporting lines-of-code (LoC) in a complete .c file with:\n\nAn #include preprocessor directive to incorporate the stdio library\nA main function, likely with a return 0;\n\nWhile in this case we are not using this line of code to do anything, versus single lines of Python, single lines of C code are not necessarily independently interpretable or testable.\n\n\n\nNull Checking\n\nIn C, and perhaps in Python, it is common to check if a fopen call is successful.\n\nfopen is something called a “system call” like printf, and should be “null checked”.\nWe:\n\nCapture the return value in a variable, and\nCompare the return value to NULL (that is, zero), and\nIf the return value is NULL, exit with an error code.\n\nUsually in C this is exit(1).\nIncluded in “stdlib.h”\n\n\n\nHere is an example:\n\nWe note that “f_name” is of type char * and includes the file extension.\n\n#include &lt;stdlib.h&gt; /* exit */\nint main() {}\n  char *f_name = \"my_file.txt\";\n  FILE *fp = fopen(f_name, \"r\"); /* read mode */\n  if (fp == NULL) {\n      exit(1);\n  }\n  return 0;\n}\nYou are under no real obligation to null check but…\n\nWithout null checks, very bad times at low probability.\nGround truth for return values is from the “man pages”\nOr use ‘man fopen’ in a non-minimized (not podman) Linux system.\n\n\n\n\n\nfread()\n\nOnce you have opened a file and null checked, it may be read.\nAs a rule, read files into character arrays.\n\nNot quite strings, but not quite not strings.\n\nFor SHA-256, read 512 bits at a time.\n\nThat is 64 characters/bytes/uint8t_ts\n\nuint8_t bytes[64];\nC fread is quite distinct from Python .read()\n\nPython .read is object oriented (not C-like)\n\nfread takes four arguments:\n\nsize_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)\n\nA memory location ptr into which to read bytes.\n\nCall it the “dst” or “destination”, perhaps.\n\nA size_t “size”, how big each thing to read is.\n\nsize_t is usually a uint64_t, but doesn’t have to be.\nWould be of size 1 for char\nWould be of size 8 for uint64_t\nWould be of size sizeof(int) for the default int type.\n\nA size_t ‘nmemb’ for “\\(n\\) members”\n\nThe number of things of ‘size’ to read.\n\nA FILE * ‘stream’ from which to read.\nfread will read ‘size’ * ‘nmemb’ bytes from ‘stream’ into ‘ptr’.\n\n#include &lt;stdlib.h&gt; /* exit */\nint main() {}\n    uint8_t bytes[64];\n    /* Unsafe - needs nullchecks */\n    FILE *fp = fopen(\"my_file.txt\", \"r\"); /* read mode */\n    fread(bytes, 1, 64, fp); /* read up to 64 * 8 -&gt; 512 bits */\n    return 0;\n}\n\n~Null checking\n\nfread has a variety of interesting return values.\n\nIt will return the number of members read…\nNot necessarily the number of bytes (if ‘size’ is non-one)\n\nReturns zero on error, but also…\nNot all files are as large as the read buffer.\n\nIn the above example, bytes is the buffer into which we read - the read buffer.\n\nOn SHA-256, you will have to read files of arbitrary size.\n\nThey will not all be multiples of 512.\nYou will have to follow the padding algorithm.\nChecking the return value of fread will be necessary to determine l.\nMake sure you check sizeof(size_t)!\n\n\nsize_t l = 0; /* SHA-256 length variable 'l' */\nl += fread(bytes, 1, 64, fp) &gt;&gt; 3; /* 2^3 bits per byte */\n\n\n\nfprintf\n\nfprintf is like printf, but the leading f allows directing output somewhere other than standard output stdout.\nI use it here to direct error messages to a special place, stderr\n\nstderr is easier to work with in a variety of complicated ways, but…\nIt is “unbuffered”, so print statements will be output to stderr immediately.\nSometimes, printf statements are lost if errors occur in immediately successive lines of code.\nWe can also capture stderr output specifically with shell commands:\n\n$ ./endian 2&gt; /dev/null\n\nThis suppresses all error messages.\n\nI use fprintf to write error messages within null checks.\nHere is one example, from my sha256 reference solution:\n\nFILE *fp = fopen(f_name, \"r\"); /* read mode */\n\nif (fp == NULL) {\n    fprintf(stderr, \"fopen fails on f_name \\\"%s\\\", exiting...\\n\", f_name);\n    exit(1);\n}\n\nHigh reward and no risk.\nI will use 2&gt; /dev/null in autograders for your convenience.\n\n\n\nfclose\n\nI am contractually obligated to tell you to close files.\nThe interesting bit here is the special EOF character.\nRead more.\n\nI refer to EOF a lot in my theory courses, as a “special character” that comes up a lot in automata and computability theory.\n\nSample code:\n\nif (fclose(fp) == EOF) {\n    fprintf(stderr, \"fclose fails on f_name \\\"%s\\\", exiting...\\n\", f_name);\n    exit(1);\n}"
  },
  {
    "objectID": "endian.html#optional-exercise",
    "href": "endian.html#optional-exercise",
    "title": "Endian",
    "section": "Optional Exercise",
    "text": "Optional Exercise\n\nWrite a C language executable that\n\nGiven a file name at command line…\nPrints out the contents of the file…\nIn hexadecimal…\nIn chunks of size 512 bytes.\n\nSample input:\n\n\n\nlipsum.txt\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n\nSample command:\n\n./fileio lipsum.txt\n\nSample output:\n\n4c6f7265 6d206970 73756d20 646f6c6f \n72207369 7420616d 65742c20 636f6e73 \n65637465 74757220 61646970 69736369 \n6e672065 6c69742c 20736564 20646f20\n\n65697573 6d6f6420 74656d70 6f722069 \n6e636964 6964756e 74207574 206c6162 \n6f726520 65742064 6f6c6f72 65206d61 \n676e6120 616c6971 75612e20 55742065\n\n6e696d20 6164206d 696e696d 2076656e \n69616d2c 20717569 73206e6f 73747275 \n64206578 65726369 74617469 6f6e2075 \n6c6c616d 636f206c 61626f72 6973206e\n\n69736920 75742061 6c697175 69702065 \n78206561 20636f6d 6d6f646f 20636f6e \n73657175 61742e20 44756973 20617574 \n65206972 75726520 646f6c6f 7220696e\n\n20726570 72656865 6e646572 69742069 \n6e20766f 6c757074 61746520 76656c69 \n74206573 73652063 696c6c75 6d20646f \n6c6f7265 20657520 66756769 6174206e\n\n756c6c61 20706172 69617475 722e2045 \n78636570 74657572 2073696e 74206f63 \n63616563 61742063 75706964 61746174 \n206e6f6e 2070726f 6964656e 742c2073\n\n756e7420 696e2063 756c7061 20717569 \n206f6666 69636961 20646573 6572756e \n74206d6f 6c6c6974 20616e69 6d206964 \n20657374 206c6162 6f72756d 2e0a\n\nIt is a simply matter to verify correctness.\n\nTake the first hexadecimal character - 0x4c.\nUse e.g. Python chr.\nGet the letter L.\n\nchr(0x4c)\nSpoilers Solution:\n\n\n\nfileio.c\n\n/* \n * fileio.c \n *\n * Write a C language executable that given a file name \n * prints out the contents of the file in hexadecimal \n * in chunks of size 512 bytes.\n */\n\n/*\ngcc fileio.c --std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -o fileio\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n\n    size_t i, l = 0;\n    uint8_t m[64];\n    FILE *fp; \n\n    if (!(argc &gt; 1)) {\n        fprintf(stderr, \"No filename argument provided, exiting...\\n\");\n        exit(1);\n    }\n\n    fp = fopen(argv[1], \"r\"); /* read mode */\n\n    if (fp == NULL) {\n        fprintf(stderr, \"fopen fails on argv[1] \\\"%s\\\", exiting...\\n\", argv[1]);\n        exit(1);\n    }\n\n    do {\n        l = fread(m, 1, 64, fp);\n        for (i = 0; i &lt; l; i++) {\n            if (i % 4 == 0 && i &gt; 0) {\n                printf(\" \");\n            }\n            if (i % 16 == 0 && i &gt; 0) {\n                printf(\"\\n\");\n            }\n            printf(\"%02x\", m[i]);\n        }\n        printf(\"\\n\\n\");\n    } while (l == 64);\n\n    if (fclose(fp) == EOF) {\n        fprintf(stderr, \"fclose fails on argv[1] \\\"%s\\\", exiting...\\n\", argv[1]);\n        exit(1);\n    }\n\n    return 0;\n}\n\n\n\n\n\n\n\nNote\n\n\n\nAn astute student may note that the “do… while” formulation is unusual.\n\nIn this, we will always print something.\nThe empty file (a file of size zero) and no file (the absence of a file of a given name) are distinct.\nTherefore, we always read from the file at least once after null-checking.\nHowever, we only read again if at least 512 bytes were read…\nOtherwise we read all the content of the file.\n\nThe “do… while” formulation is uncommon, but makes this specific use case much easier. Where else might you use a “do… while”? Why?"
  },
  {
    "objectID": "endian.html#optional-utility",
    "href": "endian.html#optional-utility",
    "title": "Endian",
    "section": "Optional Utility",
    "text": "Optional Utility\n\nYou may find keeping your C code formatted in vim frustrating.\nSimply exit vim and invoke astyle.\n\nastyle fileio.c\n\nIt is likely not on your system by default.\n\nAdd to the Containerfile and rebuild, or\n\napt install astyle # this assumes ubuntu, not alpine\nThere are other such utilities, but this one is quick and nice.\nIf you are using a build script, you can simply add astyle."
  },
  {
    "objectID": "endian.html#endianness",
    "href": "endian.html#endianness",
    "title": "Endian",
    "section": "Endianness",
    "text": "Endianness\n\nFor an out-of-scope reason, most computers store bits differently than most networks.\nSHA-256 analyzes bits on a computer that are slated to go out on a network.\nThis topic is called “Endianness”\nWe go live to a lightly-formatted LLM generated .md write-up:\n\n\nLLMs on Endianess\n\nEndianness refers to the byte order used to store multi-byte data types.\nLike int, unigned, and size_t in memory.\nThere are two main types:\n\nLittle-Endian\n\n\nDefinition: The least significant byte (LSB) is stored at the lowest memory address.\nExample: The number 0x1234ABCD is stored in memory as:\n\n1234ABCD\n\nEditors Note: This is very hard to check, I might add.\n\n\nBig-Endian\n\n\nDefinition: The most significant byte (MSB) is stored at the lowest memory address.\nExample: The number 0x1234ABCD is stored in memory as:\n\nCDAB3412\n\n\n\n\n\n\n\nNote\n\n\n\nAn astute student may note that CDAB3412 does not appear to be the reversal of 1234ABCD\n\nEndianness reverses specifically bytes, 8 bits of information.\nHexadecimal notation expresses specifically nibs or half-bytes, 4 bits of information.\nD is a nib and CD is a byte.\n‘1234’ in reverse byte order is 3412 and is !!!NOT!!! 4321\n4321 would constitute a nib or half-byte reversal.\n\nI recommend thinking of every pair of hexadecimal characters as digit in base 0x100 or base 256 expression of some numerical value.\n\n\n\nWhy Endianness Matters\n\nData Interoperability: Different systems may use different endianness, causing issues when sharing binary data.\nNetworking: The Internet Protocol (IP) uses big-endian (network byte order).\nEditors Note: SHA-256 in practice uses big-endian.\n\nDetecting Endianness in C\n\nYou can determine the endianness of your system using the following code:\n\n\n\n\nchecke.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n  unsigned int x = 1;\n  char *c = (char *)&x;\n  if (*c) {\n      printf(\"Little-Endian\\n\");\n  } else {\n      printf(\"Big-Endian\\n\");\n  }\n  return 0;\n}\n\n\n\nWhy it matters\n\nTo my knowledge, all reference SHA-256 solutions use big endian.\nMy physical device uses little endian, and I suspect yours does too.\n\n\n\narpa/inet.h\n\nThis was a big problem in the early internet days.\nARPA, now DARPA, more or less launched the modern internet.\nThey are responsible for the C89 eligible header arpa/inet.h\n\nIt contains e.g. htonl\n\n“Host to network long”\nIn 1989, uint32_t was commonly called a (unsigned) long.\nEndianness and signedness are non-interactive.\n\nRecall the Encode lecture on signedness.\n\n\nIn 2024, often use htobe32\n\n“Host to big endian 32bit”\nFrom C99 endian.h\nAs with %b, you may use to debug but not to solve your homework.\n\nThat said, it is better to turn in a solution using endian.h than no solution.\nThis is an exception to the typical “no partial credit” policy.\n\n\n\n\n\n\nendian.c\n\n/* endian.c - &exists; C99+ &lt;endian.h&gt; be advised */\n\n/*\ngcc endian.c -O2 -o endian\n*/\n\n#include &lt;stdio.h&gt;  /* fileio   */\n#include &lt;stdint.h&gt; /* uint32_t */\n\n/* Optionally - endianness compatability.  */\n#include &lt;arpa/inet.h&gt; /* htonl */\n#include &lt;endian.h&gt; /* htobe32 */\n\nuint32_t my_htonl(uint32_t n) {\n    return n;\n}\n\nint main() {\n    uint32_t test = 0x1234ABCD;\n    printf(\"%08X\\n%08X\\n%08X\\n\",\n           test,\n           htonl(test),\n           htobe32(test),\n           my_htonl(test)\n          );\n    return 0;\n}\n\n\nWe will now step through an example solution to my_htonl.\nWe will leave as an exercise htonll - the 64 bit variant.\nYou can compare against the htobe64 from endian.h\n\nNot using htobe64 is not just a learning goal.\nRemoving endian.h from my code sped it up 5x in testing.\n\nI note I will assume the “host” is litte endian.\n\nIt is trivial to check, and you may do so, or use a #define\n\n\n\n\nMemory\n\nThe core insight of endianness is that it refers to bits in memory.\nRecall we have used the notion of memory a few times:\n\nStrings in C are characters in adjacent memory locations.\nBitwise operations act on bits in adjacent memory locations.\nThe star * operator and array notation [n] are similar.\n\nWe will rearrange bits using a novel operator - &, which negates *.\n\nWe note that unary prefix & is a memory operator, distinct from\nBinary infix & which is a bitwise operator.\n\n\n\n\nInitial State\n\nWe begin with the indentity operation on uint32_t.\n\nuint32_t my_htonl(uint32_t n) {\n    return n;\n}\n\n\nVariables\n\nIn C89 style, we first declare variables.\nFirst is an alias for n.\n\nWe will treat the 32 bit int as an array of 8 bit ints.\nAn 8 bit int is of type uint8_t\nAn array is of type *\n\nWe initialize it to no value, for now.\n\nuint32_t my_htonl(uint32_t n) {\n    uint8_t *alias;\n    return n;\n}\n\nWe will also be swapping bits around.\nIn Python we can use multiple assignment\n\nx, y = y, x\n\nThis only works with key-value pairs, not arrays.\nWe use a swapping variable, a la\n\nt : int\nt = x\nx = y\ny = t\ndel t\n\nIn C:\n\nuint32_t my_htonl(uint32_t n) {\n    uint8_t swap, *alias;\n    return n;\n}\n\nWe will be looping over something that is quite like an array, so we need an index variable.\n\nI create this variable of type size_t because:\n\nWe will compare it to a sizeof\nWe will use it as an array index to denote memory locations.\nSo the C implementation will guarantee size_t is appropriate for array indices.\nYou can determine what a size_t is using the usual methods for examining C code.\n\n\n\nuint32_t my_htonl(uint32_t n) {\n    uint8_t swap, *alias;\n    size_t index;\n    return n;\n}\n\n\nAmpersand\n\nWe will now use the ampersand & operator.\n\nWe want the uint8_t * array alias to refer to the same bits and the uint32_t numerical value n.\nThe location of the bits that constitute n in memory is given by &n.\nSo we set the alias equal to that location.\n\nuint32_t my_htonl(uint32_t n) {\n  uint8_t swap, *alias = &n;\n  size_t index;\n  return n;\n}\nIf you are confused at all, you should stop and print out, minimally:\n\nThe values of the star, amperand, and unmodified alias and n variables.\nAnything else you think of.\nYou should do these all in different lines in case you get an error.\nYou should think of the &n as the key of n in the key-value memory storage of the system.\n\n\n\n\nCasting\n\nWhen I run this code, I get this warning:\n\nendian.c: In function ‘my_htonl’:\nendian.c:15:26: warning: initialization of ‘uint8_t *’ {aka ‘unsigned char *’} from incompatible pointer type ‘uint32_t *’ {aka ‘unsigned int *’} [-Wincompatible-pointer-types]\n   15 |     uint8_t swap, *arr = &n;\n      |        \n\nThat’s a good warning, I am doing something extremely sketchy.\n\nAfter all, I told gcc that n was a 32 bit integer.\nThen I told it that the the location n was in held an array of 8 bit integers.\nThose things can’t both be true.\n\nWe assure gcc that we know what we are doing with a cast\n\nWe apply a cast to a value, like the value of the memory location of n\nA cast is a type name in parenthesis as a prefix.\nA cast assures the compiler of the intentionality of this mapping of bits to variable names.\nWe are claiming we want to regard n as an array of 8 bit integers, as a uint8_t *.\n\nSo:\n\nuint32_t my_htonl(uint32_t n) {\n    uint8_t swap, *alias = (uint8_t *)&n;\n    size_t index;\n    return n;\n}\n\nThis silenced all my gcc warnings and errors.\n\n\n\nMain loop\n\nIt now suffices to rearrange the bits within 32 bit integer n\nHelpfully, we can refer to these bits using the aliasing 8 bit integer array alias.\n\nuint32_t my_htonl(uint32_t n) {\n    uint8_t swap, *alias = (uint8_t *)&n;\n    size_t index;\n    swap = alias[0];\n    alias[0] = alias[3];\n    alias[3] = swap;\n    swap = alias[1];\n    alias[1] = alias[2];\n    alias[2] = swap;\n    return n;\n}\n\nYou will note this contains repeated code, and is therefore de facto wrong, though it runs correctly."
  },
  {
    "objectID": "endian.html#htonll",
    "href": "endian.html#htonll",
    "title": "Endian",
    "section": "htonll",
    "text": "htonll\n\nWrite a 64 bit endianness inverter.\nYou should start with your my_htonl code if you are stuck.\n\nRefactor the internals into a loop\nUse sizeof for the loop termination.\n\nAdvanced students may wish to write a size agnostic HTON macro.\n\nThis is non-trivial but probably possible (I didn’t check)."
  },
  {
    "objectID": "endian.html#memset",
    "href": "endian.html#memset",
    "title": "Endian",
    "section": "memset",
    "text": "memset\n\nThe C89 “string.h” library contains a helpful function memset.\n\nNAME\n       memset - fill memory with a constant byte\n\nSYNOPSIS\n       #include &lt;string.h&gt;\n\n       void *memset(void *s, int c, size_t n);\n\nDESCRIPTION\n       The memset() function fills the first n bytes of the\n       memory area pointed to by s with the  constant  byte\n       c.\n\nRETURN VALUE\n       The  memset() function returns a pointer to the mem‐\n       ory area s.\n\nI use memset to zero out all my arrays before I use them.\nThis usually doesn’t matter but is very nice with string data."
  },
  {
    "objectID": "endian.html#memcpy",
    "href": "endian.html#memcpy",
    "title": "Endian",
    "section": "memcpy",
    "text": "memcpy\n\nThe C89 “string.h” library contains a helpful function memcpy.\n\nI have never once in my life remembered destination is first, not source.\nI spent an hour trying to figure out a bug caused by that.\n\n\nNAME\n       memcpy - copy memory area\n\nSYNOPSIS\n       #include &lt;string.h&gt;\n\n       void *memcpy(void *dest, const void *src, size_t n);\n\nDESCRIPTION\n       The memcpy() function copies n bytes from memory area src to memory area dest.  The memory\n       areas must not overlap.  Use memmove(3) if the memory areas do overlap.\n\nRETURN VALUE\n       The memcpy() function returns a pointer to dest.\n\nATTRIBUTES\n       For an explanation of the terms used in this section, see attributes(7).\n\nI use memcpy to move data into and out of SHA internal state:\n\nThe working variables.\nThe current \\(H_i\\) hash value.\nThe current \\(M_i\\) message data."
  },
  {
    "objectID": "endian.html#arrays",
    "href": "endian.html#arrays",
    "title": "Endian",
    "section": "Arrays",
    "text": "Arrays\n\nYou will be tempted to write functions of this form:\n\n/* Take two arrays and a return a new array */\nchar *new_hash(uint32_t *m_i, uint32_t *h_i) {\n    uint32_t h_i_1[8];\n    /* some operations */\n    return h_i_1;\n}\n\nThis will cause a segmentation fault for the following reason.\n\nh_i_1 refers to a memory location.\nThat memory location is a local variable of the new_hash function\nWhen new_hash returns, it no longer manages it’s local variables.\nTherefore, it is no longer safe to access that memory location.\n\nIt is, essentially, reclaimed by the operating system.\nThis occurs probabilitistically, but at high probability.\n\nSo the next effort to access a value in h_i_1 will trigger the OS to terminate your program.\n\nHere is the C alternative:\n\n/* Take two arrays as arguments and update the second */\nvoid new_hash(uint32_t *m_i, uint32_t *h_i) {\n    uint32_t h_i_1[8];\n    /* some operations */\n    memcpy(h_i, h_i_1, sizeof(h_i_1));\n    return;\n}\n\nh_i is safe because it is managed by some other function.\n\nLikely main or some other function that called new_hash.\n\nTherefore, it will not be reclaimed by the OS on return from new_hash."
  },
  {
    "objectID": "endian.html#take-aways",
    "href": "endian.html#take-aways",
    "title": "Endian",
    "section": "Take-aways",
    "text": "Take-aways\n\nDon’t return arrays.\nProvide arrays as arguments and update the provided arrays.\nThere are other ways to do this that we will learn in time.\n\nBut they are unhelpful on SHA-256, and would enable low quality solutions."
  },
  {
    "objectID": "macros.html",
    "href": "macros.html",
    "title": "Macros",
    "section": "",
    "text": "Review Show\n\n\nGoal: Think about C variables as bits\n\nMy responsibility\n\nI will provide a reference solution in Python\n\nThe reference will differ in the following ways:\n\nThey will not use, as there isn’t great bit manipulation in Python without libraries.\nI will provide an example of a left rotate while the assignment requires a right rotate.\n\n\nI will provide an autograder Containerfile\n\nFollowing the deficiencies of the Python variant, I will also provide a “viewer”.\nI will provide sample output for the viewer.\n\n\nYour responsibility\n\nYou will create a solution in C as an “macros.c” file.\n\nIt will contain 3 macros\n\nCHOICE\nMEDIAN\nROTATE - a “right” rotate.\n\n\nYou will create a private GitHub repository named “crypto”\n\nI recommend creating a new repository of your own, not forking my repository.\nThis makes it easier to manage a private repository.\nUp to you.\n\nYou will create a folder in this repository named “macros”\nYou will store your “macros.c” file in the “macros” folder.\nYou will add me as a collaborator through the GitHub web application\n\n\nMy GitHub account cd-public is attached to my @wu address.\n\n\nIf you would like to fork an existing repository, use this one:\n\nhttps://github.com/cd-c89/crypto\n\n\n\n\n\nTopic Areas\n\n\n\nReview:\nNewish:\n\n\n\n\n- bits\n- Macros\n\n\n- bytes\n- Sizeof\n\n\n- operators\n\n\n\n\n\n\n\n\nPodman Show\n\n\n\nSetup\n\nFor this lab, I used the following Containerfile\n\nSame as lecture\nI didn’t even rename it\n\n\n\n\nContainerfile\n\nFROM ubuntu\n\nRUN apt update && apt install gcc vim\n\n\nI could build with the following, but I already had it built:\n\npodman build -t c89_99 .\n\nI conducted the full hw within a single container’s vim instance.\n\npodman run -it c89_99 vim macros.c\n\n\n\nGitHub Show\n\nRead this in GitHub Docs\n\nInviting collaborators to a personal repository\nYou can add unlimited collaborators on public and private repositories.\n\nAbout collaboration in a personal repository\nTo collaborate with users in a repository that belongs to your personal account on GitHub, you can invite the users as collaborators.\nIf you want to grant more granular access to the repository, you can create a repository within an organization. For more information, see Access permissions on GitHub.\n\n\nInviting a collaborator to a personal repository\nYou can send an invitation to collaborate in your repository directly to someone on GitHub, or to the person’s email address..\nGitHub limits the number of people who can be invited to a repository within a 24-hour period. If you exceed this limit, either wait 24 hours or create an organization to collaborate with more people. For more information, see Creating a new organization from scratch.\n\nAsk for the username of the person you’re inviting as a collaborator. If they don’t have a username yet, they can sign up for GitHub. For more information, see Creating an account on GitHub.\nUnder your repository name, click Settings. If you cannot see the “Settings” tab, select the dropdown menu, then click Settings. \nIn the “Access” section of the sidebar, click Collaborators.\nClick Add people.\nIn the search field, start typing the name of person you want to invite, then click a name in the list of matches.\nClick Add NAME to REPOSITORY.\nThe user will receive an email inviting them to the repository. Once they accept your invitation, they will have collaborator access to your repository.\n\n\n\n\n\n\nSketch Show\n\n\nThe purpose of this homework is to write four (4) bitwise macros\n\nTwo trenanry operations\n\nChoice\nMedian, also called Majority\n\nAnd two rotations\n\nRight, which sees use, and\nLeft, as an academic exercise\n\n\nThese will see use in the next assignment, SHA256\nThey are logically and historically interesting within cryptography\nThere is no graceful way, to my knowledge, to describe these on bits in Python\n\nI will provide pseudo code over tuples of integers.\nI provide conversion functions from strings.\nI am aware of plenty non-graceful ways, but\n\nIf you want to show me one you like send me a DM\n\n\nFor this homework, you will need some form of bit printing\n\nIf your printb from lab is struggling, use %b in debug\nJust remove it before your turn in your work.\n\nWe next introduce macros.\n\n\n\n\nMacros Show\n\n\nThe purpose of this homework is to write four (4) bitwise macros.\nC macros exist in the “preproprocessor”.\nHere is an example of preprocessor directive you have written already:\n\n#include &lt;stdio.h&gt;\n\nYou probably also have used a define directive\n\n#define ABCS \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nThe define directive is used to define something called a macro.\n\nWhen used to define constants, those are just macros that return a value.\n\nWe can also define macros that accept arguments, the most famous are MIN and MAX\n\nI grabbed these from OpenBSD\nThey have fallen out of favor for a complicated reason.\nIn general, use functions.\nWe use macros to learn about them, not to learn to write them.\n\n\n/* Macros for min/max. */\n#define MIN(a,b) (((a)&lt;(b))?(a):(b))\n#define MAX(a,b) (((a)&gt;(b))?(a):(b))\n\nI’d encourage you to play around a bit with these macros.\n\nYou don’t need to fully understand before diving into choice, median, rotate.\nBut a little background can help.\n\n\nint x = 50;\nint a = 'a';\nprintf(\"%d\\n\", MAX(x++,a++))\n\nIn general, you want to use a lot of parens in macros.\n\nTry some things out to try to see why.\n\n\n\n\n\nChoice Show\n\n\nHere I provide Pythonic boolean choice and bitwise choice, and C boolean choice.\nYou will need C bitwise choice.\nChoice is sometimes also referred to as the “ternary operator”\n\nMost famously in .js\nThis is… potentially confusing.\nIt is a ternary operator.\nThe Python operator is non-standard and intentionally ugly.\n\n\n\n\n\nmacros.py\n\n# ref: choice := (e and f) xor ((not e) and g)\n# src: https://en.wikipedia.org/wiki/SHA-2\n\n# We just tell Python the ints are bools\n# We just use \"!=\" as xor\n\ndef _choice(e:bool, f:bool, g:bool) -&gt; bool:\n    return int(f if e else g)\n    # return int((e and f) != ((not e) and g))\n\nimport itertools\n\ntester = list(itertools.product([0, 1],repeat=3))\n\nprint(\" === Boolean Choice === \")\n[print('_choice'+str(test), '-&gt;', _choice(*test)) for test in tester]\n\narrays = (tuple(zip(*tester)))\n\ndef choice(e:tuple[bool], f:tuple[bool], g:tuple[bool]) -&gt; tuple[bool]:\n    return tuple(_choice(_e, _f, _g) for _e, _f, _g in zip(e,f,g))\n\n# This was ugly\n# print('choice'+str(arrays), '-&gt;', choice(*arrays))\n\n# pretty print\nbitstr = lambda bits : \"\".join([str(b) for b in bits])\nbsstrs = lambda arrs : str(tuple(bitstr(bits) for bits in arrs))\nprint(\" === Bitwise Choice === \")\nprint('choice'+bsstrs(arrays), '-&gt;', \"'\"+bitstr(choice(*arrays))+\"'\")\n\n\n\nYou can run it yourself, but here is the output for reference.\n\n === Boolean Choice === \n_choice(0, 0, 0) -&gt; 0\n_choice(0, 0, 1) -&gt; 1\n_choice(0, 1, 0) -&gt; 0\n_choice(0, 1, 1) -&gt; 1\n_choice(1, 0, 0) -&gt; 0\n_choice(1, 0, 1) -&gt; 0\n_choice(1, 1, 0) -&gt; 1\n_choice(1, 1, 1) -&gt; 1\n === Bitwise Choice ===\nchoice('00001111', '00110011', '01010101') -&gt; '01010011'\n\nThe following defines a macro for boolean choice.\n\nThough not particularly gracefully.\n\n\n/* Macro for boolean choice. */\n#define CHOICE(e,f,g) ((e)?(f):(g))\n\nUpdate the macro to perform bitwise choice.\n\nIt should be a single line macro.\nIt should use bitwise operators.\n\n\n\n\n\nMedian Show\n\n\nHere I provide Pythonic boolean median and bitwise median, and C boolean median.\nYou will need C bitwise median.\nI will take it as given you know what a median is.\nThe following code is appended to “macros.py”\n\n\n\n\nmacros.py\n\nimport numpy as np\n\ndef _median(e:bool, f:bool, g:bool) -&gt; bool:\n    return int(np.median([e,f,g]))\n\nprint(\" === Boolean Median === \")\n[print('_median'+str(test), '-&gt;', _median(*test)) for test in tester]\n\ndef median(e:tuple[bool], f:tuple[bool], g:tuple[bool]) -&gt; tuple[bool]:\n    return tuple(_median(_e, _f, _g) for _e, _f, _g in zip(e,f,g))\n\nprint(\" === Bitwise Median === \")\nprint('median'+bsstrs(arrays), '-&gt;', \"'\"+bitstr(median(*arrays))+\"'\")\n\n\n\nYou can run it yourself, but here is the output for reference.\n\n === Boolean Median === \n_median(0, 0, 0) -&gt; 0\n_median(0, 0, 1) -&gt; 0\n_median(0, 1, 0) -&gt; 0\n_median(0, 1, 1) -&gt; 1\n_median(1, 0, 0) -&gt; 0\n_median(1, 0, 1) -&gt; 1\n_median(1, 1, 0) -&gt; 1\n_median(1, 1, 1) -&gt; 1\n === Bitwise Median ===\nmedian('00001111', '00110011', '01010101') -&gt; '00010111'\n\nThe following defines a macro for boolean median.\n\nThough not particularly gracefully.\nC !! is very close to Python bool()\n\n\n/* Macro for boolean median. */\n#define MEDIAN(e,f,g) ((!!(e) + !!(f) + !!(g)) &gt; 1)\n\nUpdate the macro to perform bitwise median.\n\nIt should be a single line macro.\nIt should use bitwise operators.\n\n\n\n\n\nSizeof Show\n\n\nYou may have noticed something while writing printb:\n\nThat not know how many bits you had was annoying.\n\nNot to worry, C can help us.\n\nA char is always exactly 8 bits\n\nThis is also called one byte\nIt is trivial to verifying this experimentally.\n\nEverything else is some multiple of char\nTo find how many char’s big something is, use sizeof\n\nI compile with -w to silence an error.\n\nsizeof doesn’t run an integer, so we shouldn’t print with %d\nMore latter.\n\n\n$ cat sizeof.c\n#include &lt;stdio.h&gt;\n\nint main() {\n        char c = 1;\n        int n = 2;\n        char s[8] = {1,2,3,4,5,6,7,8};\n        printf(\"sizeof(c) = %d, sizeof(n) = %d, sizeof(s) = %d\\n\",\n                        sizeof(c),\n                        sizeof(n),\n                        sizeof(s)\n              );\n        return 0;\n}\n$ gcc sizeof.c -w\n$ ./a.out\nsizeof(c) = 1, sizeof(n) = 4, sizeof(s) = 8\n\nTo make introducing rotate easier, all examples will be on char\nRotate is used in cryptography on things 32 bits in size.\n\nUsually an int is this big, but not always.\nThere’s ways to manage this.\n\nI will test your rotate code on the unsigned int type, which is usually 32 bits in size.\n\nYou can assume 32, for now.\n\n\n\n\n\nRotate Show\n\n\nWe recall cipher rotation.\n\n ____________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n ____________________________\n[ DEFGHIJKLMNOPQRSTUVWXYZABC ] # forward(3)\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n ____________________________\n[ XYZABCDEFGHIJKLMNOPQRSTUVW ] # forward(-3)\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n\nWe understand this as:\n\nTake an array and,\nTake a numerical value…\n\nof less than the length of the array.\n\nMaintain all elements of the array, but\n\nIncrease their index by the numerical value, and\nIndices greater than array length wrap around…\n\nUsing modulo array length.\n\n\n\nWe apply this same idea to the notion of boolean arrays.\n\nA unsigned int is a boolean array of some length.\nIt is possible to determine these lengths.\n\nHere is a Python bitwise rotate on boolean arrays of size 8.\n\n\n\n\nmacros.py\n\ndef rotleft(a:tuple[bool], n:int) -&gt; tuple[bool]:\n    return a[n:] + a[:n]\n\nprint(\" === Bitwise Rotleft === \")\narray = (0,0,1,0,1,1,0,1)\nfor n in range(len(arrays[0])+1):\n    print('rotleft('+bitstr(array)+','+str(n)+') -&gt;', bitstr(rotate(array,n)))\n\n\n\nYou can run it yourself, but here is the output for reference.\n\n === Bitwise Rotleft ===\nrotleft(00101101,0) -&gt; 00101101\nrotleft(00101101,1) -&gt; 01011010\nrotleft(00101101,2) -&gt; 10110100\nrotleft(00101101,3) -&gt; 01101001\nrotleft(00101101,4) -&gt; 11010010\nrotleft(00101101,5) -&gt; 10100101\nrotleft(00101101,6) -&gt; 01001011\nrotleft(00101101,7) -&gt; 10010110\nrotleft(00101101,8) -&gt; 00101101\n\nWe note that this forms a “backward” or “leftward” rotate.\n\nThis is a non-standard rotate, often called lotate or rotleft\nA future assignment will use a “forward” or “rightward” rotate.\n\nWithout showing code, it would look like this.\n\n === Bitwise Rotate ===\nrotate(00101101,0) -&gt; 00101101\nrotate(00101101,1) -&gt; 10010110\nrotate(00101101,2) -&gt; 01001011\nrotate(00101101,3) -&gt; 10100101\nrotate(00101101,4) -&gt; 11010010\nrotate(00101101,5) -&gt; 01101001\nrotate(00101101,6) -&gt; 10110100\nrotate(00101101,7) -&gt; 01011010\nrotate(00101101,8) -&gt; 00101101\n\nNote:\n\nThe C language bitwise operations often seem quite unstable.\n\nIt is a virtual certainty you will encounter pernicious bugs.\nUse unsigned int or just unsigned to avoid negative shenanigans.\nPrint everything all the time.\nLiberally consult printf and C language documentation.\nAsk questions early and often.\n\n\n\n\n\n\nTester Show\n\n\nTester\n\nI am providing the following Containerfile, which will serve as a minimal autograder\n\nIt sets up an Ubuntu container.\nIt downloads a .c and .sh file and script to test.\nIt copies in “macros.c” from your system.\n\n\n\n\nContainerfile\n\nFROM ubuntu \n\nRUN apt update && apt install gcc curl -y\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/macros/tester.c -o tester.c\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/macros/tester.sh -o tester.sh\n\nCOPY macros.c .\n\n\n\nUsage\n\nI built my container via:\n\npodman build -t tester .\n\nI tested my code via:\n\npodman run tester /bin/bash tester.sh\n\nIf the above script returns 0 you are done.\n\nUpload your code to your GitHub on which I am a collaborator.\n\nI will review the most recent version prior to the due date.\n\n\n\nTesting\n\nIt may be non-obvious how the tester functions.\n\nWhen the container is built, it copies in macros.c\nWithin the container, tester.sh:\n\nReads macros.c with grep\n\nFinds lines containing the 3 define statements\nEchos these statements to the command line\n\nEchoes tester.c to the command line\nRuns gcc over the command line input\n\ntester.c intentionally causes a suppressed error (-Wno)\nThe command line code needs its languages specified (-xc)\n\nRuns the output executable\nEchoes the return value via `$?\n\nA return value of n denotes:\n\nPerfect.\nCHOICE is incorrect\nMEDIAN is incorrect but CHOICE is correct\nROTATE is incorrect but CHOICE and MEDIAN are correct\n\nIt may be the case that tester.c runs strangly on your system.\n\nIt assumes an underlying AMD64 device\nGCP cloud console runs on AMD64\n\ndocker, installed by default, is an alternative to podman on GCP.\n\n\n\n\n\n\nViewer\n\nThe tester doesn’t include &lt;stdio.h&gt; so it isn’t easy to examine.\nYou can view sample outputs here.\n\n\n\nviewer.c\n\n#include &lt;stdio.h&gt;\n\n/* your code here\n#define CHOICE(x,y,z) \n#define MEDIAN(x,y,z) \n#define ROTATE(a,b) */\n\nint main() {\n    /* Various Variables*/\n    unsigned a[4] = {0x11110000, 0x11001100, 0x10101010, 0xABCD0123};\n\n    /* CHOICE */\n    printf(\"*Rotates use a decimal shift value, but print in hexadecimal:\\n\");\n    printf(\"CHOICE(\\n%08lX,\\n%08lX,\\n%08lX) = \\n--------\\n%08lX\\n\\n\", a[0], a[1], a[2], CHOICE(a[0], a[1], a[2]));\n    printf(\"MEDIAN(\\n%08lX,\\n%08lX,\\n%08lX) = \\n--------\\n%08lX\\n\\n\", a[0], a[1], a[2], MEDIAN(a[0], a[1], a[2]));\n    printf(\"*Rotates use a decimal shift value, but print in hexadecimal:\\n\");\n    printf(\"ROTATE(\\n%08lX, 04) = \\n--------\\n%08lX\\n\\n\", a[3], ROTATE(a[3], 4));\n    printf(\"ROTATE(\\n%08lX, 08) = \\n--------\\n%08lX\\n\\n\", a[3], ROTATE(a[3], 8));\n    printf(\"ROTATE(\\n%08lX, 12) = \\n--------\\n%08lX\\n\\n\", a[3], ROTATE(a[3], 12));\n    printf(\"ROTATE(\\n%08lX, 02) = \\n--------\\n%08lX\\n\\n\", 0x1000, ROTATE(0x1000, 2));\n    printf(\"ROTATE(\\n%08lX, 30) = \\n--------\\n%08lX\\n\\n\", 0x1000, ROTATE(0x1000, 30));\n\n    return 0;\n}\n\n*Rotates use a decimal shift value, but print in hexadecimal:\nCHOICE(\n11110000,\n11001100,\n10101010) = \n--------\n11001010\n\nMEDIAN(\n11110000,\n11001100,\n10101010) = \n--------\n11101000\n\n*Rotates use a decimal shift value, but print in hexadecimal:\nROTATE(\nABCD0123,04) = \n--------\n3ABCD012\n\nROTATE(\nABCD0123,08) = \n--------\n23ABCD01\n\nROTATE(\nABCD0123,12) = \n--------\n123ABCD0\n\nROTATE(\n00001000,02) = \n--------\n00000400\n\nROTATE(\n00001000,30) = \n--------\n00004000"
  },
  {
    "objectID": "ops_ui.html",
    "href": "ops_ui.html",
    "title": "Ops_ui",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- bigint/4096_t\n- headers\n\n\n- extended GCD\n- high order functions\n\n\n- headers\n\n\n\n\n\nThere are no required exercises of this lab.\nIt is supplementary material to the BigRSA homework.\n\nSpecifically, it provides helper functions for BigRSA"
  },
  {
    "objectID": "ops_ui.html#the-.h-file",
    "href": "ops_ui.html#the-.h-file",
    "title": "Ops_ui",
    "section": "The .h file",
    "text": "The .h file\n\nThere are two main types of C files.\n\nThe .c files we have been working with.\nThe .h files we have incorporated via #include"
  },
  {
    "objectID": "ops_ui.html#ops_ui.h",
    "href": "ops_ui.html#ops_ui.h",
    "title": "Ops_ui",
    "section": "ops_ui.h",
    "text": "ops_ui.h\n\nCreate two new files.\n\nops_ui.c, and\nops_ui.h\n\nWe will work within both.\n\nYou may, perhaps, which to keep both open in separate vim windows, or\nImplement completely in 4096_t.c then split latter.\n\nWe will want to be able to #include this work into BigRSA.c next week.\n\n\nDouble Inclusion\n\nBy convention, there is a double inclusion guard\n\n\n\n\n\nops_ui.h\n\n/* ops_ui.h */\n\n#ifndef _ops_ui_H\n#define _ops_ui_H\n\n/* We will put stuff here soon */\n\n#endif /* _ops_u_H */\n\n\n\n\nops_ui.c\n\n/* ops_ui.c */\n\n\n/* We will put stuff here soon */\n\n\n\n\n\nOther headers\n\nVs. 4096_t.h, I implemented ops_ui.h on top of 4096_t.h.\n\nSo no system header files - like stdio\nBut included 4096_t.h.\nBut that file is in another directory!\n\nMy file system looked something like this:\n\n.\n├── 4096_t\n│   ├── 4096_t.c\n│   ├── 4096_t.h\n│   └── biggmp.c\n└── ops_ui\n    ├── ops_ui.c\n    └── ops_ui.h\n\nIt actually had way more stuff, but I cut out everything that isn’t relevant.\n\n\nRelative paths\n\n4096_t is in another directory so I can simply write:\n\n#include \"4096_t.h\"\n\nRather, I must give the relative path - how to navigate from ops_ui.h to 4096_t.h\n\nIf I wanted to navigate through the filesystem, I may do something like the following:\n\n$ pwd\n/home/user/dev/crypto/ops_ui\n$ cd ..\n$ pwd\n/home/user/dev/crypto\n$ cd 4096_t\n$ pwd         \n/home/user/dev/crypto/4096_t\n$ head -1 4096_t.h\n/* 4096_t.h */\n\nOr I may do something much shorter:\n\n$ pwd\n/home/user/dev/crypto/ops_ui\n$ head -1 ../4096_t/4096_t.h\n/* 4096_t.h */\n\nI can refer to to files the same way from within C:\n\n#include \"../4096_t/4096_t.h\"\n\nNote - this will only work if you have a setup with a similar file structure!\n\n\n\n\n\nFunctions\n\nI noticed when working on BigRSA I often:\n\nHad a big 4096-bit integer\nThat I wanted to add 1 or 6 to\nOr compare to 0\n\nThis is a common problem, and reolved in our reference implementation (LibGMP) using the _ui suffix.\nQuoth LibGMP\n\nFunction: void mpz_add (mpz_t rop, const mpz_t op1, const mpz_t op2)\nFunction: void mpz_add_ui (mpz_t rop, const mpz_t op1, unsigned long int op2) \n\nBoth add together a big number named op1\n\nThat is, mpz_add adds it to a big number op2\nAnd mpz_add_ui adds it to an unsigned long int op2\n\nBoth store the sum in the big number rop\nI recommend implementing each of the following.\n\nNote that I place the return value last not first\n\n\n\n\nops_ui.h\n\nuint64_t add_ui(uint64_t *big, uint64_t lil, uint64_t *out);\nuint64_t sub_ui(uint64_t *big, uint64_t lil, uint64_t *out);\nuint64_t mul_ui(uint64_t *big, uint64_t lil, uint64_t *out);\nuint64_t quo_ui(uint64_t *big, uint64_t lil, uint64_t *out);\nuint64_t rem_ui(uint64_t *big, uint64_t lil, uint64_t *out);\n\n\nBefore you start implementing these operations, read the lambda heading."
  },
  {
    "objectID": "ops_ui.html#higher-order-functions",
    "href": "ops_ui.html#higher-order-functions",
    "title": "Ops_ui",
    "section": "Higher Order Functions",
    "text": "Higher Order Functions\n\nDespite my best efforts, there is no graceful way to implement within C functions which return other functions.\n\nI did not say no way! I said no graceful way.\nUsing C++ is not graceful!\n\nThere is, I think, an extraordinarily graceful to implement functions which accept as a parameter/argument some other function(s).\n\nWe simply specify that an argument has some function type.\n\nWe begin with a minimal example.\n\n\nctype.h\n\nOne common application for functions is to check if a character is a printing character:\n\nA number, like 0 or i?\nA letter, like O or i?\nA control character, like \\0 or \\n\nA digit, like 0 or 1\nA space, like  or \\n\n\nctypes.h provides functions to test each of these.\n\n/* For some reason this is int -&gt; int *?\nint isalnum( int ch );\n\nLet’s make a table.\n\nIn the leftmost column, we will print each of the first 127 characters\nThen we we will have a column for each of the ctypes\nWe will specify T or F for “True” or “False” membership in the ctype.\nSo we need a way to go from character-to-character with a bunch of int-to-int functions.\n\nHere are some functions to use:\n\nisalnum\nisalpha\nisdigit\nislower\nisprint\nispunct\nisspace\nisupper\n\nWe can use them as follows:\n\n\n\ntedious.c\n\n#include &lt;stdio.h&gt;\n#include &lt;ctype.h&gt;\n\nint main() {\n    char buf[8] = \"aA1. _\\t\";\n    if (isalnum(buf[0])) {\n        printf(\"T\");\n    } else {\n        printf(\"F\");\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\n\nIt would be tedious to write a wrapper function for each of these.\n\nWe treat them as a lambda function, a function for which we neither know nor care the name, and know only the type.\n\nLet’s examine more closely these lines:\n\n    if (isalnum(buf[0])) {\n        printf(\"T\");\n    } else {\n        printf(\"F\");\n    }\n\nWe:\n\nTake a function name\nTake an array name\nTake an array index\nApply the function name to index element of the array.\nPrint based on the result.\n\nLet’s write a function.\n\nIt doesn’t return anything, it just prints.\nIt takes a function… somehow.\nIt takes a character pointer for an array.\nIt takes a numberical value for an array index.\n\nchar_to_bool(function, array, index)\nThis is not well-formed C - let’s add types.\n\nvoid char_to_bool(function, char *array, int index) # should be size_t, but.\n\nisalnum also has a type - the type int -&gt; int in Python, but in C?\n\nvoid char_to_bool(int (function)(int), char *array, int index).\n- We say `function` is a type that given some `int` returns some `int`\n\nHow do we use it?\n\nThe same way we would any other function for which we know a name or alias!\n\nvoid char_to_bool(int (function)(int), char *array, int index) {\n  if (function(array[index])) {\n      printf(\"T\");\n  } else {\n      printf(\"F\");\n  }\n  return;\n}\nPut it altogether\n\n\n\ngoated.c\n\n#include &lt;stdio.h&gt;\n#include &lt;ctype.h&gt;\n\nvoid char_to_bool(int (function)(int), char *array, int index) {\n    if (function(array[index])) {\n        printf(\"T\");\n    } else {\n        printf(\"F\");\n    }\n    return;\n}\n\nint main() {\n    char buf[8] = \"aA1. _\\t\";\n    char_to_bool(isalnum, buf, 0);\n    printf(\"\\n\");\n    return 0;\n}\n\n\n\nLonger arrays\n\nWhy not examine the char in multiple ways?\n\nWe\n\n\n\n\ngoated.c\n\n#include &lt;stdio.h&gt;\n#include &lt;ctype.h&gt;\n\nvoid char_to_bool(int (function)(int), char *array, int index) {\n    if (function(array[index])) {\n        printf(\"T\");\n    } else {\n        printf(\"F\");\n    }\n    return;\n}\n\nvoid char_to_bools(char *array, int index) {\n    int (*functions[8])(int) = {\n        isalnum,\n        isalpha,\n        isdigit,\n        islower,\n        isprint,\n        ispunct,\n        isspace,\n        isupper\n    }, i;\n    for (i = 0 ; i &lt; 8 ; i++) {\n        char_to_bool(functions[i], array, index);\n    }\n    return;\n}\n\nint main() {\n    char buf[8] = \"aA1. _\\t\";\n    char_to_bools(buf, 0);\n    printf(\"\\n\");\n    return 0;\n}\n\n\nWe can see the output:\n\n{.email}} TTFTTFFF\n\n\nClosing thoughts\n\nAn astute will have noticed that:\n\nAll of the “big” operations have the same function type.\nAll of the “_ui” operations have the same function type.\nAll of the “_ui” operations can utilize the underlying “big” operation.\n\nThis is not efficient for computing performance, but is efficient from code reuse."
  },
  {
    "objectID": "ops_ui.html#autograder",
    "href": "ops_ui.html#autograder",
    "title": "Ops_ui",
    "section": "Autograder",
    "text": "Autograder\n\nThe interface implemented by the autograder may be informative here.\n\nIt uses a Python script.\nIt uses a dedicated .c file with a main function.\nIt differents from the 4096_t grader:\n\nIt uses gcc ../4096_t/4096_t.c ops_ui.c tester.c\nIt can use gcc ../4096_t/biggmp.c ops_ui.c tester.c -lgmp\nYou can change this if you use a different directory structure.\nThere is a better way to write these gcc commands that we will cover after midterm.\n\nIt uses Python subprocess to examine the results.\n\nI was unable to achieve a bugfree multiply absent this interface, but was able to progress rapidly once I developed it.\n\ntester.py\ntester.c"
  },
  {
    "objectID": "ops_ui.html#bigmax",
    "href": "ops_ui.html#bigmax",
    "title": "Ops_ui",
    "section": "BigMax",
    "text": "BigMax\n\nI needed a way to see if things were bigger than other things.\nMy subtraction only worked if the initial argument, the minuend, was larger than the final argument, the subtrahend.\nAdditionally, computing extended gcd’s generally involves finding a maximal and minimal value.\nI just returned a 0 or a 1 depending on whether the initial argument was the max."
  },
  {
    "objectID": "ops_ui.html#bigmid-mid_ui",
    "href": "ops_ui.html#bigmid-mid_ui",
    "title": "Ops_ui",
    "section": "BigMid, mid_ui",
    "text": "BigMid, mid_ui\n\nIn LaTeX I am accustomed to denoted “\\(a\\) is divisible by \\(b\\)” or “\\(b\\) divides \\(a\\)” as follows: \\[\na \\mid b\n\\]\nThis uses the LaTeX \\mid command.\nIt is the same idea as a % b == 0\nI wanted to call this div but that was already used for division.\nI mostly used this for prime generation."
  },
  {
    "objectID": "printb.html",
    "href": "printb.html",
    "title": "Printb",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- for\n- bits\n\n\n- C types\n- bytes\n\n\n- booleans\n- operators\n\n\n\n\nIn addition to large amounts of contextual and background material, there are three main exercises for this lab:\n\nScript\nPrintb\nit/ool"
  },
  {
    "objectID": "printb.html#section",
    "href": "printb.html#section",
    "title": "Printb",
    "section": "==",
    "text": "==\n\nTo begin, we recall Enigma:\n\nUnlike Python booleans, C has no boolean type.\n\nRather it has truthiness, akin to Python if statements with numerical conditions.\nThe numerical value zero is false.\nAll other numerical values are true.\n\n\nThe simplest way for me to understand bools is via equality testing\n\nFirst, Python\n\n\n\nVerify install\n\nBefore anything else, I verify I have an install of Python3.\n\npython3 --version\n\nI found I had 3.12.3 - not great, not terrible.\n\n\n\nPython -c\n\nWe can evaluate a single Python expression - a single line of code - via -c\n\npython3 -c \"print(1 == 1)\"\n\nAs expected, this prints True - capital “T”, lowercase “rue”.\n\nWe’ve seen this before.\n\n\n\n\nFormat print\n\nHowever, this isn’t exactly true-to-form\nPython print is not a format print by default.\nFor equivalence, we must use a format print.\nWe can naively use a format without specifying a type…\n\npython3 -c 'print(f\"{1==1}\")' \n\nThis still gives True, but also has no C equivalent!\n\nWe have to provide some letter to determine how a value is printed\n\n\n\n\n2 %b | ! 2 %b\n\nJava\n\nThere is a language called Java, technically.\n\n&lt;loud grumbling&gt;\n\nIt has a format print, and uses %b for booleans, I hear.\n\nCredit Stack Overflow\n\nYou can test if you want:\n\nYoink a Java container.\n\npodman run -it openjdk\n\nIt will drop you into something called jshell\nWe can do a quick Java printf\n\nSystem.out.printf(\"1 == 1 is %b\\n\",1 == 1);\n\nI got this output, which I don’t understand at all\n\n1 == 1 is true\n$1 ==&gt; java.io.PrintStream@34c45dca\n\nIt does say “true” though, that’s fun!\nApparently you can use the following to leave jshell\n\n/ex\n\nI cleaned the Java off my system with\n\npodman system prune\n\nI made sure it was gone with\n\npodman images\n\n\n\nPythonic b\n\nAfter that digression, let’s try b in Python\n\npython3 -c 'print(f\"{(1==1):b}\")' \n\nIt prints, of all things:\n\n1\n\nWell, that’s interesting.\n\nIf you want some fun first\n\npython3 -c 'print(f\"{2:b} or not {2:b}\")'"
  },
  {
    "objectID": "sha256.html#announcements",
    "href": "sha256.html#announcements",
    "title": "SHA256",
    "section": "Announcements",
    "text": "Announcements\n\nWelcome to variously CS 276/CS 540\nAction Items:\n\nHow was Macros?\nNext homework coming out now - SHAinC"
  },
  {
    "objectID": "sha256.html#today",
    "href": "sha256.html#today",
    "title": "SHA256",
    "section": "Today",
    "text": "Today\n\nSHA256\n\nWhy?\nWhat?\nHow?"
  },
  {
    "objectID": "sha256.html#slide-credit",
    "href": "sha256.html#slide-credit",
    "title": "SHA256",
    "section": "Slide Credit",
    "text": "Slide Credit\n\nSaravanan Vijayakumaran\nsarva@ee.iitb.ac.in\n\nDepartment of Electrical Engineering\n\nIndian Institute of Technology Bombay"
  },
  {
    "objectID": "sha256.html#hash-functions",
    "href": "sha256.html#hash-functions",
    "title": "SHA256",
    "section": "Hash Functions",
    "text": "Hash Functions\n\nMethods for deterministically compress a long input string to a shorter output called a digest\n\nAlso called “signature”\nCan hash anything stored in computer\n\nThese are also called “compression” or “one-way” hash functions."
  },
  {
    "objectID": "sha256.html#hash-merits",
    "href": "sha256.html#hash-merits",
    "title": "SHA256",
    "section": "Hash Merits",
    "text": "Hash Merits\n\nPrimary requirement is that it should be infeasible to find collisions,\n\ni.e. no two inputs have same digest.\nIf I download Ubuntu and check the signature, I should know it’s Ubuntu.\nIf Ubuntu and a malware package have the same signature, useless."
  },
  {
    "objectID": "sha256.html#non-cryptographic",
    "href": "sha256.html#non-cryptographic",
    "title": "SHA256",
    "section": "Non-Cryptographic",
    "text": "Non-Cryptographic\n\nUsed to build hash tables\n\nKey-value stores with \\(\\mathcal{O}(1)\\) lookup time.\nMy hashtable/hashmap slides\n\nExample: Python hash\n\n\nprint(\"\\n\".join([f\"{hash(a):+d}\" for a in \"ABCDE\"]))\n\n+307432586377922195\n+8720052512513840967\n+7066593843844395842\n-6025104745690603236\n-9067290596465053571"
  },
  {
    "objectID": "sha256.html#example.tex",
    "href": "sha256.html#example.tex",
    "title": "SHA256",
    "section": "Example.tex",
    "text": "Example.tex\n\nLet \\(M\\) be the size of some hash table\nTake \\(a \\in \\mathbb{N} : a &lt; M \\land \\gcd(a, M) = 1\\)\n\nThat is, two positive coprime integers.\n\nAny integer value \\(x\\) can be mapped into \\(\\mathbb{N}/(M) = \\{0,1,\\ldots, M-1\\}\\)\n\nh_a(x) = a x \\pmod{M}\n\\[\nh_a(x) = a x \\pmod{M}\n\\]"
  },
  {
    "objectID": "sha256.html#example.py",
    "href": "sha256.html#example.py",
    "title": "SHA256",
    "section": "Example.py",
    "text": "Example.py\n\nWe can express in a programming language.\nWe note that 257 == 0x101 is prime.\n\nAnd therefore \\(\\forall M : \\gcd(257,M) = 1\\)\n\n\n\nimport math\nh = lambda x, a, M : (a * x) % M\na, M = 0x05, 1 &lt;&lt; 0x08\nassert(all((not math.gcd(a, M) == 1) or h(x, a, M) in range(M) for x in range(M)))\nprint('h'+str((0xDA7A,a,M)), '=', h(0xDA7A,a,M))\n\nh(55930, 5, 256) = 98"
  },
  {
    "objectID": "sha256.html#example.c",
    "href": "sha256.html#example.c",
    "title": "SHA256",
    "section": "Example.c",
    "text": "Example.c\n\nWe note a high performance special case.\nLet \\(w\\) be the bit size used to store numbers\n\nLikely 32 == 0x20 for C unsigned\n\\(W\\) stands for word size\n\nTake \\(W = 2^w\\) and \\(M = 2^m\\)\n\nunsigned int h(unsigned int x, unsigned int a, unsigned int m) {\n    return (a * x) &gt;&gt; (sizeof(unsigned int) * 0x10 - m); \n}"
  },
  {
    "objectID": "sha256.html#collisions",
    "href": "sha256.html#collisions",
    "title": "SHA256",
    "section": "Collisions",
    "text": "Collisions\n\nA collision occurs if \\[\n\\exists x, x' : x \\neq x' \\land h(x) = h(x')\n\\]\nThat is, this assertion fails:\n\nx_0, x_1 = 1,2\nassert(((x_0 != x_1) and (h(x_0, a, M) == h(x_1, a, M))))\n\nGoal: minimize:non-crypto::avoid:crypto collisions.\n\nAchieve this via a large codomain for \\(h\\)"
  },
  {
    "objectID": "sha256.html#codomain",
    "href": "sha256.html#codomain",
    "title": "SHA256",
    "section": "Codomain:",
    "text": "Codomain:\n\n“In mathematics, a codomain or set of destination of a function is a set into which all of the output of the function is constrained to fall. It is the set \\(Y\\) in the notation \\(f: X → Y\\). The term range is sometimes ambiguously used to refer to either the codomain or the image of a function.”"
  },
  {
    "objectID": "sha256.html#test-it",
    "href": "sha256.html#test-it",
    "title": "SHA256",
    "section": "Test it:",
    "text": "Test it:\n\nh = lambda x, a, M : (a * x) % M\na, M = 0x05, 1 &lt;&lt; 0x08\nassert(set(h(x, a, M) for x in range(M)) == set(range(M)))\n\n\nAs a rule we shouldn’t try to write proofs/definitions in Python, but…\nSmall \\(M = 2^{0x08} = 256\\) means our computer can handle all possibilities."
  },
  {
    "objectID": "sha256.html#visualize",
    "href": "sha256.html#visualize",
    "title": "SHA256",
    "section": "Visualize:",
    "text": "Visualize:"
  },
  {
    "objectID": "sha256.html#cryptographic",
    "href": "sha256.html#cryptographic",
    "title": "SHA256",
    "section": "Cryptographic",
    "text": "Cryptographic\n\nBegin with SHA-2 (Secure Hash Algorithm 2).\n\nA family of cryptographic hash functions.\nBy the U.S. National Security Agency (NSA)\n\nPublished by the U.S. National Institute of Standards and Technology (NIST) in 2001."
  },
  {
    "objectID": "sha256.html#context",
    "href": "sha256.html#context",
    "title": "SHA256",
    "section": "Context",
    "text": "Context\n\nSHA-1, released in 1995, found to have significant vulnerabilities.\nGrowing concerns about the security of SHA-1 led to the development of SHA-2.\n\nSHA-3 released in 2015, not in wide use.\nFor if weakness in SHA-2 discovered.\nSHA-2 regarded as secure in 2025."
  },
  {
    "objectID": "sha256.html#family",
    "href": "sha256.html#family",
    "title": "SHA256",
    "section": "Family",
    "text": "Family\n\nSix hash functions release August 2001:\n\nSHA-224\nSHA-256\nSHA-384\nSHA-512\nSHA-512/224\nSHA-512/256"
  },
  {
    "objectID": "sha256.html#adoption-and-usage",
    "href": "sha256.html#adoption-and-usage",
    "title": "SHA256",
    "section": "Adoption and Usage",
    "text": "Adoption and Usage\n\nSHA-2 has been widely adopted in\n\nDigital signatures\nCertificate validation\nFile integrity verification.\nBlockchain:\n\n1 of ~2 core technologies of Bitcoin\nSHA-256 specifically"
  },
  {
    "objectID": "sha256.html#sha-2-pledge",
    "href": "sha256.html#sha-2-pledge",
    "title": "SHA256",
    "section": "SHA-2 Pledge",
    "text": "SHA-2 Pledge\n\nI need a verbal confirmation:\n\nEven though we will implement cryptography…\nWe assume their insecurity as we learn to:\n\nTest our code\nWrite proofs\nUse compilers\n\nWe don’t know what side channel attacks are.\n\nI say: out-of-scope."
  },
  {
    "objectID": "sha256.html#sha-256-overview",
    "href": "sha256.html#sha-256-overview",
    "title": "SHA256",
    "section": "SHA-256 Overview",
    "text": "SHA-256 Overview\n\nSHA-2 with a 256-bit output length\nAccepts bit strings of length up to \\(2^{64} - 1\\)\n\n~20 quintillion bits\n~17 million terabytes"
  },
  {
    "objectID": "sha256.html#two-stages",
    "href": "sha256.html#two-stages",
    "title": "SHA256",
    "section": "Two Stages",
    "text": "Two Stages\n\nOutput calculation has two stages:\n\nPreprocessing\nHash Computation"
  },
  {
    "objectID": "sha256.html#preprocessing",
    "href": "sha256.html#preprocessing",
    "title": "SHA256",
    "section": "Preprocessing",
    "text": "Preprocessing\n\nA 256-bit state variable \\(H^{(0)}\\) is initialized:\n\n\\[\\begin{align*}\n\\begin{split}\n   H_0^{(0)} = \\texttt{0x6A09E667}, \\quad H_1^{(0)} = \\texttt{0xBB67AE85},\\\\\n   H_2^{(0)} = \\texttt{0x3C6EF372}, \\quad H_3^{(0)} = \\texttt{0xA54FF53A},\\\\\n   H_4^{(0)} = \\texttt{0x510E527F}, \\quad H_5^{(0)} = \\texttt{0x9B05688C},\\\\\n   H_6^{(0)} = \\texttt{0x1F83D9AB}, \\quad H_7^{(0)} = \\texttt{0x5BE0CD19}.\n\\end{split}\n   \\end{align*}\\]\n\n“Fractional parts of square roots of first primes”"
  },
  {
    "objectID": "sha256.html#input-padding",
    "href": "sha256.html#input-padding",
    "title": "SHA256",
    "section": "Input Padding",
    "text": "Input Padding\n\nThe input \\(M\\) is padded to a length that is a multiple of 512.\nLet \\(M\\) be \\(l\\)-bits long.\nFind the smallest non-negative \\(k\\) such that: \\[\nk + l + 65 \\equiv 0 \\pmod{512}\n\\]"
  },
  {
    "objectID": "sha256.html#padding-content",
    "href": "sha256.html#padding-content",
    "title": "SHA256",
    "section": "Padding Content",
    "text": "Padding Content\n\nAppend \\(k + 65\\) bits to \\(M\\):\n\nA single one (1), followed by\n\\(k\\) zeros (0), followed by\nThe 64-bit representation of \\(l\\). \\[\n\\begin{align*}\n1\\underbrace{000 \\cdots 000}_{k \\textrm{ zeros}}\\underbrace{l}_{\\textrm{ 64 bits}} \\\\\n\\end{align*}\n\\]"
  },
  {
    "objectID": "sha256.html#example.py-1",
    "href": "sha256.html#example.py-1",
    "title": "SHA256",
    "section": "Example.py",
    "text": "Example.py\n\nWe can solve numerically in Python, but…\nPerhaps easier to show with strings.\n\n\nM = \"Hello there I am a message.  \" * 15\nl = len(M.encode('utf-8')) * 8\nk = 512 - (l + 65) % 512\n\"l=\", l, \"k=\", k, \"pad=\", \"0x1\" + \"0\" * (k//4) + f\"{l:016x}\" ## 64 // 4 == 16\n\n('l=', 3480, 'k=', 39, 'pad=', '0x10000000000000000000000d98')\n\n\n\nThe arithmetic form is left an exercise for the interested student.\n\nMy solution was 10-20 characters of code."
  },
  {
    "objectID": "sha256.html#hash-computation",
    "href": "sha256.html#hash-computation",
    "title": "SHA256",
    "section": "Hash Computation",
    "text": "Hash Computation\n\nPadded input is split into \\(N\\) 512-bit blocks:\n\nWe note this is 1-indexed, by convention. \\[\nM^{(1)}, M^{(2)}, \\ldots, M^{(N)}\n\\]\n\nWhen testing, expect to have only \\(M^{(1)}\\)\n\n512 is a lot of bytes to e.g. type in.\nTest more once it works."
  },
  {
    "objectID": "sha256.html#hash-type",
    "href": "sha256.html#hash-type",
    "title": "SHA256",
    "section": "Hash Type",
    "text": "Hash Type\n\nThe hash function has the following type: \\[\nf: M:\\{0,1\\}^{512} \\times H:\\{0,1\\}^{256} \\rightarrow H':\\{0,1\\}^{256}\n\\]\nGiven \\(H^{(i-1)}\\), calculate \\(H^{(i)}\\) using: \\[\nH^{(i)} = f(M^{(i)}, H^{(i-1)}), \\quad 1 \\leq i \\leq N.\n\\]\n\n1-indexed"
  },
  {
    "objectID": "sha256.html#words",
    "href": "sha256.html#words",
    "title": "SHA256",
    "section": "Words",
    "text": "Words\n\nWe specify bitwise operations over exactly 32 bit words.\nThe industry standard is to use stdint\n\n#include &lt;stdint.h&gt;\n\n/* uint32_t is \"unsigned integer of size 32 type\" */\nuint32_t rotate(uint32_t a, uint32_t b) {\n    asm(\"rorl %%cl, %0\" : \"+r\" (a) : \"c\" (b));\n    return a;\n}"
  },
  {
    "objectID": "sha256.html#operations",
    "href": "sha256.html#operations",
    "title": "SHA256",
    "section": "Operations",
    "text": "Operations\n\nBitwise logical operations\n\nUnary,\nBinary, and\nTernary, and\n\nShift/rotate operations\n\nSimple, and\nComposite"
  },
  {
    "objectID": "sha256.html#words-1",
    "href": "sha256.html#words-1",
    "title": "SHA256",
    "section": "Words",
    "text": "Words\n\nBitwise logical operations accept 1, 2, or 3 words of size 32 (uint32_t) and produce one word.\n\nTerm these words \\(U\\), \\(V\\), \\(W\\)\n\nShift/rotate operations additionally accept one natural number \\(n\\) &lt; 32.\n\nTerm this \\(n\\)"
  },
  {
    "objectID": "sha256.html#unary-bitwise",
    "href": "sha256.html#unary-bitwise",
    "title": "SHA256",
    "section": "Unary Bitwise",
    "text": "Unary Bitwise\n\nThere is only one:\n‘bitwise complement’/‘bitwise logical not’: \\[\n\\lnot U\n\\]\nExpressible with uint32_t in C:\n\n/* 32 bit bitwise complement, exact */\nuint32_t complement(uint32_t u) {\n    return ~u;\n}"
  },
  {
    "objectID": "sha256.html#binary-bitwise",
    "href": "sha256.html#binary-bitwise",
    "title": "SHA256",
    "section": "Binary Bitwise",
    "text": "Binary Bitwise\n\n\\(U \\land V\\), \\(U \\lor V\\), \\(U \\oplus V\\): AND, OR, XOR\nAs from printb/macros.\n\nuint32_t and(uint32_t u, uint32_t v) { /* bitwise and */\n    return u & v;\n}\n\nuint32_t ior(uint32_t u, uint32_t v) { /* inclusive or */\n    return u | v;\n}\n\nuint32_t xor(uint32_t u, uint32_t v) { /* exclusive or */\n    return u ^ v;\n}"
  },
  {
    "objectID": "sha256.html#addition",
    "href": "sha256.html#addition",
    "title": "SHA256",
    "section": "Addition",
    "text": "Addition\n\nC addition is a binary bitwise operation:\nEquivalent to integer sum module \\(2^{32}\\)\n\n\nfrom ctypes import c_uint ## this won't work in pypy\ndef addition(u:c_uint, v:c_uint) -&gt; c_uint:\n    return c_uint(u + v)\n\naddition(4000000000, 4000000000) , addition(4, 4)\n\n(c_ulong(3705032704), c_ulong(8))\n\n\n\nFor me, Python coerces c_uint to c_ulong.\n\nGood reason to use C"
  },
  {
    "objectID": "sha256.html#c-math",
    "href": "sha256.html#c-math",
    "title": "SHA256",
    "section": "C Math",
    "text": "C Math\n\nC addition on uint32_t is already modulo \\(2^{32}\\)\n\nWhat else would it be?\nFinite number of bits means finite values.\n\n\n\n\nbitops.c\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n\nint main() {\n    uint32_t u = 4000000000;\n    printf(\"%u + %u = %u\\n\", u, u, u+u);\n    u = 4;\n    printf(\"%u + %u = %u\\n\", u, u, u+u);\n    return 0;\n}"
  },
  {
    "objectID": "sha256.html#c-math-1",
    "href": "sha256.html#c-math-1",
    "title": "SHA256",
    "section": "C Math",
    "text": "C Math\n\nWe get the same values as the Python c_uint\nPython is written in C:\n\n\n\n/bin/sh\n\n$ gcc bitops.c --std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -o bitops\n$ ./bitops\n4000000000 + 4000000000 = 3705032704\n4 + 4 = 8\n$"
  },
  {
    "objectID": "sha256.html#ternary-bitwise",
    "href": "sha256.html#ternary-bitwise",
    "title": "SHA256",
    "section": "Ternary Bitwise",
    "text": "Ternary Bitwise\n\nCHOICE and MEDIAN, expressed logically: \\[\n\\text{CHOICE}(U, V, W) = (U \\land V) \\oplus (\\lnot U \\land W)\n\\] \\[\n\\text{MEDIAN}(U, V, W) = (U \\land V) \\oplus (U \\land W) \\oplus (V \\land W)\n\\]\nThere exist numerous formulations of median.\n\nThis one lifted from GitHub user B-Con"
  },
  {
    "objectID": "sha256.html#shiftsrotates",
    "href": "sha256.html#shiftsrotates",
    "title": "SHA256",
    "section": "Shifts/Rotates",
    "text": "Shifts/Rotates\n\nCompared to bitwise, they:\n\nStill work on a 32 bit word, but\nAlso work on a value \\(n : 0 \\leq n \\leq 31\\)\nOr,\n\nassert(n in range(32))"
  },
  {
    "objectID": "sha256.html#simple-shiftrotate",
    "href": "sha256.html#simple-shiftrotate",
    "title": "SHA256",
    "section": "Simple Shift/Rotate",
    "text": "Simple Shift/Rotate\n\nBitwise shift right &gt;&gt; / x86 shrl \\[\n\\textsf{SHR}^n(U) = \\underbrace{000 \\cdots 000}_{n \\textrm{ zeros}} u_0 u_1 \\cdots u_{30-n} u_{31-n}\n\\]\nThe ROTATE macro / x86 rorl \\[\n\\textsf{ROTR}^n(U) =  \\underbrace{u_{32-n} u_{33-n} \\cdots u_{30} u_{31}}_{n \\textrm{ bits}} u_0 u_1 \\cdots u_{30-n} u_{31-n}\n\\]"
  },
  {
    "objectID": "sha256.html#composites",
    "href": "sha256.html#composites",
    "title": "SHA256",
    "section": "Composites",
    "text": "Composites\n\nWhile not required…\n…easier to understand SHA256 with composites: \\[\n\\begin{align*}\n\\Sigma_0(U)&= \\textsf{ROTR}^{02}(U) \\oplus \\textsf{ROTR}^{13}(U) \\oplus \\textsf{ROTR}^{22}(U) \\\\\n\\Sigma_1(U)&= \\textsf{ROTR}^{06}(U) \\oplus \\textsf{ROTR}^{11}(U) \\oplus \\textsf{ROTR}^{25}(U) \\\\\n\\sigma_0(U)&= \\textsf{ROTR}^{07}(U) \\oplus \\textsf{ROTR}^{18}(U) \\oplus \\textsf{SHR}^{03}(U) \\\\\n\\sigma_1(U)&= \\textsf{ROTR}^{17}(U) \\oplus \\textsf{ROTR}^{19}(U) \\oplus \\textsf{SHR}^{10}(U)\n\\end{align*}\n\\]\nMacros and helper functions both work well here."
  },
  {
    "objectID": "sha256.html#hash-computation-1",
    "href": "sha256.html#hash-computation-1",
    "title": "SHA256",
    "section": "Hash Computation",
    "text": "Hash Computation\n\n4 steps for each 512 bit chunk.\nFirst chunk, also use pre-computed \\(H\\) values.\n\nCalled, say “initial hash values”\nSuccessive chunks use previous chunk’s hash\n\nAll chunks share pre-computed \\(K\\) values.\n\nCalled, say “round contants”\n“Fractional parts of cube roots of first primes”"
  },
  {
    "objectID": "sha256.html#parts",
    "href": "sha256.html#parts",
    "title": "SHA256",
    "section": "Parts",
    "text": "Parts\n\nPreprocess\nSet Message Schedule Array\n\n64 word array\n\nSet Working Variables\n\n8 word sized variables\n\nMain Loop\n\nWord level operations\n\nUpdate hash value"
  },
  {
    "objectID": "sha256.html#set-message-schedule-array",
    "href": "sha256.html#set-message-schedule-array",
    "title": "SHA256",
    "section": "1. Set Message Schedule Array",
    "text": "1. Set Message Schedule Array\n\n\\(M^{(i)}_j\\) is the \\(j\\)-th 0-indexed 32 bit word of the \\(i\\)-th 1-indexed 512 bit chunk of message \\(M\\)\n\nA word is 4 letters\nA chunk is short tweet (64 chars)\n\\(M\\) can be, e.g., Linux, the Iliad\n\n\n\\[\nW_j =\n\\begin{cases}\nM^{(i)}_j & 0 \\leq j \\leq 15 \\\\\n\\sigma_1(W_{j-2}) + W_{j-7} + \\sigma_0(W_{j-15}) + W_{j-16} & 16 \\leq j \\leq 63\n\\end{cases}\n\\]"
  },
  {
    "objectID": "sha256.html#set-working-variables",
    "href": "sha256.html#set-working-variables",
    "title": "SHA256",
    "section": "2. Set Working Variables",
    "text": "2. Set Working Variables\n\nInitialize eight 32-bit words based on the prior hash. \\[\n(A, B, C, D, E, F, G, H) = (H^{(i-1)}_0, \\ldots, H^{(i-1)}_7).\n\\]"
  },
  {
    "objectID": "sha256.html#main-loop",
    "href": "sha256.html#main-loop",
    "title": "SHA256",
    "section": "3. Main Loop",
    "text": "3. Main Loop\n\nIterate \\(j = 0\\) to \\(63\\):\n\nfor j in range(64):\n\nPrecompute two temporary values (or not) \\[\n\\begin{align}\n\\begin{split}\n& T_1  = H + \\Sigma_1(E) + \\textsf{CHOICE}(E,F,G) + K_j + W_j \\\\\n& T_2  = \\Sigma_0(A) + \\textsf{MEDIAN}(A,B,C) \\\\\n\\end{split}\n\\end{align}\n\\]\nUpdate the working variables \\[\n(A,B,C,D,E,F,G,H)  = (T_1+T_2, A, B, C, D+T_1, E, F, G)\n\\]"
  },
  {
    "objectID": "sha256.html#update-hash-value",
    "href": "sha256.html#update-hash-value",
    "title": "SHA256",
    "section": "4. Update hash value",
    "text": "4. Update hash value\n\nConclude the work on \\(M^{(i)}\\) by finding \\(H^{(i)}\\)\n\n\\[\nH^{(i)}_j = A + H^{(i-1)}_j, \\quad j = 0, \\ldots, 7\n\\]"
  },
  {
    "objectID": "bignum.html",
    "href": "bignum.html",
    "title": "BigNum",
    "section": "",
    "text": "Announcements\n\nWelcome to variously CS 276/CS 540\n\nThis is the original “BigNum”\nNow after the theoretical “Finite”\nLecture with exercise (instead of “pure” lab).\n\nAction Items:\n\nSHA-256 due this week.\n\n\n\n\nApocryphal Quote\n\nI cannot find it, but I believe a philosopher one jested:\n\n\nI am a weapons-grade finitist. I don’t believe in numbers larger than two.\n\n\nArrays of such numbers are sufficient for computation of arbitrary precision.\nWe can not capture the infinite, but we may model it.\n\n\n\nToday\n\nReview\n\nFinite sets, rings\n\nNew\n\nArbitrary/high precision integers\nArithmetic operations\nFunction types\n\n\n\n\nRings\n\nAs far as I know (not a mathematician) the uints and ints in C are rings\n\nThey have addition and multiplication\n\nThey aren’t fields - zero is divisible\n\nSpoiler alert, but \\(2^{\\frac{n}{2}} \\times 2^{\\frac{n}{2}} \\equiv 0 \\pmod{2^n}\\)\n\n\n\n\nRings vs Integers\n\nRings have some “goofy” features\n\n\\(a, b \\in\\) uint\\(n\\)_t \\(\\nRightarrow a + b &gt; a\\)\nSame with multiplication.\n\nLet’s look at an example.\n\n\n\nCheckers\n\n\nnum.c\n\n#include &lt;stdlib.h&gt;\n#include &lt;stdint.h&gt;\n\nint main(int argc, char **argv) {\n    uint8_t x, y;\n    x = atoi(argv[1]);\n    y = atoi(argv[2]);\n    return x + y;\n}\n\n\natoi - alphabetical to int\nFrom &lt;stdlib.h&gt; per man atoi, but might work without that.\n\n\n\nDo some additions\n$  ./a.out 100 100 ; echo $?\n200\n$ ./a.out 200 100 ; echo $?\n44\n\n44? From whence?\n\n\n\nuint8_t is finite\n&gt;&gt;&gt; 200 + 100\n300\n&gt;&gt;&gt; 2 ** 8\n256\n&gt;&gt;&gt; 300 - 256\n44\n&gt;&gt;&gt; 300 % 256\n44\n\nOperations on uint8_t values are equivalent to operations on the natural numbers modulo \\(2^8\\) \\[\n\\mathbb{N}/(2^8)\n\\]\n\n\n\n4096 bits\n\nModern security recommendations are for 4096 bit cryptographic keys.\n\n2048 is generally considered “okay” or “acceptable”\n\n\nNAME\n     ssh-keygen — OpenSSH authentication key utility\n\nSYNOPSIS\n     ssh-keygen [-q] [-a rounds] [-b bits] \n\n\nBig Values\n\nSoon, we will implement RSA\n\nWe’ll talk about what it is then.\n\nThis week, we need a way to deal with integers that big.\nWe will use modular arithmetic.\n\nFinite uint64_t models infinite \\(\\mathbb{N}\\)\n\n\n\n\nSimple Example\n\nRecall this example from a data application.\nWe had a data set for which we determined a mean height in inches.\nWe converted it to inches and feet.\n\n&gt;&gt;&gt; 69.3 // 12, 69.3 % 12\n(5.0, 9.299999999999997)\n\n\nAddition is easy\n\nWNBA MVP and Olympic Gold Medalist A’ja Wilson is 6 ft 4 in\nHow much taller is that than 5 ft 9.3 in\n\nCan convert to non-integer inches, but…\nWe already had the .299… problem\n\n\n\n\nDifference\n\nWe perform “long subtraction”\nIt’s fun!\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\n\n\n\nDifference\n\n\\(0 - 3 \\equiv 7 \\pmod{10}\\)\nTenths of inches\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nDiff\n\n\n7\n\n\n\n\n\nDifference\n\nBut wait - 3 is more than 0\nTrack via a “carry”\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nCarry\n0\n1\n0\n\n\nDiff\n\n\n7\n\n\n\n\n\nDifference\n\n\\(4 - 9 - 1 \\equiv 6 \\pmod{12}\\)\n12 in = 1 ft\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nCarry\n0\n1\n0\n\n\nDiff\n\n6\n7\n\n\n\n\n\nDifference\n\nAnother carry.\n12 in = 1 ft\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nCarry\n1\n0\n0\n\n\nDiff\n\n6\n7\n\n\n\n\n\nDifference\n\n\\(6 - 5 - 1 = 0\\)\nNonmodular - feet has no max.\n\n\n\n\n\nft\nin.\n.in\n\n\n\n\nA’ja\n6\n4\n0\n\n\nMean\n5\n9\n3\n\n\nCarry\n1\n0\n0\n\n\nDiff\n0\n6\n7\n\n\n\n\n\nConclusion\n\nIconic living legend A’ja Wilson is tall af.\nWe can do addition and substraction on larger values than UINT_MAX or ULONG_MAX by:\n\nBreaking numbers in smaller ranges\n\nA tenths digit\nA ones digit\nA twelves digit\n\n\n\n\n\nExercise\n\nMake a height adder, try man scanf\n\n\n\nhadder.c\n\n#include &lt;stdlib.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n\nint main() {\n        int buf[6];\n        printf(\"Insert 2 heights as XftY.Zin, each on their own line\\n\");\n        scanf(\"%dft%d.%din\", &buf[0], &buf[1], &buf[2]);\n        scanf(\"%dft%d.%din\", &buf[3], &buf[4], &buf[5]);\n\n        printf(\"%dft%d.%din\\n\", buf[0], buf[1], buf[2]);\n\n        return 0;\n}\n\n\n\n\nUsefulness\n\nWe can now do arithmetic correctly\n\n@Python\n\nWhat else can we do?\n\nArbitrary (not infinite) precision.\n\n\n\n\nFAQ\n\nCan we use this to add numbers bigger than \\(2^n\\) using adds over at most \\(n\\) bits at a time?\n\nSure! Change the modulos and you’re set.\n\nGet it? Because the numbers form a set?\n\n\nCan we do this for more than 3 fields?\n\nSure! Just put the middle (both consumes and produces a carry bit) in a loop!\n\n\n\n\nToday\n\n✓ Review\n\nFinite sets, rings\n\nNew\n\n✓ Arbitrary/high precision integers\nArithmetic operations\nFunction types\n\n\n\n\nEasy Mode\n\nAddition and subtraction are easy.\nFor some value of easy.\n\nCut a too-big number into chunks.\nAdd or subtract within chunks of the same index/offset/significance.\nOnly wrinkle is a carry bit.\n\nIdentical to digit-based addition.\n\nuint8_ts as digits in base 256 arithmetic\n\n\n\n\nHard Mode\n\nSome cryptographical algorithms, however, use two extremely advanced arithmetic operations:\n\nMultiplication, and\nDivision, and\nModulo\n\nFortunately this only two operations (need a combined divmod)\n\n\n\nExample\n\nImagine an engineering team lead for:\n\n14 MS-level Computer Scientists\n\n9-12 hrs/wk\n14 week contract\n\n34 BS-level Computer Scientists\n\n6-9 hrs/wk\n15.5 week contract\n\n\nHow many person hours is this?\n\n\n\nNapkin Math\n\nI’d say\n\n\\(14 \\times 12 \\times 14\\)\n\\(34 \\times 9 \\times 15.5\\)\n\nI… can’t quite do that in one fell swoop.\n\n\\(14 \\times 12\\) is trivially \\(12^2 + 24 = 168\\)\n\\(9 \\times 15.5\\) is trivially \\(155 - 15.5 = 139.5\\)\n\n\n\n\n\\(34 \\times 139.5\\)\n\nThat just isn’t easy\n(140 * 34 isn’t bad, but we need a motivating example).\nExpress digit-wise:\n\n\n\n\n\n1\n3\n9\n5\n\n\n\n\n3\n-\n-\n-\n-\n\n\n4\n-\n-\n-\n-\n\n\n\n\n\n\\(34 \\times 139.5\\)\n\nCompute all products over single-digit factors\n\n\n\n\n\n1\n3\n9\n5\n\n\n\n\n3\n3\n9\n27\n15\n\n\n4\n4\n12\n36\n20\n\n\n\n\nThese:\n\nAren’t single digit\nAren’t of the same signficance\n\n\n\n\n\\(34 \\times 139.5\\)\n\nInclude sigificance\n\n\n\n\n\n100\n30\n9\n.5\n\n\n\n\n30\n3000\n900\n270\n15\n\n\n4\n400\n120\n36\n2\n\n\n\n\n\nDear Watson\n\n\n\n\n\n\n100\n30\n9\n.5\n\n\n\n\n30\n3000\n900\n270\n15\n\n\n4\n400\n120\n36\n2\n\n\n\n\n\\[\n\\begin{align*}\n5& \\times 4  \\times 10^{-1}  &= 2&\\\\\n+5& \\times 3  \\times 10^{0}  &= 15&\\\\\n+9& \\times 4  \\times 10^{0}  &= 36&\\\\\n+9& \\times 3  \\times 10^{1}  &= 270&\\\\\n+3& \\times 4  \\times 10^{1}  &= 120&\\\\\n+3& \\times 3  \\times 10^{2}  &= 900&\\\\\n+1& \\times 4  \\times 10^{2}  &= 400&\\\\\n+1& \\times 3  \\times 10^{3}  &= 3000&\\\\\n\\end{align*}\n\\]\n\n\n\n\nExpress as\n\\[\n\\begin{align*}\n139.5& = &1 * 10^2 + &3 * 10^1 + &9 * 10^0& + 5 * 10^{-1}\\\\\n34& = &&3 * 10^1 + &4 * 10^0&\\\\\n\\end{align*}\n\\]\n\nTake \\(x = 10\\) \\[\n\\begin{align*}\n139.5& = &1 * x^2 + &3 * x + &9& + 5 * x^{-1}\\\\\n34& = &&3 * x + &4&\\\\\n\\end{align*}\n\\]\nThat is polynomial; can work with those.\n\n\n\nPolynomial\n\\[\n(x^2 + 3x + 9 + 5x^{-1})(3x + 4)\n\\]\n\\[\n(x^2 + 3x + 9 + 5x^{-1})(3x) + (x^2 + 3x + 9 + 5x^{-1})(4)\n\\]\n\\[\n(3x^3 + 9x^2 + 27x + 15) + (4x^2 + 12x + 36 + 20x^{-1})\n\\]\n\\[\n3x^3 + 13x^2 + 39x + 51 + 20x^{-1}\n\\]\n\n\nAside\n\nI think this is covered around ~8th grade\nI don’t want to assume the integrity to US public school system\n\nOr anything school system\nShout out school\n\nThe point of this class isn’t middle/high school math\n\nThat’s the point of life itself /s\n\n\n\n\nConsiderations\n\nIt is natural to express multiplication of e.g. 4096 bit integers as a polynomial over, say, 64 bit integers.\nOne teeny problem:\n\nOverflow.\n\n\n\n\nOverflow\n\nThe point of calculating this was to get things down to single digit:\n\n\\[\n3x^3 + 13x^2 + 39x + 51 + 20x^{-1}\n\\]\n\n13, 39, 51, and 20 are all not compliant (debatably 20 is okay)\nEssentially, 1-digit multiply may produce a 2-digit product.\n\n\n\nUh oh\n\n\n/bin/sh\n\n$ cat num.c\n#include &lt;stdlib.h&gt;\n#include &lt;stdint.h&gt;\n\nint main(int argc, char **argv) {\n    uint8_t x, y, z;\n    x = atoi(argv[1]);\n    y = atoi(argv[2]);\n    z = x * y;\n    return z;\n}\n$ gcc num.c ; ./a.out 30 30 ; echo $?\n132\n$ gcc num.c ; ./a.out 3 3 ; echo $?\n9\n$ python3 -c \"print(30 * 30 % 2 ** 8)\"\n132\n\n\n\nSize of ints\n\nSay we have two integers of 8 bits of precision.\nWe multiple them together.\nWhat is the largest number we can get, and\nHow many bits does it require?\n\npython3 -c \"x = 2 ** 8 - 1 ; x = x * x ; print(x.bit_length())\"\n\n16\n\n\n\nCarrys for mults\n\nWhen we are doing big multiplications:\n\nWe must multiply chunks of at most half the size of our biggest integer.\nWe must keep track of significance - their position in an imagined larger integer\nWe must perform adds over these terms, using big addition\n\n\n\n\nOne Technique\n\nI Made a pointer to a uint32_t\n\nuint32_t *alias;;\n\nSet it equal to the location of some array of uint64_t\n\nuint32_t *alias = &array;\n\nCopied elements of the “alias” into 64 bit values.\n\nuint64_t tmp = alias[5];\n\nMultiplied, tracking significance.\n\n\n\nDivision\n\nRemember long division?\n\nAlign the highest digits.\n\nI took the log base 2.\n\nDivide.\nKeep track of significance.\n\nDifference between logs.\n\nCalculate remainder.\nLoop.\n\nThe final remainder is the mod.\n\n\n\nToday\n\nReview\n\n✓ stdint\n✓ Finite sets, rings\n✓ Arbitrary/high precision integers\n\nNew\n\n✓ Arithmetic operations\nFunction types\n\n\n\n\nA 4096 bit type\n\nIt’s not too bad to pass around 4096 bits.\n\nAn array of 64 uint64_ts or 128 uint32_ts\n\nHere’s an example function declaration:\n\n\n\nbigadd\n\nuint64_t bigadd(uint64_t *in0, uint64_t *in1, uint64_t *sum);\n\n\n\nUsage\n\nBefore call this function, declare three arrays:\n\nuint64_t in0[64], in1[64], sum[64];\nbigadd(in0,in1,sum);\n\nYou can recycle the arrays, as needed.\n\nAn astute student would be able to implement “in-place add”\nSum overrights (either) operand\n\nuint64_t in0[64], in1[64], sum[64];\nbigadd(in0,in1,in0);\n\n\n\nUsage\n\nRemember this is banned:\n\nuint64_t *whatever(uint64_t *in0, uint64_t *in1) {\n    uint64_t sum[64];\n    /* much code */\n    return sum;\n}\n\nMy uint64_t value returned the carry value (it was nice to keep track of)\n\n\n\nFAQ\n\nIsn’t there a way to return the value from the function, rather than write a value to the memory location at a provided argument.\n\nYes.\nThis form of coding we use here is memory-safe\nIt was endorsed by the White House from 26 Feb 24 to 19 Jan 25\nRead more\n\n\n\n\nFAQ\n\nHow do we deal with integers that aren’t of known length.\n\nAsk me after the midterm.\nRead more\nRead more\n\n\n\n\nToday\n\n✓ Review\n\n✓ stdint\n✓ Finite sets, rings\n\n✓ New\n\n✓ Arbitrary/high precision integers\n✓ Arithmetic operations\n✓ Function types\n\n\n\n\nStinger\n/* print the big value as a string */\nvoid seebig(uint64_t *a) {\n    size_t i;\n    for (i = S-1; i &lt; S ; i--) {\n        printf(\"%016lx \", a[i]); \n        if ((i % 8 == 0 && i)) {\n            printf(\"\\n\");\n        }       \n    }\n    printf(\"\\n\\n\");\n    return;\n}"
  },
  {
    "objectID": "bigrsa.html",
    "href": "bigrsa.html",
    "title": "BigRSA",
    "section": "",
    "text": "This is cumulative homework assignment across 4096_t and RSAinC\nImplement 4096 bit RSA.\nThis is an extended homework of more than week, due after break. I recommend:\n\n\n\n\nWeek:\nTasks:\n\n\n\n\n10 Mar\n2048 bit prime generation\n\n\n17 Mar\nUnsigned big extended GCD\n\n\n24 Mar\nFinish Key Generation and File I/O\n\n\n31 Mar\nImplement BigRSA\n\n\n\n\nYou will also probably need to manage a file structure wherein 4096_t and ops_ui are includeded into your BigRSA.\nUse header files and examples from the labs."
  },
  {
    "objectID": "bigrsa.html#implement-big-primality-testing",
    "href": "bigrsa.html#implement-big-primality-testing",
    "title": "BigRSA",
    "section": "Implement Big Primality Testing",
    "text": "Implement Big Primality Testing\n\nIt turns out this is impossible. Nevertheless, we have a plan.\n\n\nImplement randomization via /dev/random\n\n/dev/random and the more prefered but less established /dev/urandom are file-like random number generations that could plausibly be cryptographically secure on your system.\nWe will not be able to implement cryptographically secure RSA, but we should follow the random number generation convention.\nBasically, we read from /dev/random as we would any other file, here is an example of reading and printing 4096 “random” bits.\n\nS is a constant defined in 4096_t\n\n\n\n\nBigRNG.c\n\n#include \"4096_t.h\"\n\nint main() {\n        uint64_t bignum[S];\n        FILE *fp = fopen(\"/dev/random\", \"r\");\n        fread(bignum, sizeof(uint64_t), S, fp);\n        fclose(fp);\n        seebig(bignum);\n        return 0;\n}\n\n\nYou will need to use randomization to select your primes.\n\n\n\nImplement Big Prime Generation\n\nUse:\n\nlibgmp\n/dev/random\n\nBasically, get this to work.\n\nIt seemed fine for me.\n-lgmp\n\n\n\n\nBigRNG.c\n\nvoid prigmp(uint64_t *big, uint8_t words) {\n    /* populate from buffer */\n    mpz_t m;\n    FILE *fp = fopen(\"/dev/random\", \"r\");\n    memset(big, 0, BYTES);\n    fread(big, sizeof(uint64_t), words, fp);\n    fclose(fp);\n    mpz_init(m);\n    mpz_import(m, S, -1, sizeof(uint64_t), 0, 0, big);\n    mpz_nextprime(m, m);\n    mpz_export(big, NULL, -1, sizeof(uint64_t), 0, 0, m);\n    mpz_clear(m);\n    return;\n}"
  },
  {
    "objectID": "bigrsa.html#implement-randomization-via-devrandom",
    "href": "bigrsa.html#implement-randomization-via-devrandom",
    "title": "BigRSA",
    "section": "Implement randomization via /dev/random",
    "text": "Implement randomization via /dev/random\n\n/dev/random and the more prefered but less established /dev/urandom are file-like random number generations that could plausibly be cryptographically secure on your system.\nWe will not be able to implement cryptographically secure RSA, but we should follow the random number generation convention.\nBasically, we read from /dev/random as we would any other file, here is an example of reading and printing 4096 “random” bits.\n\nS is a constant defined in 4096_t\n\n\n\n\nBigRNG.c\n\n#include \"4096_t.h\"\n\nint main() {\n        uint64_t bignum[S];\n        FILE *fp = fopen(\"/dev/random\", \"r\");\n        fread(bignum, sizeof(uint64_t), S, fp);\n        fclose(fp);\n        seebig(bignum);\n        return 0;\n}\n\n\nYou will need to use randomization to select your primes.\n\n\nImplement Big Prime Generation\n\nUse:\n\nYour primality tester\nYour randomizer\n\nGenerate prime numbers of about 2048 bits in size.\n\nMultiply them together to get an \\(n\\) of about 4096 bits in size.\n\n\n\n\nNote\n\nEngineering high performance on this task is out-of-scope.\nIt is sufficient to have plausibly tested code that could generate a prime eventually.\nThen validate the rest of “bigrsa” over known primes.\n\n\n\nBigRNG.c\n\n#include \"4096_t.h\"\n\nint main() {\n        uint64_t bignum[S];\n        FILE *fp = fopen(\"/dev/random\", \"r\");\n        fread(bignum, sizeof(uint64_t), S, fp);\n        fclose(fp);\n        seebig(bignum);\n        return 0;\n}"
  },
  {
    "objectID": "bigrsa.html#implement-biggcd",
    "href": "bigrsa.html#implement-biggcd",
    "title": "BigRSA",
    "section": "Implement BigGCD",
    "text": "Implement BigGCD\n\nModifying the extended Euclidean algorithm / extended gcd for use with the 4096_t ints.\nI had to do the following:\n\nChange all arithmetic operations from using infix operators like \\(+\\) or \\(/\\).\nModifying the Euclidean algorithm to use only positive values.\nTest extensively.\n\nYou can also implement 4096_t to accomodate negative values (which I did not do).\n\nI instead created different local values with my EEA function that tracked whether everything was positive or negative.\nThen wrote wrapper functions around the “big” operations that tracked the sign values."
  },
  {
    "objectID": "bigrsa.html#generate-keys",
    "href": "bigrsa.html#generate-keys",
    "title": "BigRSA",
    "section": "Generate Keys",
    "text": "Generate Keys\n\nWrite a 4096 bit .bad and .pub file.\nImplement in a .c file called “bigkey.c”\n\nIt should behave identically to “keygen.c”, but generate 4096 bit keys.\nThe 4096 bit refers to how large the \\(n\\) value should be\nE.g. the \\(e\\) value may still be (decimal) 65537\n\nThe KeyGen description from “RSAinC” in provided below, as reference:\n\n\nA Private Key in 3 Parts\n\nWe recall that the private key minimally contains:\n\nn, a modular base\ne, an encryptor, and\nd, a descryptor.\n\nBased on the KeyGen lab, it should be uncomplicated to calculate these values for 64 bit keys.\nWe will use .bad instead of .pem and insecurely store these values in plaintext.\nWe will then make executables to generate .bad and encrypt content provided a .bad\n\nWe name a .bad so helpfully we don’t use it by accident.\n\nWe will naively print 3 lines of hexademical values, n, e, then d.\nWe will write them to a 5-line file as follows:\n\nThe first line is the precise header text.\nThe second line is the n value in hexadecimal.\nThe third line is the e value, which is 10001.\nThe fourth line is the d value, which should be kept secret.\nThe fifth and final line is the precise footer text.\n\n\n\n\nunsafe.bad\n\n-----BEGIN UNSAFE PRIVATE KEY-----\n95a61f99198bd8e9\n10001\nfbea5e6a3ed31e8f\n-----END UNSAFE PRIVATE KEY-----\n\n\n\nA Public Key in 2 Parts\n\nWe recall that the public key contains, and should only contain:\n\nn, a modular base, and\ne, an encryptor\n\nBased on the KeyGen lab, we already have the ability to write these values to file.\nWe will use .pub instead of .pem or .bad\n\nNot a huge deal how these are stored, actually.\nThe key itself though, is still unsafe to use.\n\nWe will naively print 2 lines of hexademical values, n, then e.\nWe will right them to a file prefixed and suffixed as follows:\n\n\n\nunsafe.pub\n\n-----BEGIN UNSAFE PUBLIC KEY-----\n95a61f99198bd8e9\n10001\n-----END UNSAFE PUBLIC KEY-----"
  },
  {
    "objectID": "bigrsa.html#implement-end-to-end-4096-bit-rsa",
    "href": "bigrsa.html#implement-end-to-end-4096-bit-rsa",
    "title": "BigRSA",
    "section": "Implement End-to-end 4096 bit RSA",
    "text": "Implement End-to-end 4096 bit RSA\n\nDo so in a novel file, bigrsa.c, which should:\n\nAccept 3 command line arguments:\n\nA flag -d or -e for decrypt or encrypt\nThe file name of an input file.\nThe file name of an output file.\n\nIt should:\n\nRead the content of the input file.\nEncrypt or decrypt, as specified, the file contents.\n\nIt should read n and d from “unsafe.bad” to decrypt.\nIt should read n and e from “unsafe.pub” to encrypt.\n\nWrite the encrypted or decrypted content to the output file.\n\n\nYour BigRSA should function over either “keygen.c” 32 bit keys or “bigkey.c” 4096 bit keys."
  },
  {
    "objectID": "bigrsa.html#owning-my-failures.",
    "href": "bigrsa.html#owning-my-failures.",
    "title": "BigRSA",
    "section": "Owning my failures.",
    "text": "Owning my failures.\n\nWith my apologies, this is the first homework for which I was unable to complete a reference solution of which I am proud prior to releasing the assignment.\nAs the testers are developed as I do the assignment, that means this assignment releases with no provided tester.\nIn the interim, the “RSAinC” tests all features of “BigRSA” except ensuring that much larger chunks of information (than single characters) may be amicably encrypted.\nAdapting the RSAinC tester to work on the “15chars.txt” and “lipsum.txt” inputs to SHA256 will be sufficient, and I hope to have a grader soon.\n\n\n\n\n\n\n\nRecognition of Student Achievement\n\n\n\n\nIf you believe you have a statisfying RSA implement prior to the official release of a tester, any errors I find within the tester will be considered my errors, not yours.\nAn astute student may be able to develop a high quality tester before me, and will be showered in various praises and accolades in accordance with this achievement."
  },
  {
    "objectID": "bigrsa.html#a-note",
    "href": "bigrsa.html#a-note",
    "title": "BigRSA",
    "section": "A Note",
    "text": "A Note\n\nBe advised that the square of a 4096 bit value requires 8198 bits to specify.\nIt is reasonable to test of 512 (openssl minimum) or 1024 (ssh-keygen minumum size)"
  },
  {
    "objectID": "fermat.html",
    "href": "fermat.html",
    "title": "Fermat",
    "section": "",
    "text": "Announcements\n\nWelcome to variously CS 276/CS 540\n\nWe introduce RSA, and\nWhy it makes sense, courtesy Fermat\n\nAction Items:\n\n4096_t due this week\nRSAinC due next week\n\n\n\n\nToday\n\nNew\n\nPublic Key Cryptography\nFermat’s little theorem\nRSA\n\n\n\n\nPublic Key Cryptography\n\n\nMotivating Example\n\nCanonical Example is Snowden x Greenwald 2013\n\nSnowden wished to communicate a secret to Greenwald\nSnowden and Greenwald had never met\nSnowden could not transmit the secret in plain text\n\nVs enigma, no prior agreement on how to encrypt/decrypt\n\n\n\nReads Cryptobook\n\nA key exchange proto- col \\(P\\) is a pair of probabilistic machines \\((A, B)\\) that take turns in sending messages to each other. At the end of the protocol, when both machines terminate, they both obtain the same value \\(k\\). A protocol transcript \\(T_P\\) is the sequence of messages exchanged between the parties in one exe- cution of the protocol.\n\n\n\nReads Cryptobook\n\nSince \\(A\\) and \\(B\\) are probabilistic machines, we obtain a different transcript every time we run the protocol. Formally, the transcript \\(T_P\\) of protocol \\(P\\) is a random variable, which is a function of the random bits generated by \\(A\\) and \\(B\\). The eavesdropping adversary \\(E\\) sees the entire transcript \\(T_P\\) and its goal is to figure out the secret \\(k\\).\n\n\n\nSet the Stage\n\nSnowden has e.g. files on a harddrive\n\nThe files contain keywords that cannot be safely transmitted over US-based internet connections.\nSnowden is based in Hawai’i with no access to non-US-based connections.\nSnowden needs to encrypt the files in such as a way that only a trusted destination may read them.\n\n\n\n\nFirst Contact\n\nSnowden contacts Greenwald to agree to use a secure messaging protocol\n\nUse of such protocols is relatively non-suspicious, used for banking etc.\nIt was enough to raise alarms for Snowden, but not quickly enough to stop him.\n\nGreenwald agrees to a recommended protocol\n\n\n\nInitialization\n\nGreenwald generates a combination of numerical values on a local computing device.\n\nOne of these is the public-key, which Greenwalk may circulate broadly.\n\nWe see an example of such a technology on the next slide.\n\n\n\nSecureDrop\n\nEmbed doesn’t work for what are likely obvious reasons:\nLink\n\n\n\n\n\nSafety Note\n\nProbably dropping to The Intercept is not recommended.\nReality Winner is currently incarcerated due to a leak fumbled by The Intercept\nRead more\n\n\n\nStep 2\n\nGreenwald & co. hold in reserve a private-key\nThey defend it like lives depend on it, as they did for Winner and Snowden.\nSo: not stored in plaintext on a hard-drive\nSo: if on a hard-drive, hard-drive is in a secure site from e.g. federal law enforcement.\n\n\n\nStep 3\n\nSnowden, and hopefully enough others to avoid suspicion, use the public key to encrypt their payload.\nIn addition to e.g. top secret documents, concerned community members could send in less-secret materials such as analysis of policing data with which they would rather not be affiliated.\nJournalists sift through the inputs.\n\n\n\nIt’s that simple\n\nOkay but like how do we do that:\n\nAny eaves-dropping adversary can see the public key.\nOne-to-one communication of a key is already dangerous\nAll this encryption/decryption needs to be managable by e.g. non-computing specialized journalists.\n\n\n\n\nToday\n\nNew\n\n✓ Public Key Cryptography\nFermat’s little theorem\nRSA\n\n\n\n\nFermat’s Little Theorem\n\n\nNumbers\n\nWe have already learned from SHA and others, that if ‘its in’ a computer we can say it’s a number.\nWe have already learned, from 4096_t and others, that numbers of arbitrarily large sizes can undertake operations in a computer.\nWe find a numerical operation that scrambles bits given a public key that is reversible only with a private key.\n\n\n\nTheorem\n\\[\n\\exists e, d, p, q \\in \\mathbb{N} : \\forall m \\in \\mathbb{N} : (m^e)^d \\equiv m \\pmod{pq}\n\\]\n\n\\(m\\) : message, such as top secret documents or your credit card number.\n\\(e\\) : encryptor, the public key, that Greenwald or bandcamp post pubicly\n\\(d\\) : decryptor, the private key, that Greenwald stores in a bombproof safe or a dubiously secure AWS instance.\n\n\n\nStrategy\n\nWe show Fermat’s little theorem.\n\n\\[\n\\begin{align}\n\\forall a \\in \\mathbb{N}, p \\in \\mathbb{P} : \\gcd(p,a) = 1 \\implies a^{p-1} \\equiv 1 \\pmod{p} \\\\\n\\end{align}\n\\]\n\nThat is, there’s a prime you can raise a number to in order to get 1 mod that prime.\n\n\n\nProof\n\nThis is called “combinatorics”\n\nLook, I thought it was gonna be a CS class too.\n\nWe go live to a proof I never learned but love, “counting necklaces”\n\nWikipedia is my legal guardian.\n\n\n\n\nNecklaces\n\nSimplest known proof.\nCombinatorial proof.\nAdapted from Golomb’s proof.\n\nGolomb is an electrical engineer who allegedly invented Tetris\nA lot of people allegedly did that though.\n\n\n\n\nSimplification\n\nAssume: \\[\n0 \\leq a \\leq p - 1\n\\]\nConsequence of modular arithmetic. \\[\na^p \\pmod{p} \\lt p.\n\\]\n\n\n\nSimplification\n\nWe note the following expressions are logicially equivalent.\n\n\\[\na^{p-1} \\equiv 1 \\pmod{p}\n\\]\n\nMultiply by \\(a\\)\n\n\\[\na^p \\equiv a \\pmod{p}\n\\]\n\n\nStrings\n\nConsider strings/necklaces of length \\(p\\).\nAlphabet with \\(a\\) symbols.\n\nJeweler with \\(a\\) gemstones\n\nTotal number of strings is \\(a^p\\).\nTake \\(p = 5, a = 2\\) say “amethyst” and “beryl”\n\nnecklaces = [\n    \"AAAAA\", \"AAAAB\", \"AAABA\", \"AAABB\", \"AABAA\", \"AABAB\", \"AABBA\", \"AABBB\",\n    \"ABAAA\", \"ABAAB\", \"ABABA\", \"ABABB\", \"ABBAA\", \"ABBAB\", \"ABBBA\", \"ABBBB\",\n    \"BAAAA\", \"BAAAB\", \"BAABA\", \"BAABB\", \"BABAA\", \"BABAB\", \"BABBA\", \"BABBB\",\n    \"BBAAA\", \"BBAAB\", \"BBABA\", \"BBABB\", \"BBBAA\", \"BBBAB\", \"BBBBA\", \"BBBBB\"\n]\n\n\nNecklaces\n\nStrings as necklaces.\nRegard rotationally related necklaces as friends.\n\ndef friends(n, m):\n  return any([n == m[i:] + m[:i] for i in range(len(m))])\n\nassert(friends(\"AAABB\", \"BBAAA\"))\n\n\nFriends 5gether\n\nGet it? Not 2gether?\n\nfriends = [\n    [\"AAAAB\", \"AAABA\", \"AABAA\", \"ABAAA\", \"BAAAA\"],\n    [\"AAABB\", \"AABBA\", \"ABBAA\", \"BBAAA\", \"BAAAB\"],\n    [\"AABAB\", \"ABABA\", \"BABAA\", \"ABAAB\", \"BAABA\"],\n    [\"AABBB\", \"ABBBA\", \"BBBAA\", \"BBAAB\", \"BAABB\"],\n    [\"ABABB\", \"BABBA\", \"ABBAB\", \"BBABA\", \"BABAB\"],\n    [\"ABBBB\", \"BBBBA\", \"BBBAB\", \"BBABB\", \"BABBB\"],\n    [\"AAAAA\"],\n    [\"BBBBB\"]\n]\n\n\nAside\n\nWe note this suffices as a proof that:\n\n\\[\n2^5 = 32 \\equiv 2 \\pmod{5}\n\\]\n\n\nCounting Friends\n\nWe note:\n\nThere are exactly the same number of unique rotations as the length of the necklace\n\nAfter that we repeat.\nSo… \\(p \\equiv 0 \\pmod{p}\\) and \\(p\\) is length.\n\nUnless there is only one symbol, then exactly one rotation.\n\nThere are exactly \\(a\\) unique symbols, so\nExactly \\(a\\) strings of this form.\n\n\n\n\n\nStrategy\n\nWe show Fermat’s little theorem.\n\n\\[\n\\begin{align}\n\\forall a \\in \\mathbb{N}, p \\in \\mathbb{P} : \\gcd(p,a) = 1 \\implies a^{p-1} \\equiv 1 \\pmod{p} \\\\\n\\end{align}\n\\]\n\nProof\n\nnofriends = [\n    [\"AAAAA\"],\n    [\"BBBBB\"]\n]\n\n\nToday\n\nNew\n\n✓ Public Key Cryptography\n✓ Fermat’s little theorem\nRSA\n\n\n\n\nNew Goal\n\nWe want: \\[\na^p \\equiv a \\pmod{p} \\implies\n\\] \\[\n\\exists e, d, p, q \\in \\mathbb{N} : \\forall m \\in \\mathbb{N} : (m^e)^d \\equiv m \\pmod{pq}\n\\]\nWe can restrict \\(e,d,p,q\\) \\[\n\\exists e, d\\in \\mathbb{N},  p, q \\in \\mathbb{P}: \\forall m \\in \\mathbb{N} : (m^e)^d \\equiv m \\pmod{pq}\n\\]\n\n\n\nInsight\n\nWe use something called the “Carmichael function” denoted, confusingly, as \\(\\lambda\\):\n\n\\[\n\\lambda(n) = \\text{min}(\\{m : \\forall a : gcd(a,n) = 1 : a^m \\equiv 1 \\pmod{n}\\})\n\\]\n\nSay, \\(\\lambda(n)\\) is the smallest number that coprimes to \\(n\\) are equivalent to zero mod \\(n\\).\nEasy for prime \\(p\\), its \\(\\lambda(p) = p - 1\\).\n\nJust try 5, it’s not too bad.\n\n\n\n\nRSA\n\nChoose two big primes \\(p\\), \\(q\\)\nFind \\(n = pq\\)\nFind \\(\\lambda(n)\\)\nFind \\(e : e \\lt \\lambda(n) \\land \\gcd(e, \\lambda (n)) = 1\\)\nFind \\(d : d \\equiv e^{-1} \\pmod{\\lambda (n)}\\)\n\n\n\n1. \\(p\\), \\(q\\)\n\nDo 4096_t and use, probably, 6k+1 or a performance optimization.\n\n\n# this will still be slow with big numbers\ndef find_large_prime(k):\n    candidate = 6 * k + 1\n    # you need a prime tester\n    while not is_prime(candidate):\n        candidate += 6\n    return candidate\n\n\nLibGMP provides gmp_nextprime\n\n\n\n2. \\(n\\)\nn = p * q;\n\n\n3. \\(\\lambda(n)\\)\n\nThis one is kept secret by the way.\nIt so happens: \\[\n\\forall p,q \\in \\mathbb{P} : \\lambda(pq) = \\text{lcm}(p-1, q-1)\n\\]\nThere’s fast ways to this, but anything goes this week.\n\n\n\nAside: lcm\n\nGitHub Copilot provides:\n\n\ndef gcd(a, b):\n    \"\"\"Calculate the Greatest Common Divisor of a and b.\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"Calculate the Least Common Multiple of a and b.\"\"\"\n    return a * b // gcd(a, b)\n\n\n\n4. \\(e\\)\n\nFind \\(e : e \\lt \\lambda(n) \\land \\gcd(e, \\lambda (n)) = 1\\)\nYou know what is comprime with whatever \\(\\lambda (n)\\) is?\nA prime number.\n\ne = 65537; // 2 ^ 16 + 1\n\n\nAside: Hamming weight\n\nWhat is 65537 in binary?\nIs multiplying hard?\nIs bit-shifting hard?\nCan we combine bit-shifts to multiple?\nIf we did that, what numbers would be easiest to multiply by?\n\n\n\n5. \\(d\\)\n\nThis one is very secret!\nFind \\(d : d \\equiv e^{-1} \\pmod{\\lambda (n)}\\)\nThere’s a good way to do this, or…\nFind \\(de \\equiv 1 \\pmod{\\lambda (n)}\\)\n\nJust start at \\(d = 1\\) and go up until you find it.\nIt’ll be less than \\(\\lambda (n)\\)\n\n\n\n\nToday\n\nNew\n\n✓ Public Key Cryptography\n✓ Fermat’s little theorem\n✓ RSA\n\n\n\n\nUsing RSA\n\n\nLet’s make a secret\n\ns = \"C\" # a random string\n\n\n\nPrime checker\n\nis_prime = lambda n : any([n % i for i in range(2, int(n **.5))])\nis_prime(60), is_prime(61)\n\n(False, True)\n\n\n\n\nTwo primes\n\nhide_p = lambda: find_large_prime(10)\nhide_q = lambda: find_large_prime(15)\nn = hide_p() * hide_q()\nn\n\n5551\n\n\n\n\nConfusingly Named\n\nhide_λ = lambda: lcm(hide_p() - 1,  hide_q() - 1)\n\n\n\nPublic Key\n\ne = 65537\n\n\n\n\\(d\\) (decryptor)\n\ndef find_d():\n  d = 1\n  while 1 != (d * e % hide_λ()):\n    d += 1\n  return d\n\n\n\nThe Process\n\nEncrypt our message.\n\n\nm = ord(s) # to number\nc = m ** e\nm, c, c % n\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nFile ~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\IPython\\core\\formatters.py:711, in PlainTextFormatter.__call__(self, obj)\n    704 stream = StringIO()\n    705 printer = pretty.RepresentationPrinter(stream, self.verbose,\n    706     self.max_width, self.newline,\n    707     max_seq_length=self.max_seq_length,\n    708     singleton_pprinters=self.singleton_printers,\n    709     type_pprinters=self.type_printers,\n    710     deferred_pprinters=self.deferred_printers)\n--&gt; 711 printer.pretty(obj)\n    712 printer.flush()\n    713 return stream.getvalue()\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\IPython\\lib\\pretty.py:394, in RepresentationPrinter.pretty(self, obj)\n    391 for cls in _get_mro(obj_class):\n    392     if cls in self.type_pprinters:\n    393         # printer registered in self.type_pprinters\n--&gt; 394         return self.type_pprinters[cls](obj, self, cycle)\n    395     else:\n    396         # deferred printer\n    397         printer = self._in_deferred_types(cls)\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\IPython\\lib\\pretty.py:649, in _seq_pprinter_factory.&lt;locals&gt;.inner(obj, p, cycle)\n    647         p.text(',')\n    648         p.breakable()\n--&gt; 649     p.pretty(x)\n    650 if len(obj) == 1 and isinstance(obj, tuple):\n    651     # Special case for 1-item tuples.\n    652     p.text(',')\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\IPython\\lib\\pretty.py:394, in RepresentationPrinter.pretty(self, obj)\n    391 for cls in _get_mro(obj_class):\n    392     if cls in self.type_pprinters:\n    393         # printer registered in self.type_pprinters\n--&gt; 394         return self.type_pprinters[cls](obj, self, cycle)\n    395     else:\n    396         # deferred printer\n    397         printer = self._in_deferred_types(cls)\n\nFile ~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\IPython\\lib\\pretty.py:787, in _repr_pprint(obj, p, cycle)\n    785 \"\"\"A pprint that just redirects to the normal repr function.\"\"\"\n    786 # Find newlines and replace them with p.break_()\n--&gt; 787 output = repr(obj)\n    788 lines = output.splitlines()\n    789 with p.group():\n\nValueError: Exceeds the limit (4300 digits) for integer string conversion; use sys.set_int_max_str_digits() to increase the limit\n\n\n\n\n\nToo Big\n\nHaha Python can’t handle big numbers.\nNot to worry, we’re working in modular arithmetic.\n\n\ndef modexp(m, e, n):\n  if e == 0:\n      return 1\n  if e == 1:\n      return m % n\n  if e % 2:\n      return (m * modexp(m*m % n, e//2, n)) % n\n  return  modexp(m*m % n, e//2, n) % n\n\n\n\nEncrypt\n\nEncrypt our message.\n\n\nm = ord(s) # to number\nc = modexp(m, e, n)\nm, c\n\n(67, 4972)\n\n\n\n\nDecrypt\n\nDecrypt our message.\n\n\nnew_m = modexp(c % n, find_d(), n)\nnew_m, m\n\n(67, 67)\n\n\n\n\nIs it good?\n\nchr(modexp(modexp(ord(\"C\"), e, n), find_d(), n))\n\n'C'\n\n\n\n\nAll\ndef find_large_prime(k):\n    is_prime = lambda n : any([n % i for i in range(2, int(n **.5))])\n    candidate = 6 * k + 1\n    # you need a prime tester\n    while not is_prime(candidate):\n        candidate += 6\n    return candidate\n\ndef lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return a * b // gcd(a, b)\n\ns = \"C\" # a random string\nm = ord(s) # to number\n\nhide_p = lambda: find_large_prime(10)\nhide_q = lambda: find_large_prime(15)\nn = hide_p() * hide_q()\n\nhide_λ = lambda: lcm(hide_p() - 1,  hide_q() - 1)\n\ne = 65537 # encryptor\n\ndef find_d():\n    d = 1\n    while 1 != (d * e % hide_λ()):\n        d += 1\n    return d\n\ndef modexp(m, e, n):\n    if e == 0:\n        return 1\n    if e == 1:\n        return m % n\n    if e % 2:\n        return (m * modexp(m*m % n, e//2, n)) % n\n    return  modexp(m*m % n, e//2, n) % n\n\nc = modexp(m, e, n) # ciphertext\n\nnew_m = modexp(c % n, find_d(), n)\n\nprint(chr(modexp(modexp(ord(\"C\"), e, n), find_d(), n)))"
  },
  {
    "objectID": "4bytes.html",
    "href": "4bytes.html",
    "title": "4bytes",
    "section": "",
    "text": "YT"
  },
  {
    "objectID": "4bytes.html#basis",
    "href": "4bytes.html#basis",
    "title": "4bytes",
    "section": "Basis",
    "text": "Basis\n\nSo how does RSA work.\nWe recall: \\[\nm^{ed} \\equiv m \\pmod{n}\n\\]\nWhat operation do we use to raise numerical value “m”\n\n“You can represent any message with numerical value.”\nWell, any value that can be represented in a computer.\nWe cannot represent the numerical value of \\(pi\\) because it is transcendental.\nIt has no method for finite expression in any language suitable for usage within computational arithmetic as implement by sequential and combinational logic over resistors, inductors, transitors and capacitors.\n\nIn RSAinC what did we use instead of the integers?\n\nWe use a subset of the integer that ranges up to \\(2^64 - 1\\) from \\(0\\).\n\n\\(\\exists\\) finite encodings of messages.\n\\(\\exists\\) infinite many sentences in English.\n\nEnglish is a recursively enumerable language [Chomsky 1967]\n\nHow many unique sentence can be expressed with 64 bits?\n\nWe agree on some encoding, and then may express \\(~2^{64}\\) sentences."
  },
  {
    "objectID": "4bytes.html#under-congruence",
    "href": "4bytes.html#under-congruence",
    "title": "4bytes",
    "section": "Under Congruence",
    "text": "Under Congruence\n\nGiven some \\(n = p * q : p, q \\in \\mathbb{P}\\), taking \\(m^{ed} \\mod{n}\\) is at most \\(n\\) therefore there are at most \\(n\\) possible messages that may be encoded under this key."
  },
  {
    "objectID": "4bytes.html#separately",
    "href": "4bytes.html#separately",
    "title": "4bytes",
    "section": "Separately",
    "text": "Separately\n\nWe are not working solely with respect to \\(n\\).\nWe are also working within uint64_t\nWe cannot multiple together numbers larger than 1 &lt;&lt; 32 under uint64_t without incurring an overflow.\n\nThis overflow is predictable results in a loss of precise encryption.\n\n\n\n\n1bytes.c\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n\n\nint main() {\n        uint8_t a, b;\n        a = 20;\n        b = a * a;\n        printf(\"{a=%d}^2 -&gt; b=%d under uint8_t.\\n\", a, b);\n        a = 12;\n        b = a * a;\n        printf(\"{a=%d}^2 -&gt; b=%d under uint8_t.\\n\", a, b);\n        return 0;\n}\n\n\nWe see that:\n\n\\[\n20^2 \\equiv 12^2 \\pmod{2^8}\n\\]\n\nClosing thoughts\n\nWe recall the subject name “Computer Science”\n\\(\\exists\\) naturalistic causes for all results in computing (within reason)\n\nThese are frequently multiply specifiable in:\n\nFormal mathematics, e.g. LaTeX\nLinguistics, a field with which I am not familiar with notational conventions\nPhilosophy, using formal logic, using a whiteboard.\nProgramming != Computer Science, using programming languages such as Python.\n\n\n\n\nassert(12 ** 2 % 1 &lt;&lt; 8 == 20 ** 2 % 1 &lt;&lt; 8)\n\n\nWe use finite transitors storing electrons, which correspond to bits.\nThis corresponds to finite expressions in some language.\nWe also decode to the shortest expression which is equivalent under the modular squaring operation.\n\n\n\nFinal Thoughts\n\nWe cannot uniquely square values larger than 32 bits.\nWe cannot store more than 4 ascii/utf-8 chars in 32 bits.\nWe have a message length cap of the lesser of:\n\nThe log base 2 of \\(n\\), the product of primes.\n\n\\(\\log_2{n}\\), the bit length of \\(n\\).\n\n\\(2^{32}\\)"
  },
  {
    "objectID": "bigrsa.html#a-reference-solution",
    "href": "bigrsa.html#a-reference-solution",
    "title": "BigRSA",
    "section": "A Reference Solution",
    "text": "A Reference Solution\n\nAfter careful reflection, the weight and challenge of this assignment made a single, in-container script insufficient, in my view, for testing.\nIn lieu, I am providing a full reference implementation, with a few caveats:\n\nI have maintained 4096_t solutions as closed source.\n\nInstead, I have implemented an interface to libgmp mpz_t numbers in biggmp.c\nIf you are stuck on 4096_t, you should use this as well.\n\nI am trusting you to either look at, or not look at, my code, based on what works best for your learning.\n\nIt is provided as is, and likely has few bugs, but probably not that few.\n\nI am not requiring you to have any particular interfacing, though I am providing one as an example."
  },
  {
    "objectID": "bigrsa.html#a-perfect-system",
    "href": "bigrsa.html#a-perfect-system",
    "title": "BigRSA",
    "section": "A Perfect System",
    "text": "A Perfect System\n\nA perfect project will:\n\nUse a ‘bigkey’ executable once to perform key generation:\n\nWrite keys to two files, one public and one private.\n\nUse a ‘bigrsa’ executable twice to perform “round trip” encryption on a greater than 64 bit data file.\n\nWrite more than 64 bits to a data file.\n\nIt is easier to do a precise multiple of 64\n\nEncrypt this file and store the ciphertext as a new file.\nDecrypt the cipher text file.\nTake a diff of the input file and the decrypted file.\n\nIf the return code of diff $? is 0, the project is a success."
  },
  {
    "objectID": "bigrsa.html#an-explanation",
    "href": "bigrsa.html#an-explanation",
    "title": "BigRSA",
    "section": "An explanation",
    "text": "An explanation\n\nWhy this implementation?\n\nI could not find a way I liked to specify:\n\nStoring keys\nStory cipher texts\nSetting key lengths\n\nI felt any specification was unfairly restrictive."
  },
  {
    "objectID": "bigrsa.html#how-to-use-the-reference-repository",
    "href": "bigrsa.html#how-to-use-the-reference-repository",
    "title": "BigRSA",
    "section": "How to use the reference repository",
    "text": "How to use the reference repository\n\nEither clone the repository and include your own bigrsa and bigkey or,\nAdd the relevant files to your crypto repository.\nStudy the Makefile closely, and use this reference material or #help-line if you are confused.\n\nMy favorite Makefile tutorial\n\nYou are not required to use GitHub actions (or containers, conspiciously absent) but may wish to do so.\nYou don’t need to think about clang vs gcc, but I wanted to show you clang and Makefile variables."
  },
  {
    "objectID": "bigrsa.html#the-repository",
    "href": "bigrsa.html#the-repository",
    "title": "BigRSA",
    "section": "The Repository",
    "text": "The Repository\n\n\n\n\n\n\nExpand for Reference Solution\n\n\n\n\n\n\nThe repository is publicly visible at github.com/cd-c89/refrsa"
  },
  {
    "objectID": "stream.html#graphically",
    "href": "stream.html#graphically",
    "title": "Stream",
    "section": "Graphically",
    "text": "Graphically\n\n\n\n\n\n\n\nfinite_automata\n\n\ncluster_X\n\nA\n\n\ncluster_Y\n\nB\n\n\n\n1\n\n1\n\n\n\nw\n\nw\n\n\n\n1-&gt;w\n\n\n\n\n\n2\n\n2\n\n\n\nx\n\nx\n\n\n\n2-&gt;x\n\n\n\n\n\n3\n\n3\n\n\n\ny\n\ny\n\n\n\n3-&gt;y\n\n\n\n\n\n4\n\n4\n\n\n\nz\n\nz\n\n\n\n4-&gt;z"
  },
  {
    "objectID": "stream.html#section",
    "href": "stream.html#section",
    "title": "Stream",
    "section": "",
    "text": "Bijective\n\n\n\n\n\n\n\nfinite_automata\n\n\ncluster_X\n\nA\n\n\ncluster_Y\n\nB\n\n\n\n1\n\n1\n\n\n\nw\n\nw\n\n\n\n1-&gt;w\n\n\n\n\n\n2\n\n2\n\n\n\nx\n\nx\n\n\n\n2-&gt;x\n\n\n\n\n\n3\n\n3\n\n\n\ny\n\ny\n\n\n\n3-&gt;y\n\n\n\n\n\n4\n\n4\n\n\n\nz\n\nz\n\n\n\n4-&gt;z\n\n\n\n\n\n\n\n\n\n\n\n\nInjective\n\n\n\n\n\n\n\nfinite_automata\n\n\ncluster_X\n\nA\n\n\ncluster_Y\n\nB\n\n\n\n1\n\n1\n\n\n\nw\n\nw\n\n\n\n1-&gt;w\n\n\n\n\n\n2\n\n2\n\n\n\nx\n\nx\n\n\n\n2-&gt;x\n\n\n\n\n\n3\n\n3\n\n\n\nz\n\nz\n\n\n\n3-&gt;z\n\n\n\n\n\ny\n\ny\n\n\n\n\n\n\n\n\n\n\n\n\nSurjective\n\n\n\n\n\n\n\nfinite_automata\n\n\ncluster_X\n\nA\n\n\ncluster_Y\n\nB\n\n\n\n1\n\n1\n\n\n\nw\n\nw\n\n\n\n1-&gt;w\n\n\n\n\n\n2\n\n2\n\n\n\nx\n\nx\n\n\n\n2-&gt;x\n\n\n\n\n\n3\n\n3\n\n\n\ny\n\ny\n\n\n\n3-&gt;y\n\n\n\n\n\n4\n\n4\n\n\n\n4-&gt;y\n\n\n\n\n\n\n\n\n\n\n\n\nNeither\n\n\n\n\n\n\n\nfinite_automata\n\n\ncluster_X\n\nA\n\n\ncluster_Y\n\nB\n\n\n\n1\n\n1\n\n\n\nw\n\nw\n\n\n\n1-&gt;w\n\n\n\n\n\n2\n\n2\n\n\n\nx\n\nx\n\n\n\n2-&gt;x\n\n\n\n\n\n3\n\n3\n\n\n\nz\n\nz\n\n\n\n3-&gt;z\n\n\n\n\n\n4\n\n4\n\n\n\n4-&gt;z\n\n\n\n\n\ny\n\ny"
  },
  {
    "objectID": "bigrsa.html#tester",
    "href": "bigrsa.html#tester",
    "title": "BigRSA",
    "section": "“Tester”",
    "text": "“Tester”\n\nRather than provide an end-to-end containerized autograder, I am providing a Makefile.\n\nwget https://github.com/cd-c89/refrsa/raw/refs/heads/main/Makefile # curl was struggling\n\n\nMakefile\n\nCC = gcc # or clang\nCFLAGS = -std=c89 -Wall -Wextra -Werror -Wpedantic -O2\nCLIBS = -lgmp # for biggmp and primes\nBIGNUM = biggmp.c # or use 4096_t.c\n\nall: bigrsa bigkey\n\nbigrsa: bigrsa.c $(BIGNUM) 4096_t.h\n    $(CC) bigrsa.c $(BIGNUM) $(CFLAGS) -o bigrsa $(CLIBS)\n    \nbigkey: bigkey.c $(BIGNUM) 4096_t.h\n    $(CC) bigkey.c $(BIGNUM) $(CFLAGS) -o bigkey $(CLIBS)\n\nclean:\n    rm -f bigrsa bigkey unsafe.* *.txt\n\ncheck: bigrsa bigkey\n    ./bigkey\n    echo \"Multiple of four chars.\" &gt; m.txt\n    ./bigrsa -e m.txt c.txt\n    ./bigrsa -d c.txt n.txt\n    diff m.txt n.txt\n\n\nI am also providing:\n\nA reference solution that uses this Makefile.\nA GitHub action that uses this Makefile:\n\n\n\n\nC89.yml\n\nname: C89 CI\n\non: push\n    \njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - run: make check\n\n\nRead more in “Solved”"
  },
  {
    "objectID": "bigrsa.html#solution",
    "href": "bigrsa.html#solution",
    "title": "BigRSA",
    "section": "Solution",
    "text": "Solution\n\nSpoiler alert: This section contains spoilers, including a working solution, to the BigRSA assignment.\n\n\n\n\n\n\n\nSpoiler Alert!\n\n\n\nThis section contains spoilers, including a working solution, to the BigRSA assignment."
  },
  {
    "objectID": "bigrsa.html#expand-to-learn-about-collapse",
    "href": "bigrsa.html#expand-to-learn-about-collapse",
    "title": "BigRSA",
    "section": "Expand To Learn About Collapse",
    "text": "Expand To Learn About Collapse\n\nThe repository is publicly visible at github.com/cd-c89/refrsa"
  },
  {
    "objectID": "struct.html#review",
    "href": "struct.html#review",
    "title": "Stream",
    "section": "Review",
    "text": "Review\n\nIn Python, we don’t really have the classical concept of array\n\nHistorically lists and arrays were different things…\nPython lists are closer to being array-lists - an implementation of a list *abstract data type* using an array *data structure*\n\n&gt;&gt;&gt; arr = [1,2,3] &gt;&gt;&gt; type(arr) &lt;class 'list'&gt; &gt;&gt;&gt;"
  },
  {
    "objectID": "struct.html#review-1",
    "href": "struct.html#review-1",
    "title": "Stream",
    "section": "Review",
    "text": "Review\n\nThe List type differs from the Array implementation in a few ways: int arr[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 } ;\n\nArrays are of fixed length.\n\nWe cannot add or remove elements, only replace.\n\narr = { 1, 2, 3 } ; // compile error arr[15] = -1 ; // runtime error - \"stack smashing\"\nArrays must contain only elements of the same type.\n\nWe cannot place chars and ints in the same array.\n\nchar *str = \"hihi\" ; arr[3] = str ; // compile warning - integer from pointer w/o cast\nArrays do not know their own length or type.\n\nWhen using arrays, we must keep track of how many elements of what type there are.\n\narr[sizeof(arr) -1] = -1 ; // *can* be a segmentation fault\nArrays exist at fixed location in physical memory. int *old = arr, *new ; arr[0] = 10 ; new = arr ; old == new ; // this is \"true\""
  },
  {
    "objectID": "struct.html#review-2",
    "href": "struct.html#review-2",
    "title": "struct",
    "section": "Review",
    "text": "Review\n\nImagine mallocing all of memory in a single call.\n\nmalloc(0xFF…) will either crash or return a void * of zero (since that is the only place to start a memory region that large).\n\nImagine mallocing all of memory into one byte size pieces.\n\nThis would return 0xFF… void *s, the largest of which would be 0xFF…\n\nvoid * and size_t range from the same minimum (0) to maximum (0xFF…) size, so they are the same bit size. #include &lt;stdlib.h&gt; // for size_t #include &lt;assert.h&gt; // for assert int main() { assert(sizeof(void *) == sizeof(size_t)) ; // assertion passes assert(sizeof(char) == 1) ; // assertion passes assert(1 == 0) ; // assertion fails return 0; }\nRead more on assert here (or don’t).\n\nNAME top malloc, free, - allocate and free dynamic memory LIBRARY top Standard C library (libc, -lc) SYNOPSIS top #include &lt;stdlib.h&gt; void *malloc(size_t size); void free(void *_Nullable ptr); DESCRIPTION top malloc() The malloc() function allocates size bytes and returns a pointer to the allocated memory. The memory is not initialized. If size is 0, then malloc() returns a unique pointer value that can later be successfully passed to free().&lt;/stdlib.h&gt;"
  },
  {
    "objectID": "struct.html#review-3",
    "href": "struct.html#review-3",
    "title": "Struct",
    "section": "Review",
    "text": "Review\n\nImagine mallocing all of memory in a single call.\n\nmalloc(0xFF…) will either crash or return a void * of zero (since that is the only place to start a memory region that large).\n\nImagine mallocing all of memory into one byte size pieces.\n\nThis would return 0xFF… void *s, the largest of which would be 0xFF…\n\nvoid * and size_t range from the same minimum (0) to maximum (0xFF…) size, so they are the same bit size. #include &lt;stdlib.h&gt; // for size_t #include &lt;assert.h&gt; // for assert int main() { assert(sizeof(void *) == sizeof(size_t)) ; // assertion passes assert(sizeof(char) == 1) ; // assertion passes assert(1 == 0) ; // assertion fails return 0; }\nRead more on assert here (or don’t).\n\nNAME top malloc, free, - allocate and free dynamic memory LIBRARY top Standard C library (libc, -lc) SYNOPSIS top #include &lt;stdlib.h&gt; void *malloc(size_t size); void free(void *_Nullable ptr); DESCRIPTION top malloc() The malloc() function allocates size bytes and returns a pointer to the allocated memory. The memory is not initialized. If size is 0, then malloc() returns a unique pointer value that can later be successfully passed to free().&lt;/stdlib.h&gt;"
  },
  {
    "objectID": "struct.html#takeaways",
    "href": "struct.html#takeaways",
    "title": "Struct",
    "section": "Takeaways",
    "text": "Takeaways\nPointers\nArrays\nAlways the same size, usually size 8 on a 64 bit system\nCan be declared to be any positive integer (not int) size, up to some upper limit\nShould be initialized before used (with single equals) and may be reassigned (with single equals)\nIs a fixed location in system memory and may not be reassigned (single equals triggers error).\nDeclaration allows a description of existing memory, but provides no new memory to work with.\nDeclaration provides some amount of memory for use.\nCan describe an array of any size by being assigned to a location containing such an array.\nHas precise, fixed, and unchanging size in memory.\nDoes not support declaration of variable length arrays on C89, and may not support VLAs on C11\nDoes not support declaration of variable length arrays on C89, and may not support VLAs on C11"
  },
  {
    "objectID": "struct.html#malloc-1",
    "href": "struct.html#malloc-1",
    "title": "Struct",
    "section": "malloc",
    "text": "malloc\n\nMalloc returns a void * of the requested size, with which we may do what we will, such as store 6 characters. char *str = malloc(sizeof(char) * 6) ;\n\nBy declaring str as a “char *”, this stores the location returned by malloc as a void * in a pointer that is labelled as pointing to characters - the same pointer value, but different pointer meanings.\n\n“Here is some memory” vs “This memory contains characters”.\n\nMultiplying by “sizeof(char)” is redundant - sizeof(char) is one by definition - but this can be helpful when working with ints and other types.\nBONUS/CHALLENGE QUESTION: What is 1 * 6"
  },
  {
    "objectID": "struct.html#malloc-2",
    "href": "struct.html#malloc-2",
    "title": "Struct",
    "section": "malloc",
    "text": "malloc\n\nMalloc returns a void * of the requested size, with which we may do what we will, such as store 6 characters. char *str = malloc(sizeof(char) * 6) ;\n\nBy declaring str as a “char *”, this stores the location returned by malloc as a void * in a pointer that is labelled as pointing to characters - the same pointer value, but different pointer meanings.\n\n“Here is some memory” vs “This memory contains characters”.\n\nMultiplying by “sizeof(char)” is redundant - sizeof(char) is one by definition - but this can be helpful when working with ints and other types.\nBONUS/CHALLENGE QUESTION: What is 1 * 6"
  },
  {
    "objectID": "struct.html#malloc-3",
    "href": "struct.html#malloc-3",
    "title": "Struct",
    "section": "malloc",
    "text": "malloc\n\nMalloc returns a void * of the requested size, with which we may do what we will, such as store 6 characters. char *str = malloc(sizeof(char) * 6) ;\nWe can treat this memory region the same way we treat a character array. char arr[6] ; char *src = \"hello\" ; size_t i ; for ( i = 0 ; src[i] ; i++ ) { arr[i] = src[i] ; str[i] = src[i] ; } printf(\"%s %s %s\\n\", str, arr, src) ; // \"hello hello hello\"\n\n“Here is some memory that now contains characters” vs “This memory contains characters”."
  },
  {
    "objectID": "struct.html#malloc-4",
    "href": "struct.html#malloc-4",
    "title": "struct",
    "section": "malloc",
    "text": "malloc\n\nBut where does the memory come from?\nSo far, “the stack” - a memory regime vaguely related to the data structure\nFor malloc, “the heap” - a memory regime even more vaguely related to the data structure\nStack and heap exist in different regions of system memory, so stack memory is near stack memory but distant from heap memory. char arr0[256], arr1[256], arr2[256] ; char *ptr0 = malloc(256), *ptr1 = malloc(256), *ptr2 = malloc(256) ; printf(\"%p\\n%p\\n%p\\n%p\\n%p\\n%p\\n\", arr0, arr1, arr2, ptr0, ptr1, ptr2) ;\nHow far are all these things apart from each other: 0x7ffdcfaae0c0 0x7ffdcfaae1c0 0x7ffdcfaae2c0 0x556f982022a0 0x556f982023b0 0x556f982024c0"
  },
  {
    "objectID": "struct.html#malloc-5",
    "href": "struct.html#malloc-5",
    "title": "struct",
    "section": "malloc",
    "text": "malloc\n\nAlso check onlinegdb: 0x7ffc0dcdbb20 0x7ffc0dcdbc20 0x7ffc0dcdbd20 0x55b90099c2a0 0x55b90099c3b0 0x55b90099c4c0\nColab: 0x7ffca25f4df0 0x7ffca25f4ef0 0x7ffca25f4ff0 0x5906ff4e32a0 0x5906ff4e33b0 0x5906ff4e34c0\nTo study more intently, you have to step outside of the GNU family of compiler/debuggers."
  },
  {
    "objectID": "struct.html#malloc-6",
    "href": "struct.html#malloc-6",
    "title": "struct",
    "section": "malloc",
    "text": "malloc\n\nBut where does the memory come from?\nSo far, “the stack” - a memory regime vaguely related to the data structure\nFor malloc, “the heap” - a memory regime even more vaguely related to the data structure\nStack and heap exist in different regions of system memory, so stack memory is near stack memory but distant from heap memory. char arr0[256], arr1[256], arr2[256] ; char *ptr0 = malloc(256), *ptr1 = malloc(256), *ptr2 = malloc(256) ; printf(\"%p\\n%p\\n%p\\n%p\\n%p\\n%p\\n\", arr0, arr1, arr2, ptr0, ptr1, ptr2) ;\nHow far are all these things apart from each other: 0x7ffdcfaae0c0 0x7ffdcfaae1c0 0x7ffdcfaae2c0 0x556f982022a0 0x556f982023b0 0x556f982024c0"
  },
  {
    "objectID": "struct.html#stack-heap",
    "href": "struct.html#stack-heap",
    "title": "struct",
    "section": "Stack & Heap",
    "text": "Stack & Heap\n\nBasically, memory in a C program either exists in the stack, where we declare variables, or in the heap, another special magic place.\nStack memory, variously by requirement or convention, is allocated in explicit sizes fixed when code is compiled.\n\nC89 banned variable size stack declarations.\nC99 allowed it.\nIn response to pressure from the Linux developers, C11 degraded the requirement to an option.\nI am teaching you how to code without using a feature Linux developers say is bad. I’m not telling you the name of what you could use instead so you don’t Google it. It’s easy to find if you look.\n\nWe have only used stack memory so far so we have to fix memory size when we write the code."
  },
  {
    "objectID": "struct.html#stack-heap-1",
    "href": "struct.html#stack-heap-1",
    "title": "struct",
    "section": "Stack & Heap",
    "text": "Stack & Heap\n\nBasically, memory in a C program either exists in the stack, where we declare variables, or in the heap, another special magic place.\nStack memory, variously by requirement or convention, is allocated in explicit sizes fixed when code is compiled.\n\nC89 banned variable size stack declarations.\nC99 allowed it.\nIn response to pressure from the Linux developers, C11 degraded the requirement to an option.\nI am teaching you how to code without using a feature Linux developers say is bad. I’m not telling you the name of what you could use instead so you don’t Google it. It’s easy to find if you look.\n\nWe have only used stack memory so far so we have to fix memory size when we write the code."
  },
  {
    "objectID": "struct.html#stack-heap-2",
    "href": "struct.html#stack-heap-2",
    "title": "struct",
    "section": "Stack & Heap",
    "text": "Stack & Heap\n\nIn C, bits are in the stack, where we declare variables, or heap, another special magic place.\nA scratchpad space that GCC configures programs to request and the OS allows use of (up to some limit).\nThe “magic” is implementation details of the compiler and the operating system.\nThe only way we will learn to interface with the heap is malloc.\nThe only way we will learn to deal with memory for which size is determined during run-time (while a program runs) is malloc."
  },
  {
    "objectID": "struct.html#stack-heap-3",
    "href": "struct.html#stack-heap-3",
    "title": "struct",
    "section": "Stack & Heap",
    "text": "Stack & Heap\nStack\nHeap\nFixed Size\nArbitrary Size\nHolds Function Variables\nReturned by a function (malloc)\nDefined before code is compiled\nGoverned by the laws of magic\nHigher/larger numerical addresses\n(closer to 0xFF…)\nLower/smaller numerical addresses\n(closer to 0x00…)\n!!!SPOILERS\n!!!SPOILERS"
  },
  {
    "objectID": "struct.html#general-memory-layout",
    "href": "struct.html#general-memory-layout",
    "title": "struct",
    "section": "General Memory Layout",
    "text": "General Memory Layout\nEach running program has its own memory layout, separated from other programs.\nThe layout consists of a lot of segments, including:\n\nstack: stores local variables\nheap : memory for programmer to allocate\ndata : !!! SPOILERS (unitialize -&gt; uninitialized)\ntext : !!! SPOILERS\n\ndata and text are probably approximately what you imagine, but the precise way we interface with these memory regions is out of scope for todays lecture!\nData Science is the scientific study of… ahem, next slide."
  },
  {
    "objectID": "struct.html#stack",
    "href": "struct.html#stack",
    "title": "struct",
    "section": "# Stack",
    "text": "# Stack\n\nStack space is allocated on variable declaration.\n\nThis is the reason for the historical (C89) requirement to only declare variables at the beginning of functions\nI attempt (read: fail) to model this as a coding style choice because it is better to learn more restrictive styles and then relax to more permissible styles.\n\nTraditionally the stack is regarded as “growing downwards” from higher/larger numerical memory locations to lower, but we did not see that in our tests: 0x7ffdcfaae0c0 0x7ffdcfaae1c0 0x7ffdcfaae2c0\nStack allocation is handled by the compiler, not the programmer."
  },
  {
    "objectID": "struct.html#stack-example",
    "href": "struct.html#stack-example",
    "title": "struct",
    "section": "Stack Example",
    "text": "Stack Example\n\n\nAllocate bytes for variable a for main\nAllocate bytes for variable b for main\n\nstore -3\n\nAllocate bytes for variable c for main\n\nstore 12345\n\nAllocate bytes for variable a for hello\n\nstore 100\n\nDeallocate bytes associated with hello.\n\nreturn 100 by placing this value on the stack."
  },
  {
    "objectID": "struct.html#stack-example-1",
    "href": "struct.html#stack-example-1",
    "title": "struct",
    "section": "Stack Example",
    "text": "Stack Example\n\n\nAllocate bytes for variable a for main\nAllocate bytes for variable b for main\n\nstore -3\n\nAllocate bytes for variable c for main\n\nstore 12345\n\nAllocate bytes for variable a for hello\n\nstore 100\n\nDeallocate bytes associated with hello.\n\nreturn 100 by placing this value on the stack.\n\nAllocate bytes for variable d for main\n\nstore the returned 100 in d"
  },
  {
    "objectID": "struct.html#stack-example-2",
    "href": "struct.html#stack-example-2",
    "title": "struct",
    "section": "Stack Example",
    "text": "Stack Example\n\n\nAllocate bytes for variable a for main\nAllocate bytes for variable b for main\n\nstore -3\n\nAllocate bytes for variable c for main\n\nstore 12345\n\nAllocate bytes for variable a for hello\n\nstore 100\n\nDeallocate bytes associated with hello.\n\nreturn 100 by placing this value on the stack.\n\nAllocate bytes for variable d for main\n\nstore the returned 100 in d"
  },
  {
    "objectID": "struct.html#stack-example-3",
    "href": "struct.html#stack-example-3",
    "title": "struct",
    "section": "Stack Example",
    "text": "Stack Example\n\n\nAllocate bytes for variable a for main\nAllocate bytes for variable b for main\n\nstore -3\n\nAllocate bytes for variable c for main\n\nstore 12345\n\nAllocate bytes for variable a for hello\n\nstore 100\n\nDeallocate bytes associated with hello.\n\nreturn 100 by placing this value on the stack."
  },
  {
    "objectID": "struct.html#stack-example-4",
    "href": "struct.html#stack-example-4",
    "title": "struct",
    "section": "Stack Example",
    "text": "Stack Example\n\n\nAllocate bytes for variable a for main\nAllocate bytes for variable b for main\n\nstore -3\n\nAllocate bytes for variable c for main\n\nstore 12345\n\nAllocate bytes for variable a for hello\n\nstore 100\n\nDeallocate bytes associated with hello.\n\nreturn 100 by placing this value on the stack.\n\nAllocate bytes for variable d for main\n\nstore the returned 100 in d"
  },
  {
    "objectID": "struct.html#stack-example-5",
    "href": "struct.html#stack-example-5",
    "title": "struct",
    "section": "Stack Example",
    "text": "Stack Example\n\n\nAllocate bytes for variable a for main\nAllocate bytes for variable b for main\n\nstore -3\n\nAllocate bytes for variable c for main\n\nstore 12345\n\nAllocate bytes for variable a for hello\n\nstore 100\n\nDeallocate bytes associated with hello.\n\nreturn 100 by placing this value on the stack.\n\nAllocate bytes for variable d for main\n\nstore the returned 100 in d"
  },
  {
    "objectID": "struct.html#stack-discussion",
    "href": "struct.html#stack-discussion",
    "title": "struct",
    "section": "# Stack Discussion?",
    "text": "# Stack Discussion?"
  },
  {
    "objectID": "struct.html#heap-example",
    "href": "struct.html#heap-example",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate sizeof(int *) bytes for p for main.\nHeap-allocate sizeof(int) bytes\nStore the memory location of the heap allocated bytes in p.\n\nAs a reference, we denote this with an arrow rather than by showing a value.\nThe “value” stored is the same value seen by printf(“%p”,p);"
  },
  {
    "objectID": "struct.html#heap-example-1",
    "href": "struct.html#heap-example-1",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p."
  },
  {
    "objectID": "struct.html#heap-example-2",
    "href": "struct.html#heap-example-2",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p."
  },
  {
    "objectID": "struct.html#heap-example-3",
    "href": "struct.html#heap-example-3",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p."
  },
  {
    "objectID": "struct.html#heap-example-4",
    "href": "struct.html#heap-example-4",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p.\n\nStore 0 at the heap location p references.\nThree operations.\n\nStack-allocate q for main.\nHeap-allocate 2 * sizeof(int) bytes\nStore the heap location in q.\n\nStore 1 at the heap location q references."
  },
  {
    "objectID": "struct.html#heap-example-5",
    "href": "struct.html#heap-example-5",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p.\n\nStore 0 at the heap location p references.\nThree operations.\n\nStack-allocate q for main.\nHeap-allocate 2 * sizeof(int) bytes\nStore the heap location in q.\n\nStore 1 at the heap location q references."
  },
  {
    "objectID": "struct.html#heap-example-6",
    "href": "struct.html#heap-example-6",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p.\n\nStore 0 at the heap location p references.\nThree operations.\n\nStack-allocate q for main.\nHeap-allocate 2 * sizeof(int) bytes\nStore the heap location in q.\n\nStore 1 at the heap location q references."
  },
  {
    "objectID": "struct.html#review-question",
    "href": "struct.html#review-question",
    "title": "struct",
    "section": "Review Question",
    "text": "Review Question\nWhat is the return type of malloc()?\n\nsize_t\nunsigned long int\nvoid\nvoid *"
  },
  {
    "objectID": "struct.html#review-question-1",
    "href": "struct.html#review-question-1",
    "title": "struct",
    "section": "Review Question",
    "text": "Review Question\nWhat is the type of given by a sizeof()?\n\nsize_t\nunsigned long int\nvoid\nvoid *"
  },
  {
    "objectID": "struct.html#review-question-2",
    "href": "struct.html#review-question-2",
    "title": "struct",
    "section": "Review Question",
    "text": "Review Question\nWhat is the type of the malloc’s one argument?\n\nsize_t\nunsigned long int\nvoid\nvoid *"
  },
  {
    "objectID": "struct.html#review-question-3",
    "href": "struct.html#review-question-3",
    "title": "struct",
    "section": "Review Question",
    "text": "Review Question\nWhile sizes vary by system, what bit size do we commonly find size_t to be?\n(using base 10 on this slide)\n\n01 byte = 08 bits\n02 bytes = 16 bits\n04 bytes = 32 bits\n08 bytes = 64 bits"
  },
  {
    "objectID": "struct.html#review-question-4",
    "href": "struct.html#review-question-4",
    "title": "struct",
    "section": "Review Question",
    "text": "Review Question\nWhile sizes vary by system, what bit size do we commonly find void * to be?\n(using base 10 on this slide)\n\n01 byte = 08 bits\n02 bytes = 16 bits\n04 bytes = 32 bits\n08 bytes = 64 bits"
  },
  {
    "objectID": "struct.html#review-question-5",
    "href": "struct.html#review-question-5",
    "title": "struct",
    "section": "Review Question",
    "text": "Review Question\nA void * of size 8 (bytes) can store approximately how many distinct values?\n(using base 10 on this slide)\n\n~10^09 ~= billions\n~10^12 ~= trillions\n~10^15 ~= quadrillions\n~10^18 ~= quintillions"
  },
  {
    "objectID": "struct.html#review-4",
    "href": "struct.html#review-4",
    "title": "Struct",
    "section": "Review",
    "text": "Review\n\nImagine mallocing all of memory in a single call.\n\nmalloc(0xFF…) will either crash or return a void * of zero (since that is the only place to start a memory region that large).\n\nImagine mallocing all of memory into one byte size pieces.\n\nThis would return 0xFF… void *s, the largest of which would be 0xFF…\n\nvoid * and size_t range from the same minimum (0) to maximum (0xFF…) size, so they are the same bit size. #include &lt;stdlib.h&gt; // for size_t #include &lt;assert.h&gt; // for assert int main() { assert(sizeof(void *) == sizeof(size_t)) ; // assertion passes assert(sizeof(char) == 1) ; // assertion passes assert(1 == 0) ; // assertion fails return 0; }\nRead more on assert here (or don’t).\n\nNAME top malloc, free, - allocate and free dynamic memory LIBRARY top Standard C library (libc, -lc) SYNOPSIS top #include &lt;stdlib.h&gt; void *malloc(size_t size); void free(void *_Nullable ptr); DESCRIPTION top malloc() The malloc() function allocates size bytes and returns a pointer to the allocated memory. The memory is not initialized. If size is 0, then malloc() returns a unique pointer value that can later be successfully passed to free().&lt;/stdlib.h&gt;"
  },
  {
    "objectID": "struct.html#malloc-7",
    "href": "struct.html#malloc-7",
    "title": "Struct",
    "section": "malloc",
    "text": "malloc\n\nBut where does the memory come from?\nSo far, “the stack” - a memory regime vaguely related to the data structure\nFor malloc, “the heap” - a memory regime even more vaguely related to the data structure\nStack and heap exist in different regions of system memory, so stack memory is near stack memory but distant from heap memory. char arr0[256], arr1[256], arr2[256] ; char *ptr0 = malloc(256), *ptr1 = malloc(256), *ptr2 = malloc(256) ; printf(\"%p\\n%p\\n%p\\n%p\\n%p\\n%p\\n\", arr0, arr1, arr2, ptr0, ptr1, ptr2) ;\nHow far are all these things apart from each other: 0x7ffdcfaae0c0 0x7ffdcfaae1c0 0x7ffdcfaae2c0 0x556f982022a0 0x556f982023b0 0x556f982024c0"
  },
  {
    "objectID": "struct.html#heap-example-7",
    "href": "struct.html#heap-example-7",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p.\n\nStore 0 at the heap location p references.\nThree operations.\n\nStack-allocate q for main.\nHeap-allocate 2 * sizeof(int) bytes\nStore the heap location in q.\n\nStore 1 at the heap location q references."
  },
  {
    "objectID": "struct.html#heap-example-8",
    "href": "struct.html#heap-example-8",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate sizeof(int *) bytes for p for main.\nHeap-allocate sizeof(int) bytes\nStore the memory location of the heap allocated bytes in p.\n\nAs a reference, we denote this with an arrow rather than by showing a value.\nThe “value” stored is the same value seen by printf(“%p”,p);"
  },
  {
    "objectID": "struct.html#heap-example-9",
    "href": "struct.html#heap-example-9",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate sizeof(int *) bytes for p for main.\nHeap-allocate sizeof(int) bytes\nStore the memory location of the heap allocated bytes in p.\n\nAs a reference, we denote this with an arrow rather than by showing a value.\nThe “value” stored is the same value seen by printf(“%p”,p);"
  },
  {
    "objectID": "struct.html#heap-example-10",
    "href": "struct.html#heap-example-10",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p."
  },
  {
    "objectID": "struct.html#heap-example-11",
    "href": "struct.html#heap-example-11",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p.\n\nStore 0 at the heap location p references."
  },
  {
    "objectID": "struct.html#heap-example-12",
    "href": "struct.html#heap-example-12",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p.\n\nStore 0 at the heap location p references.\nThree operations.\n\nStack-allocate q for main.\nHeap-allocate 2 * sizeof(int) bytes\nStore the heap location in q."
  },
  {
    "objectID": "struct.html#heap-example-13",
    "href": "struct.html#heap-example-13",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p.\n\nStore 0 at the heap location p references.\nThree operations.\n\nStack-allocate q for main.\nHeap-allocate 2 * sizeof(int) bytes\nStore the heap location in q.\n\nStore 1 at the heap location q references."
  },
  {
    "objectID": "struct.html#free",
    "href": "struct.html#free",
    "title": "struct",
    "section": "Free",
    "text": "Free\n\n“We’ll discuss this latter in the context of free() aka malloc part 2.” - me\nLatter is now! void free(void *_Nullable ptr);\nfree() The free() function frees the memory space pointed to by ptr, which must have been returned by a previous call to malloc() or related functions. Otherwise, or if ptr has already been freed, undefined behavior occurs. If ptr is NULL, no operation is performed."
  },
  {
    "objectID": "struct.html#heap-allocation",
    "href": "struct.html#heap-allocation",
    "title": "struct",
    "section": "Heap Allocation",
    "text": "Heap Allocation\n\np holds a *_Nullable.\nq holds a *_Nullable.\nThree operations.\n\nHeap-deallocate the memory pointed to by p.\n\nThat is, someone else (the OS, another program, another malloc) can use the memory.\n\nMark the value in p as no longer defined.\n\nLooking at the value in this pointer might segfault.\n\nMark the value formerly pointed to by p as undefined.\n\nIn practice, it likely stores the same value as before, but checking might segfault."
  },
  {
    "objectID": "struct.html#heap-allocation-1",
    "href": "struct.html#heap-allocation-1",
    "title": "struct",
    "section": "Heap Allocation",
    "text": "Heap Allocation\n\np holds a *_Nullable.\nq holds a *_Nullable.\nThree operations.\n\nHeap-deallocate the memory pointed to by p.\n\nThat is, someone else (the OS, another program, another malloc) can use the memory.\n\nMark the value in p as no longer defined.\n\nLooking at the value in this pointer might segfault.\n\nMark the value formerly pointed to by p as undefined.\n\nIn practice, it likely stores the same value as before, but checking might segfault."
  },
  {
    "objectID": "struct.html#memory-leaks",
    "href": "struct.html#memory-leaks",
    "title": "struct",
    "section": "Memory leaks",
    "text": "Memory leaks\n\nA memory leak occurs when some memory is allocated for some program by malloc() and the address of this memory is lost to the allocating program.\nIn the worst case, this may occur in loops. int main() // Leak 0xFFFF bytes of memory { int i, *p, *q; for ( i = 0 ; i &lt; 0xFFFF ; i++ ) { p = malloc(sizeof(int)) ; q = malloc(sizeof(int) * 2) ; *p = i ; *q = i + 1 ; q[1] = i + 2; p = q ; } return 0 ; }\nI was unwilling to run this on my system but you can try it if you want. Modern OSes are pretty scrappy."
  },
  {
    "objectID": "struct.html#memory-leaks-1",
    "href": "struct.html#memory-leaks-1",
    "title": "struct",
    "section": "Memory leaks",
    "text": "Memory leaks\n\nGenerally speaking, if you’re computer/phone slows down over time then is faster again after a reboot, there is a memory leak driving this slowdown.\nWindows XP famously contained a number of memory leaks, and Microsoft now provides tooling and documentation on isolating memory leaks in their operating system: kd&gt; !poolused 4 Sorting by Paged Pool Consumed Pool Used: NonPaged Paged Tag Allocs Used Allocs Used Abc 0 0 36405 33930272 Tron 0 0 552 7863232 IoN7 0 0 10939 998432 Gla5 1 128 2222 924352 Ggb 0 0 22 828384\nI would assume the Linux kernel has at least one memory leak but I would never admit that in polite company.\nIn practice, most memory leaks come from programs written by CS majors that slept through this class."
  },
  {
    "objectID": "struct.html#memory-leaks-2",
    "href": "struct.html#memory-leaks-2",
    "title": "struct",
    "section": "Memory leaks",
    "text": "Memory leaks\n\nA memory leak occurs when some memory is allocated for some program by malloc() and the address of this memory is lost to the allocating program.\nFree allows us to safely work with memory within code blocks (including loops) by deallocating unused memory. int main() // Leak 0xFFFF bytes of memory { int i, *p, *q; for ( i = 0 ; i &lt; 0xFFFF ; i++ ) { p = malloc(sizeof(int)) ; q = malloc(sizeof(int) * 2) ; *p = i ; *q = i + 1 ; q[1] = i + 2; free(p) ; // Avert memory leak. p = q ; } return 0 ; }"
  },
  {
    "objectID": "struct.html#heap-allocation-2",
    "href": "struct.html#heap-allocation-2",
    "title": "struct",
    "section": "Heap Allocation",
    "text": "Heap Allocation\n\np holds a *_Nullable.\nq holds a *_Nullable.\nThree operations.\n\nHeap-deallocate the memory pointed to by p.\n\nThat is, someone else (the OS, another program, another malloc) can use the memory.\n\nMark the value in p as no longer defined.\n\nLooking at the value in this pointer might segfault.\n\nMark the value formerly pointed to by p as undefined.\n\nIn practice, it likely stores the same value as before, but checking might segfault."
  },
  {
    "objectID": "struct.html#heap-allocation-3",
    "href": "struct.html#heap-allocation-3",
    "title": "struct",
    "section": "Heap Allocation",
    "text": "Heap Allocation\n\np holds a *_Nullable.\nq holds a *_Nullable.\nThree operations.\n\nHeap-deallocate the memory pointed to by p.\n\nThat is, someone else (the OS, another program, another malloc) can use the memory.\n\nMark the value in p as no longer defined.\n\nLooking at the value in this pointer might segfault.\n\nMark the value formerly pointed to by p as undefined.\n\nIn practice, it likely stores the same value as before, but checking might segfault."
  },
  {
    "objectID": "struct.html#free-leak-freak",
    "href": "struct.html#free-leak-freak",
    "title": "struct",
    "section": "Free + Leak = Freak",
    "text": "Free + Leak = Freak\n\nWe can generate a silly outcome at high probability by:\n\nStore value to heap\nMemory leak\nCheck value\n\nlong *p = malloc(sizeof(long)), *q , i ; *p = 1 ; // safe printf(\"%ld\\n\", *p) ; // safe free(p) ; for ( i = 0 ; i &lt; 1000000 ; i++) { q = malloc(0xFF) ; *q = i ; // leak } printf(\"%ld\\n\", *p) ; // unsafe\nI got 1 22923750333\nStream “Super Freaky Girl” by Nicki Minaj on Spotify (or don’t)"
  },
  {
    "objectID": "struct.html#today-1",
    "href": "struct.html#today-1",
    "title": "struct",
    "section": "Today",
    "text": "Today\nstruct\nnew\nprint\nfree\nHeader files\nMacros\nDeclarations\ntypedef"
  },
  {
    "objectID": "struct.html#a-word",
    "href": "struct.html#a-word",
    "title": "struct",
    "section": "# A word",
    "text": "# A word\n\nBefore we begin, I need to introduce some terminology to help us latter.\nIn e.g. 4096_t.h we have declared functions.\nIn this case we specify\n\nA name\nA function type (arguments and return)\nNo executable code.\n\nWe can declare variables, including pointers and even functions.\ndeclare"
  },
  {
    "objectID": "struct.html#declare",
    "href": "struct.html#declare",
    "title": "struct",
    "section": "declare",
    "text": "declare"
  },
  {
    "objectID": "struct.html#a-word-1",
    "href": "struct.html#a-word-1",
    "title": "struct",
    "section": "A word",
    "text": "A word\n\nBefore we begin, I need to introduce some terminology to help us latter.\nI mentioned in C we define pointers by setting them values, define functions with code blocks. void do_thing_helper(void) { return ; // this code block *defines* the function } void do_thing(void) { int i ; i = 1 ; // single equals assigns, or *defines* the value of i do_thing_helper(); }\nI am being extremely precise which word I use here:"
  },
  {
    "objectID": "struct.html#define",
    "href": "struct.html#define",
    "title": "struct",
    "section": "define",
    "text": "define"
  },
  {
    "objectID": "struct.html#declare-define",
    "href": "struct.html#declare-define",
    "title": "struct",
    "section": "declare & define",
    "text": "declare & define\nDeclare sets aside some bits void some_func() ; int i ; char *str ;\nDefine sets the value of those bits void some_func() { ; } i = 0 ; str = \"defined\" ;\nLet’s declare some structs."
  },
  {
    "objectID": "struct.html#struct",
    "href": "struct.html#struct",
    "title": "struct",
    "section": "Struct",
    "text": "Struct\n\nIn Python, when we teach data structures, we tie ourselves in knots explaining why classes, which most methods and are neither data nor structures, are called data structures.\n\nThis is fine. It’s fine. I’m fine. I’m fine!\n\nclass OrderedPair: def __init__(self, x, y): self.x = x self.y = y def __str__(self): return f\"({self.x}, {self.y})\" def __repr__(self): return f\"OrderedPair({self.x}, {self.y})\"\nIn C, the “struct” keyword is used to make structures out of data: struct ordered_pair { int x ; int y ; } ;"
  },
  {
    "objectID": "struct.html#structs",
    "href": "struct.html#structs",
    "title": "struct",
    "section": "Structs",
    "text": "Structs\n\nShockingly, these structs are nothing other than data. We can examine them: struct ordered_pair p ; p.x = 3 ; p.y = 4 ; printf(\"p.x = %d, p.y = %d\\n\", p.x, p.y) ; printf(\"sizeof(p) = %zu\\n\", sizeof(p)) ; printf(\"p.x, p.y = %08x%08x\\n\", (unsigned)p.x, (unsigned)p.y) ; printf(\"*(long *)&p= %016lx\\n\", *(long *)&p) ;\nA struct with two ints is just the size of two ints, though the order is up to the compiler/OS/CPU. user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out p.x = 3, p.y = 4 sizeof(p) = 8 p.x, p.y = 0000000300000004 *(long *)&p= 0000000400000003 user@DESKTOP-THMS2PJ:~$\nThat said, these aren’t theoretical data structures, they’re C language structs.\nI’ll call them “structs”."
  },
  {
    "objectID": "struct.html#struct-1",
    "href": "struct.html#struct-1",
    "title": "struct",
    "section": "Struct",
    "text": "Struct\n\nIn lesser (object oriented) languages, class implement data structures.\n\nClasses may lack both data and structure,\nThey are, perhaps, “computation structures”?\n\nclass MultiAdd:\ndef do(self, ns):\n    if ns:\n        n = ns[0]\n        [n := n + i for i in ns[1:]]\n    return n\n\nNo structure. No data.\n\nclass OrderedPair: def __init__(self, x, y): self.x = x self.y = y def __str__(self): return f\"({self.x}, {self.y})\" def __repr__(self): return f\"OrderedPair({self.x}, {self.y})\"\nIn C, the “struct” keyword is used to make structures out of data: struct ordered_pair { int x ; int y ; } ;"
  },
  {
    "objectID": "struct.html#struct-2",
    "href": "struct.html#struct-2",
    "title": "struct",
    "section": "struct",
    "text": "struct\n\nstruct is the foundation of niceties in higher level languages you may like, such as lists that know their length. void sort(int *arr, size_t len) ; // This was int *arr, int len because we didn't know about size_t yet.\nMany a student is shocked and horrified by lists not knowing their length. struct len_arr { int *arr ; size_t len ; } ;\nProblem solved. void sort(struct len_arr arr) ; // This also factors out the size_t modification"
  },
  {
    "objectID": "struct.html#struct-3",
    "href": "struct.html#struct-3",
    "title": "struct",
    "section": "struct",
    "text": "struct\n\nYou may remember that Python is bad. def both(x,y): return x, y\nNot to worry, C is good. struct both { int x ; int y ; } ; struct both bothify(int x, int y) { struct both ret ; ret.x = x ; ret.y = y ; return ret ; }\nYou could argue that is more code to which I would say, yes:\n\nThe point of code is to say what is going on\nPython does not tell you what is going on. Bad. Bad!\n\nWhat is the type of Python “both”?"
  },
  {
    "objectID": "struct.html#struct-4",
    "href": "struct.html#struct-4",
    "title": "struct",
    "section": "struct",
    "text": "struct\n\nbothify is conspiciously similar to an argumentful Python __init__.\nIt is also similary to C++ new, which I’m just telling you so you know.\nGenerally speaking, I would call “bothify” “new_structname”. struct pair { int x ; int y ; } ; struct pair new_pair(int x, int y) { struct pair ret ; ret.x = x ; ret.y = y ; return ret ; }\nThis has the convenience of allowing single-line declaration of a pair. struct pair q ; // 1/3 q.x = 3 ; // 2/3 q.y = 4 ; // 3/3 struct pair p = new_pair(1,2) ; // 1/1"
  },
  {
    "objectID": "struct.html#struct-5",
    "href": "struct.html#struct-5",
    "title": "struct",
    "section": "struct",
    "text": "struct\n\nWe can use existing functions, like print_mem, to look at structs, or…\nWrite something akin to Python __str__ (though really what inspired __str__)\nDifferent structs have different needs, I’d do something like… void print_pair(struct pair p) { (void)fprintf(stdout, \"pair(x=%d, y=%d)\", p.x, p.y) ; // no /n }\nThis has the convenience of allowing single-line declaration of a pair. struct pair q ; // 1/3 q.x = 3 ; // 2/3 q.y = 4 ; // 3/3 struct pair p = new_pair(1,2) ; // 1/1 printf(\"p = \") ; print_pair(p) ; printf(\", q = \") ; print_pair(q) ; putchar('\\n') ;\nThis is as close as we get to Pythonic print(“q =”, q, “, p =”, p) user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out p = pair(x=1, y=2), q = pair(x=3, y=4) user@DESKTOP-THMS2PJ:~$"
  },
  {
    "objectID": "struct.html#today-2",
    "href": "struct.html#today-2",
    "title": "struct",
    "section": "Today",
    "text": "Today\nstruct\nnew\nprint\nfree\nHeader files\nMacros\nDeclarations\ntypedef"
  },
  {
    "objectID": "struct.html#i-love-classes",
    "href": "struct.html#i-love-classes",
    "title": "struct",
    "section": "I love classes",
    "text": "I love classes\n\nIf you ever took and/or taught CS 151 or a Java class you may have getter/setter fatigue.\nCopilot wrote this, no force on Earth could compel me to type this out: class Pair: def __init__(self, x, y): self._x = x self._y = y def get_x(self): return self._x def get_y(self): return self._y def set_x(self, x): self._x = x def set_y(self, y): self._y = y\n if an AI can do it, don’t train a human to do it"
  },
  {
    "objectID": "struct.html#i-love-classes-1",
    "href": "struct.html#i-love-classes-1",
    "title": "struct",
    "section": "I love classes",
    "text": "I love classes\n\nThat said, there’s a difference between this: class Pair: def __init__(self, x, y): self._x = x self._y = y\nand this: class Pair: def __init__(self, x, y): self.x = x self.y = y\nI use the second to avoid writing getters/setters.\nWe can make the same design decision in C."
  },
  {
    "objectID": "struct.html#headers-struct",
    "href": "struct.html#headers-struct",
    "title": "struct",
    "section": "Headers & Struct",
    "text": "Headers & Struct\n\nRather than underscores, we place code in distinct files.\ntest.c\npair.h\npair.c\n// test.c #include \"pair.h\" int main() { struct pair p ; p = newp() ; p.x = 1 ; return 0 ; }\n// pair.h struct pair { int x ; int y ; } ; struct pair newp();\n// pair.c #include \"pair.h\" struct pair newp() { struct pair p ; p.x = 0 ; p.y = 0 ; return p ; }\nAs a rule, when I use a (non-trivial) struct, I create a .h and .c of the same name.\nWe can think of these files as doing the C version of what classes do, but with functions and structs rather than a class and its methods.\nLot going on here.\n\ngcc"
  },
  {
    "objectID": "struct.html#typedef",
    "href": "struct.html#typedef",
    "title": "struct",
    "section": "typedef",
    "text": "typedef\n\nWe’re going to give a type a new name soon, but let’s introduce typedef separately. typedef unsigned char bool ; #define TRUE 1 #define FALS 0 int main() { bool b = TRUE ; if (b) { printf(\"Hi world!\\n\") ; } return 0 ; }\nI like bools (they’re fun) so I just make them if I’m going to use them a lot. user@DESKTOP-THMS2PJ:~/dev/projs/pair$ gcc test.c ; ./a.out Hi world! user@DESKTOP-THMS2PJ:~/dev/projs/pair$"
  },
  {
    "objectID": "struct.html#stdint.h",
    "href": "struct.html#stdint.h",
    "title": "struct",
    "section": "stdint.h",
    "text": "stdint.h\n\nThe most useful typedefs I think come from stdint.h, which I will use from now on. #include &lt;stdint.h&gt; int main() { printf(\"%zu\\n\", sizeof(uintptr_t)) ; // u = unsigned printf(\"%zu\\n\", sizeof(uint64_t)) ; printf(\"%zu\\n\", sizeof(uint32_t)) ; printf(\"%zu\\n\", sizeof(uint16_t)) ; printf(\"%zu\\n\", sizeof(uint8_t)) ; }\nNo more “how big is an int” - uint64_t is 64 bits / 8 bytes. Always. user@DESKTOP-THMS2PJ:~/dev/projs/pair$ gcc test.c ; ./a.out 8 8 4 2 1 user@DESKTOP-THMS2PJ:~/dev/projs/pair$"
  },
  {
    "objectID": "struct.html#typedef-1",
    "href": "struct.html#typedef-1",
    "title": "struct",
    "section": "typedef",
    "text": "typedef\n\nWe’re going to give a type a new name soon, but let’s introduce typedef separately. #include &lt;stdint.h&gt; typedef uint8_t bool ; #define TRUE 1 #define FALS 0\nI probably use stdint.h MORE than stdio.h these days.\nIt helps me be a lot more intentional about signed/unsigned values."
  },
  {
    "objectID": "struct.html#headers-struct-1",
    "href": "struct.html#headers-struct-1",
    "title": "struct",
    "section": "Headers & Struct",
    "text": "Headers & Struct\n\nWe can obscure struct implementation by moving the struct to the .c and using a typedef.\nWe rename struct pair to struct pair_s so we can typedef from pair_s to pair.\n// test.c #include \"pair.h\" int main() { pair p ; p.x = 1 ; return 0 ; }\n// pair.h typedef struct pair_s pair ; pair newp() ;\n// pair.c #include \"pair.h\" struct pair_s { int x ; int y ; } ;\nThe inner workings of pair are extremely obscured, so much so that… user@DESKTOP-THMS2PJ:~/dev/projs/pair$ gcc test.c pair.c test.c: In function ‘main’: test.c:6:8: error: storage size of ‘p’ isn’t known 6 | pair p ; | ^ user@DESKTOP-THMS2PJ:~/dev/projs/pair$\nNot to worry - we know how to deal with arbitrary sizes."
  },
  {
    "objectID": "struct.html#headers-struct-2",
    "href": "struct.html#headers-struct-2",
    "title": "struct",
    "section": "Headers & Struct",
    "text": "Headers & Struct\n\nWe make pair a pointer, and manage memory in .c\n// pair.h #include &lt;stdint.h&gt; typedef struct pair_s *pair ; pair newp() ;\n// pair.c #include \"pair.h\" struct pair_s { int x, y ; }; pair newp() { size_t s ; s = sizeof(struct pair_s) ; pair p = malloc(s) ; return p ; }\nWe have to malloc in .c because the size is not known outside of .c user@DESKTOP-THMS2PJ:~/dev/projs/pair$ gcc test.c pair.c ; ./a.out user@DESKTOP-THMS2PJ:~/dev/projs/pair$\nThis is what is known in the industry as a “pointer W”\n\nJust kidding ; I made that up."
  },
  {
    "objectID": "struct.html#headers",
    "href": "struct.html#headers",
    "title": "struct",
    "section": "Headers",
    "text": "Headers\n\nWhen using a struct and header I:\nWrite a typedef from struct name_s to *name in .h\nDeclare any function in .h that is used within main()\nWrite no code in .h, by which I mean:\n\nThere are only struct definitions or function declarations\nThere is nowhere I could place a printf() that would print anything.\n\nInclude any libraries used in the .c in the .h // pair.h #include &lt;stdint.h&gt; typedef struct pair_s *pair ; pair newp() ;\nI need to clip .h from the slides for space, but it will follow these rules.\nIf I e.g. use a printf() in .c, then assume I include stdio.h from within pair.h"
  },
  {
    "objectID": "struct.html#headers-struct-3",
    "href": "struct.html#headers-struct-3",
    "title": "struct",
    "section": "Headers & Struct",
    "text": "Headers & Struct\n\nUse/call from test.c, implement in pair.c.\n// test.c #include \"pair.h\" int main() { pair p ; p.x = 1 ; return 0 ; };\n// pair.c #include \"pair.h\" struct pair_s { int x, y ; } ; pair newp() { size_t s ; s = sizeof(struct pair_s) ; pair p = malloc(s) ; return p ; }\nRemember, test.c cannot see into pair_s and cannot tell there is an x there. user@DESKTOP-THMS2PJ:~/dev/projs/pair$ gcc test.c pair.c test.c: In function ‘main’: test.c:7:4: error: ‘p’ is a pointer; did you mean to use ‘-&gt;’? 7 | p.x = 1 ; | ^ | -&gt; user@DESKTOP-THMS2PJ:~/dev/projs/pair$\n\n-&gt;"
  },
  {
    "objectID": "struct.html#headers-struct-4",
    "href": "struct.html#headers-struct-4",
    "title": "struct",
    "section": "Headers & Struct",
    "text": "Headers & Struct\n\nMove the struct back into .c and we need get/set.\n// test.c #include \"pair.h\" int main() { pair p = newp() ; setx(p, 5) ; printf(\"%d\\n\", getx(p)) ; frep(p) ; return 0 ; }\n// pair.c #include \"pair.h\" struct pair_s { int32_t x, y ; } ; int getx(pair p) { return p-&gt;x ; } void setx(pair p, int x) { p-&gt;x = x ; }\nGet/set here is pretty pointless user@DESKTOP-THMS2PJ:~/dev/projs/pair$ gcc test.c pair.c ; ./a.out 5 user@DESKTOP-THMS2PJ:~/dev/projs/pair$\nMove the struct into the .c when you’re done testing.\n\nIf you have an internal implementation that can only confuse, like a linked list\nI don’t wanna know if it’s doubly or singly linked, don’t tell me, I won’t listen."
  },
  {
    "objectID": "struct.html#abstraction",
    "href": "struct.html#abstraction",
    "title": "struct",
    "section": "Abstraction",
    "text": "Abstraction\n\nSometimes it is very helpful to not think about how things work internally. (These are links) uint8_t get_colr(pmap p, size_t x, size_t y, size_t c) { return p-&gt;pxls[3 * (y * p-&gt;x + x) + c] ; }\nI debugged that once and never thought about it again.\nThis is the alternate to unsigned char ***create_base().\nLook how clean this looks: get_colr(p, i, j, 2) ;\n“Get color 2 (green) in pixel [i][j] in pixel map ‘p’.”\nIt’s just nice to not have to remember where the parenthesis and the 3 go."
  },
  {
    "objectID": "struct.html#today-3",
    "href": "struct.html#today-3",
    "title": "struct",
    "section": "Today",
    "text": "Today\n✓ Malloc part 2\n✓ free()\nMemory-adjacent tech\n✓ casting\npointer arithmetic\nunary &"
  },
  {
    "objectID": "struct.html#macros",
    "href": "struct.html#macros",
    "title": "struct",
    "section": "Macros",
    "text": "Macros\n\nYou may write a bunch of header files someday. I don’t know.\n\nMaybe like, on a final project or something.\n\nIf you include a file more than once, it’s weird (this file doesn’t break, some do).\n\nA “ifndef” at the start of the file, to make inclusion conditional\nA “define” to set a flag that ifndef checks\nA “endif” at the end of the file\nThese are all preprocessor macros like #include and not part of the C language, but part of the C ecosystem. #ifndef PAIR_H #define PAIR_H typedef struct pair_s *pair ; pair newp() ; void frep(pair p) ; int getx(pair p) ; void setx(pair p, int x) ; #endif\nIf you don’t do this, you’ll regret it someday at like, medium probability."
  },
  {
    "objectID": "struct.html#today-4",
    "href": "struct.html#today-4",
    "title": "struct",
    "section": "Today",
    "text": "Today\n✓ Malloc part 2\n✓ free()\nMemory-adjacent tech\n✓ casting\n✓ pointer arithmetic\nunary &"
  },
  {
    "objectID": "struct.html#casting",
    "href": "struct.html#casting",
    "title": "struct",
    "section": "Casting",
    "text": "Casting\n\nTo cast, given a literal value or a variable, cast using a type name enclosed in parenthesis as a prefix operator.\n\nIn many cases, this helps with code clarity even when no compiler warning is drawn. char lil = (char)255 ; // 255 is larger than an unsigned char can hold printf(\"%d\\n\", lil) ; // prints \"-1\"\nWe can use casts to change pointers into values - this is usually a bad idea: char *str = \"hi\" ; long val = (long)str ; // str is the numerical value of memory location printf(\"%ld\\n\", val) ; // prints some large value in decimal\nWe can use casts to fill out more bits… val = (long)lil ; printf(\"%lx\\n\", val) ; // prints 16 f's (-1) val = (long)(unsigned char)lil ; printf(\"%lx\\n\", val) ; // prints 2 f's (255)\nOr cut bits off… val = 0xabc ; lil = (char)val ; printf(\"%hhx\\n\", val ) ; // prints \"bc\""
  },
  {
    "objectID": "struct.html#casting-1",
    "href": "struct.html#casting-1",
    "title": "struct",
    "section": "Casting",
    "text": "Casting\nint main() { char buf[8] = \"hihi :)\" ; // we create a string long *tmp = (long *)buf ; // we say buf is the addr of a long long num = *tmp ; // we say num is the value of stored at buf void *ptr = (void *)num ; // we say the value in num is, itself, an addr size_t siz = (size_t)num ; // we say the value in num is a size printf(\"%s / %p / %zu / %ld\\n\", buf, ptr, siz, num ) ; for ( int i = 7 ; i &gt; -1 ; i-- ) { printf(\"%02hhX\", buf[i]) ; } printf(\" / %016lx / %016lx / %016lx\\n\", (long unsigned)ptr, (long unsigned)siz, (long unsigned)num ) ; return 0 ; }\nuser@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out hihi :) / 0x293a2069686968 / 11604384926951784 / 11604384926951784 00293A2069686968 / 00293a2069686968 / 00293a2069686968 / 00293a2069686968 user@DESKTOP-THMS2PJ:~$"
  },
  {
    "objectID": "struct.html#implicit-casting",
    "href": "struct.html#implicit-casting",
    "title": "struct",
    "section": "Implicit Casting",
    "text": "Implicit Casting\n\nThe compiler can infer casts, but if they are sketchy will throw a warning: int main() { void *ptr = 'h' ; return 0; }\nIt is unlikely that this code was written as intended. GCC warns: hi.c: In function ‘main’: hi.c:13:17: warning: initialization of ‘void *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion] 13 | void *ptr = 'h' ; |\nI think GCC could be more aggressive with signed vs unsigned values, but that’s just me.\nThis segfaults after compiling without any warnings. Fun! void *ptr = (void *)'h' ; printf(\"%s\", (char *)ptr ) ; // segfault"
  },
  {
    "objectID": "struct.html#casting-as-documentation",
    "href": "struct.html#casting-as-documentation",
    "title": "struct",
    "section": "Casting as Documentation",
    "text": "Casting as Documentation\n\nSometimes we can use casts to make it more clear what our code should be doing. char *str = (char *)malloc(sizeof(char) * 8) ; // malloc returns void *\nI like void casts, they remind me of Python “_ =” which I use in notebooks to discard output. (void)printf(\"%s\\n\", str) ; // printf returns an int - we don't care.\nSometimes, e.g. in textual analysis, we count characters… char *in = \"loremipsum\" ; // etc unsigned counts[26] ; // what are the default values here btw while (str[i++]) { counts[(size_t)(in[i] - 'a')]++ ; // use letter as index }\nPython is generally used for text analysis now, but C is still in use."
  },
  {
    "objectID": "struct.html#casting-2",
    "href": "struct.html#casting-2",
    "title": "struct",
    "section": "Casting",
    "text": "Casting\nint main() { char buf[8] = \"hihi :)\" ; // we create a string long *tmp = (long *)buf ; // we say buf is the addr of a long long num = *tmp ; // we say num is the value of stored at buf void *ptr = (void *)num ; // we say the value in num is, itself, an addr size_t siz = (size_t)num ; // we say the value in num is a size printf(\"%s / %p / %zu / %ld\\n\", buf, ptr, siz, num ) ; for ( int i = 7 ; i &gt; -1 ; i-- ) { printf(\"%02hhX\", buf[i]) ; } printf(\" / %016lx / %016lx / %016lx\\n\", (long unsigned)ptr, (long unsigned)siz, (long unsigned)num ) ; return 0 ; }\nuser@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out hihi :) / 0x293a2069686968 / 11604384926951784 / 11604384926951784 00293A2069686968 / 00293a2069686968 / 00293a2069686968 / 00293a2069686968 user@DESKTOP-THMS2PJ:~$"
  },
  {
    "objectID": "struct.html#takeaways-1",
    "href": "struct.html#takeaways-1",
    "title": "struct",
    "section": "Takeaways",
    "text": "Takeaways\n\nCast the return value of malloc. int main() { char *ptr = malloc(8) ; // error-prone, ambigious char *str = (char *)malloc(sizeof(char) * 8) ; // more intentional }\nMuch bigger deal when using types of size other than one, or of unknown size."
  },
  {
    "objectID": "struct.html#today-5",
    "href": "struct.html#today-5",
    "title": "struct",
    "section": "Today",
    "text": "Today\nMalloc part 2\n✓ free()\nChecking malloc return value\n✓ Memory-adjacent tech\n✓ casting\n✓ pointer arithmetic\n✓ unary &"
  },
  {
    "objectID": "struct.html#pointer-arithmetic",
    "href": "struct.html#pointer-arithmetic",
    "title": "struct",
    "section": "Pointer Arithmetic",
    "text": "Pointer Arithmetic\n\nWait a minute… sizeof(int) != 1.\nWhatever value q is must be some value other than 1 away from q[1]\nYet we do not address the next int in an array by saying q[1*sizeof(int)]\nRecall:\n\nLot going on here. We’ll discuss this latter as “pointer arithmetic”, a “C bad” discussion."
  },
  {
    "objectID": "struct.html#recall-python-bad",
    "href": "struct.html#recall-python-bad",
    "title": "struct",
    "section": "Recall: Python bad",
    "text": "Recall: Python bad\n\nPeople are allowed to like things, so you are allowed to like this.\nI don’t. &gt;&gt;&gt; x, y, s, t = 1, 2, \"h\", \"i\" &gt;&gt;&gt; x + y 3 &gt;&gt;&gt; x + s Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt; TypeError: unsupported operand type(s) for +: 'int' and 'str' &gt;&gt;&gt; s + t 'hi' &gt;&gt;&gt;\nThis is called operator overloading. It’s not allowed in C."
  },
  {
    "objectID": "struct.html#recall-c-good",
    "href": "struct.html#recall-c-good",
    "title": "struct",
    "section": "Recall: C Good",
    "text": "Recall: C Good\n\nYou honestly mean to tell me “one” + “two” should be “onetwo” and not “three”?\nIf you try to add strings together, gcc tells you to to rethink your decisions. int main() { char *str0 = \"If thou dost appreciate/\" ; char *str1 = \"Then thine shalt place/\" ; printf(str0 + str1) ; return 0 ; }\nThanks, C. user@DESKTOP-THMS2PJ:~/dev/as_zagreb/271sp24/notes$ gcc test.c ; ./a.out test.c: In function ‘main’: test.c:16:17: error: invalid operands to binary + (have ‘char *’ and ‘char *’) 16 | printf(str0 + str1) ; | ^ user@DESKTOP-THMS2PJ:~/dev/as_zagreb/271sp24/notes$\nWhat does “binary” mean here? (Hint: MATH 251W)"
  },
  {
    "objectID": "struct.html#c-bad",
    "href": "struct.html#c-bad",
    "title": "struct",
    "section": "C… Bad?",
    "text": "C… Bad?\n\nOkay but what about when we add 0x100 + 0x001. int main() { long unsigned *p = (long unsigned *) 0x100 ; long unsigned x = (long unsigned ) 0x001 ; // With casting, %p expects \"void *\", so we cast to (void *) printf(\"%p + %p = %p\\n\", (void *)p, (void *)x, (void *)(p + x)) ; return 0; }\nThis should be easy. user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out 0x100 + 0x1 = 0x108 user@DESKTOP-THMS2PJ:~$\n0x100 + 0x1 = 0x108\nOkay that seems pretty bad, fair enough."
  },
  {
    "objectID": "struct.html#c-bad-1",
    "href": "struct.html#c-bad-1",
    "title": "struct",
    "section": "C… Bad?",
    "text": "C… Bad?\n\nAt least it’s consistent. printf(\"%p + %p = %p \\n\", (void *)p, (void *)x, (void *)((char *)p + x)) ; printf(\"%p + %p = %p \\n\", (void *)p, (void *)x, (void *)((int *)p + x)) ; printf(\"%p + %p = %p \\n\", (void *)p, (void *)x, (void *)((long *)p + x)) ;\nAll 0x108 I’m sure. user@DESKTOP-THMS2PJ:~$ ./a.out 0x100 + 0x1 = 0x101 0x100 + 0x1 = 0x104 0x100 + 0x1 = 0x108 user@DESKTOP-THMS2PJ:~$\nWAIT A MINUTE"
  },
  {
    "objectID": "struct.html#c-bad-2",
    "href": "struct.html#c-bad-2",
    "title": "struct",
    "section": "C… Bad?",
    "text": "C… Bad?\n\n“This is called operator overloading. It’s not allowed in C.”\nAddition and subtraction are overloaded in C.\n\nMy advice: Never use either.\n\nIn C, addition is specifically defined in the case where pointer has a numerical value added to it.\n\nint * + int\nint * + long\nchar * + int\nlong * + char\n\nSubtraction is defined on two numeric types or two pointer types.\nPointer + pointer is not allowed. hi.c: In function ‘main’: hi.c:11:76: error: invalid operands to binary + (have ‘char *’ and ‘char *’) 11 | printf(\"%p\\n\", (char *)p + (char *)x ) ;\nC cleverly calls this “pointer arithmetic” so we can pretend operator overloading isn’t allowed in C.\nC good! Python bad! We did it team! Firm handshakes all around."
  },
  {
    "objectID": "struct.html#wait-what-about",
    "href": "struct.html#wait-what-about",
    "title": "struct",
    "section": "Wait what about []",
    "text": "Wait what about []\n\nI have terrible news about arrays.\nPointer arithmetic all the way down my friends. int arr[4] = { 0x10, 0x100, 0x1000, 0x10000 } ; printf(\" arr+1 : %p\\n\", arr+1) ; printf(\"*(arr+1): %p\\n\", *(arr+1)) ; printf(\"(*arr+1): %p\\n\", (*arr+1)) ; printf(\" arr[1]: %p\\n\", arr[1]) ;\n“Wow that is so easy to read and such a useable language.” - me, to myself arr+1 : 0x7fff5956cce4 *(arr+1): 0x100 (*arr+1): 0x11 arr[1]: 0x100\nOh perfect - arr[n] is logically equivalent to *(arr+n) ;"
  },
  {
    "objectID": "struct.html#arrn-arrn",
    "href": "struct.html#arrn-arrn",
    "title": "struct",
    "section": "arr[n] = *(arr+n)",
    "text": "arr[n] = *(arr+n)\n\nTest it. int main() { int arr[4] = { 0x10, 0x100, 0x1000, 0x10000 }, i ; for ( i = 0 ; i &lt; 4 ; i++ ) { printf(\"*(arr+%d): %5x, arr[%d]: %5x\\n\", i, *(arr+i), i, arr[i]) ; } return 0; }\n“Come sail away, come sail away, come sail away with C” - me user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out *(arr+0): 10, arr[0]: 10 *(arr+1): 100, arr[1]: 100 *(arr+2): 1000, arr[2]: 1000 *(arr+3): 10000, arr[3]: 10000 user@DESKTOP-THMS2PJ:~$\narr[n] is logically equivalent to *(arr+n)."
  },
  {
    "objectID": "struct.html#arrn-arrn-1",
    "href": "struct.html#arrn-arrn-1",
    "title": "struct",
    "section": "arr[n] = *(arr+n)",
    "text": "arr[n] = *(arr+n)\n\nLiterally never do this ever for any reason. int main() { int arr[4] = { 0x10, 0x100, 0x1000, 0x10000 }, i ; for ( i = 0 ; i &lt; 4 ; i++ ) { printf(\"%d[arr]: %5x\\n\", i, i[arr]) ; } printf(\"1[(long *)arr: %5lx\\n\", 1[(long *)arr]); // NO! return 0; }\nI am going to become the joker. user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out 0[arr]: 10 1[arr]: 100 2[arr]: 1000 3[arr]: 10000 1[(long *)arr]: 1000 user@DESKTOP-THMS2PJ:~$"
  },
  {
    "objectID": "struct.html#today-6",
    "href": "struct.html#today-6",
    "title": "struct",
    "section": "Today",
    "text": "Today\n✓ Malloc part 2\n✓ free()\nMemory-adjacent tech\n✓ casting\npointer arithmetic\nunary &"
  },
  {
    "objectID": "struct.html#unary",
    "href": "struct.html#unary",
    "title": "struct",
    "section": "Unary &",
    "text": "Unary &\n\n& is both a unary and binary operator in C, like - (minus) int main() { int x ; x = 1 - 2 ; x = - 2 ; int y ; x = 0x11 ; y = 0x10 ; x = x & y ; // BITWISE and, so 0x10 x = & y ; // is this allowed? return 0; }\nWhat does unary & do? hi.c: In function ‘main’: hi.c:15:11: warning: assignment to ‘int’ from ‘int *’ makes integer from pointer without a cast [-Wint-conversion] 15 | x = & y ; | ^"
  },
  {
    "objectID": "struct.html#unary-1",
    "href": "struct.html#unary-1",
    "title": "struct",
    "section": "Unary &",
    "text": "Unary &\nhi.c: In function ‘main’: hi.c:15:11: warning: assignment to ‘int’ from ‘int *’ makes integer from pointer without a cast [-Wint-conversion] 15 | x = & y ; | ^* Pointers! Our* favorite**! * We know how to examine these. int main() { int x = 0xF0, y = 0x0F, *p ; // just unique vals p = &y ; printf(\"*p = %x, p = %p\\n\", *p, p) ; return 0; } * This gives us: user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out *p = f, p = 0x7fff37619e98 user@DESKTOP-THMS2PJ:~$ * Ah ha, & is inverse *."
  },
  {
    "objectID": "struct.html#unary-is-inverse",
    "href": "struct.html#unary-is-inverse",
    "title": "struct",
    "section": "Unary & is inverse *",
    "text": "Unary & is inverse *\nint main() { int x = 0xF0, y = 0x0F, *p ; // just unique vals p = &y ; printf(\"*p = %x, p = %p\\n\", *p, p) ; printf(\" y = %x, &y = %p\\n\", y, &y) ; return 0; }* p = &y -&gt; *p = y user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out *p = f, p = 0x7ffc85ee5f68 y = f, &y = 0x7ffc85ee5f68 user@DESKTOP-THMS2PJ:~$ * I bet it works in reverse."
  },
  {
    "objectID": "struct.html#is-not-inverse-unary",
    "href": "struct.html#is-not-inverse-unary",
    "title": "struct",
    "section": "* is not inverse Unary &",
    "text": "* is not inverse Unary &\nint main() { int x = 0xF0, y = 0x0F, *p ; // just unique vals *p = y ; printf(\"*p = %x, p = %p\\n\", *p, p) ; printf(\" y = %x, &y = %p\\n\", y, &y) ; return 0; }* *p = y -/&gt; p = &y user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out Segmentation fault user@DESKTOP-THMS2PJ:~$ * p is an unitialized pointer, and dereferencing (with *) an uninitialized pointer causes a segfault at high probability."
  },
  {
    "objectID": "struct.html#is-not-inverse-unary-1",
    "href": "struct.html#is-not-inverse-unary-1",
    "title": "struct",
    "section": "* is not inverse Unary &",
    "text": "* is not inverse Unary &\n\nOutmanuever segmentation faults with judicious use of malloc() and free(). int main() { int x = 0xF0, y = 0x0F, *p = (int *)malloc(sizeof(int)); // just unique vals *p = y ; printf(\"*p = %x, p = %p\\n\", *p, p) ; printf(\" y = %x, &y = %p\\n\", y, &y) ; free(p) ; return 0; }\nBut this just means the value of y is stored at p, not that p points to y. user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out *p = f, p = 0x556ae59ec2a0 y = f, &y = 0x7ffc47f075c8 user@DESKTOP-THMS2PJ:~$\n*p = y creates a copy of the value stored in y."
  },
  {
    "objectID": "struct.html#today-7",
    "href": "struct.html#today-7",
    "title": "struct",
    "section": "Today",
    "text": "Today\n✓ Malloc part 2\n✓ free()\nMemory-adjacent tech\n✓ casting\n✓ pointer arithmetic\nunary &"
  },
  {
    "objectID": "struct.html#malloc-fails",
    "href": "struct.html#malloc-fails",
    "title": "struct",
    "section": "Malloc fails",
    "text": "Malloc fails\n\nThere is no guarantee that your malloc actually gets the memory it asks for.\n\nIn fact, its impossible to make a computer that guarantees this.\nRather, it is very likely to return correctly.\nBut you must check.\n\nint main() { int x = 0xF0, y = 0x0F, *p = (int *)malloc(sizeof(int)); // just unique vals if (p == 0) { fprintf(stderr, \"Malloc failed.\\n\") ; exit(-1) ; } *p = y ; printf(\"*p = %x, p = %p\\n\", *p, p) ; printf(\" y = %x, &y = %p\\n\", y, &y) ; free(p) ; return 0; }\nThis is what exit is for.\nfprintf is like printf but doesn’t just go to “stdout”.\n\nStderr is a lot like stdout but also different (we’ll get there).\nIt shows up in terminal."
  },
  {
    "objectID": "struct.html#malloc-fails-1",
    "href": "struct.html#malloc-fails-1",
    "title": "struct",
    "section": "Malloc fails",
    "text": "Malloc fails\n\nWe can trigger an P=1 failure with by using -1 to get the maximum possible size_t value. int main() { void *p = malloc(-1); if (p == 0) { fprintf(stderr, \"Malloc failed.\\n\") ; exit(-1) ; } return 0; }\nWe draw a compile warning (you can fail mallocs without this, but fail at 100% rate with these): user@DESKTOP-THMS2PJ:~$ gcc hi.c hi.c: In function ‘main’: hi.c:6:19: warning: argument 1 value ‘18446744073709551615’ exceeds maximum object size 9223372036854775807 [-Walloc-size-larger-than=] 6 | void *p = malloc(-1); | ^~~~~~~~~~ In file included from hi.c:2: /usr/include/stdlib.h:540:14: note: in a call to allocation function ‘malloc’ declared here 540 | extern void *malloc (size_t __size) __THROW __attribute_malloc__ | ^~~~~~ user@DESKTOP-THMS2PJ:~$"
  },
  {
    "objectID": "struct.html#malloc-fails-2",
    "href": "struct.html#malloc-fails-2",
    "title": "struct",
    "section": "Malloc fails",
    "text": "Malloc fails\n\nWe can trigger an P=1 failure with by using -1 to get the maximum possible size_t value. int main() { void *p = malloc(-1); if (p == 0) { fprintf(stderr, \"Malloc failed.\\n\") ; exit(-1) ; } return 0; }\nIf we run the code: user@DESKTOP-THMS2PJ:~$ ./a.out Malloc failed. user@DESKTOP-THMS2PJ:~$\nIf malloc fails and you attempt to use the pointer, you will segfault.\nIf that happens and you ask me for help I’ll send you this slide!\nC! It’s fun!"
  },
  {
    "objectID": "struct.html#today-8",
    "href": "struct.html#today-8",
    "title": "struct",
    "section": "Today",
    "text": "Today\nMalloc part 2\n✓ free()\nChecking malloc return value\n✓ Memory-adjacent tech\n✓ casting\n✓ pointer arithmetic\n✓ unary &"
  },
  {
    "objectID": "struct.html#stack-heap-4",
    "href": "struct.html#stack-heap-4",
    "title": "struct",
    "section": "Stack & Heap",
    "text": "Stack & Heap\n\nNext slides credit Jenny Chen and Ruohao Guo.\n\n\n\n\nJenny Chen\nRuohao Guo\n\n\n\n\nshe/her\nshe/her\n\n\nSoftware Engineer\nGraduate Research Assistant\n\n\nApple\nGeorgia Institute of Technology\n\n\nB.S. Computer Science, 2021, UIUC\nB.S. Computer Science, 2021, UIUC\n\n\n\n\nUIUC is ranked #5 nationally is CS, ~#1 in Systems.\nThe course materials from Jenny Chen and Ruohao Guo are available here."
  },
  {
    "objectID": "struct.html#heap-example-14",
    "href": "struct.html#heap-example-14",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p.\n\nStore 0 at the heap location p references.\nThree operations.\n\nStack-allocate q for main.\nHeap-allocate 2 * sizeof(int) bytes\nStore the heap location in q.\n\nStore 1 at the heap location q references.\nStore 2 at the heap location immediately following q.\n\nLot going on here. We’ll discuss this latter as “pointer arithmetic”, a “C bad” discussion."
  },
  {
    "objectID": "struct.html#heap-example-15",
    "href": "struct.html#heap-example-15",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p.\n\nStore 0 at the heap location p references.\nThree operations.\n\nStack-allocate q for main.\nHeap-allocate 2 * sizeof(int) bytes\nStore the heap location in q.\n\nStore 1 at the heap location q references.\nStore 2 at the heap location immediately following q.\nStore the numerical value referring to heap location q in p."
  },
  {
    "objectID": "struct.html#heap-example-16",
    "href": "struct.html#heap-example-16",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p.\n\nStore 0 at the heap location p references.\nThree operations.\n\nStack-allocate q for main.\nHeap-allocate 2 * sizeof(int) bytes\nStore the heap location in q.\n\nStore 1 at the heap location q references.\nStore 2 at the heap location immediately following q.\n\nLot going on here. We’ll discuss this latter as “pointer arithmetic”, a “C bad” discussion."
  },
  {
    "objectID": "struct.html#heap-example-17",
    "href": "struct.html#heap-example-17",
    "title": "struct",
    "section": "Heap Example",
    "text": "Heap Example\n\nThree operations.\n\nStack-allocate p for main.\nHeap-allocate sizeof(int) bytes\nStore the heap location in p.\n\nStore 0 at the heap location p references.\nThree operations.\n\nStack-allocate q for main.\nHeap-allocate 2 * sizeof(int) bytes\nStore the heap location in q.\n\nStore 1 at the heap location q references.\nStore 2 at the heap location immediately following q.\nStore the numerical value referring to heap location q in p."
  },
  {
    "objectID": "struct.html#today-9",
    "href": "struct.html#today-9",
    "title": "struct",
    "section": "Today",
    "text": "Today\n✓ Malloc part 2\n✓ free()\n✓ Checking malloc return value\n✓ Memory-adjacent tech\n✓ casting\n✓ pointer arithmetic\n✓ unary &\n\n\n\n\n56\nResume presentation\nMalloc fails We can trigger an P=1 failure with by using -1 to get the maximum possible size_t value. int main() { void *p = malloc(- 1 ); if (p == 0 ) { fprintf(stderr, “Malloc failed.\\n” ) ; exit (- 1 ) ; } return 0 ; } If we run the code: user @DESKTOP - THMS2PJ: ~ $ ./a.out Malloc failed. user @DESKTOP - THMS2PJ: ~ $ If malloc fails and you attempt to use the pointer, you will segfault. If that happens and you ask me for help I’ll send you this slide! C! It’s fun!"
  },
  {
    "objectID": "struct.html#gcc",
    "href": "struct.html#gcc",
    "title": "struct",
    "section": "gcc",
    "text": "gcc\n\nAs an aside, to compile this you have to give gcc new arguments. user@DESKTOP-THMS2PJ:~/dev/projs/pair$ gcc test.c /usr/bin/ld: /tmp/ccYQF1sb.o: in function `main': test.c:(.text+0x12): undefined reference to `newp' collect2: error: ld returned 1 exit status user@DESKTOP-THMS2PJ:~/dev/projs/pair$\nYou can omit the newp() call of course (initialize with p.x / p.y) but I’m trying to teach here.\nmain in test.c calls functions written in pair.c, so we must furnish pair.c to gcc. user@DESKTOP-THMS2PJ:~/dev/projs/pair$ gcc test.c pair.c user@DESKTOP-THMS2PJ:~/dev/projs/pair$ ./a.out user@DESKTOP-THMS2PJ:~/dev/projs/pair$\nWe aren’t printing anything, but it doesn’t segfault at least.\nThere’s a better way to do this, latter."
  },
  {
    "objectID": "struct.html#section",
    "href": "struct.html#section",
    "title": "struct",
    "section": "->",
    "text": "-&gt;\n\nRemember: pointers are annoying and confusing. (Also remember: C good)\nBy the way this is how I write when I have more then 20 characters in width: // pair.c #include \"pair.h\" struct pair_struct { int32_t x ; int32_t y ; } ; pair newp() { pair p = (pair)malloc(sizeof(struct pair_struct)) ; return p ; }"
  },
  {
    "objectID": "struct.html#section-1",
    "href": "struct.html#section-1",
    "title": "struct",
    "section": "->",
    "text": "-&gt;\n\nx and y are declared but undefined.\nBUT… p is a pointer to a struct pair_struct, not a struct_pair struct.\np does not “contain” two ints with names… it points to someone who does.\ngcc said: error: ‘p’ is a pointer; did you mean to use ‘-&gt;’?\nSure, let’s try it. struct pair_struct { int32_t x ; // stdint for specificity int32_t y ; } ; pair newp() { pair p = (pair)malloc(8) ; // still use sizeof, I need space p-&gt;x = 0 ; p-&gt;y = 0 ; return p ; }\nThis works! To test at home, you can move the struct back into .h"
  },
  {
    "objectID": "struct.html#section-2",
    "href": "struct.html#section-2",
    "title": "struct",
    "section": "->",
    "text": "-&gt;\n\nTest it.\n// test.c #include \"pair.h\" int main() { pair p ; p-&gt;x = 1 ; printf( \"%d\\n\", p-&gt;x ) ; return 0 ; }\n// pair.h struct pair_s { int32_t x, y ; } ; typedef struct pair_s *pair ; pair newp() ;\n// pair.c #include \"pair.h\" pair newp() { return malloc(8); }\nNo errors, but a segmentation fault. user@DESKTOP-THMS2PJ:~/dev/projs/pair$ gcc test.c pair.c ; ./a.out Segmentation fault user@DESKTOP-THMS2PJ:~/dev/projs/pair$\nWhy?\np is an uninitialized (declared but not defined) pointer"
  },
  {
    "objectID": "struct.html#section-3",
    "href": "struct.html#section-3",
    "title": "struct",
    "section": "->",
    "text": "-&gt;\n\nUse newp()\n// test.c #include \"pair.h\" int main() { pair p = newp(); p-&gt;x = 1 ; printf( \"%d\\n\", p-&gt;x ) ; frep(p) ; return 0 ; }\n// pair.h struct pair_s { int32_t x, y ; } ; typedef struct pair_s *pair ; pair newp() ; void frep(pair p) ;\n// pair.c #include \"pair.h\" pair newp() { return malloc(8) ; } void frep(pair p) { free(p) ; }\nWith the pointer initialized to a valid memory location, we are able to use “-&gt;” amicably. user@DESKTOP-THMS2PJ:~/dev/projs/pair$ gcc test.c pair.c ; ./a.out 1 user@DESKTOP-THMS2PJ:~/dev/projs/pair$\nWhy?\np is malloced and freed - it has a valid memory location."
  },
  {
    "objectID": "malloc.html#implicit-casting",
    "href": "malloc.html#implicit-casting",
    "title": "malloc",
    "section": "Implicit Casting",
    "text": "Implicit Casting\n\nThe compiler can infer casts, but if they are sketchy will throw a warning: int main() { void *ptr = 'h' ; return 0; }\nIt is unlikely that this code was written as intended. GCC warns: hi.c: In function ‘main’: hi.c:13:17: warning: initialization of ‘void *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion] 13 | void *ptr = 'h' ; |\nI think GCC could be more aggressive with signed vs unsigned values, but that’s just me.\nThis segfaults after compiling without any warnings. Fun! void *ptr = (void *)'h' ; printf(\"%s\", (char *)ptr ) ; // segfault"
  },
  {
    "objectID": "malloc.html#casting-as-documentation",
    "href": "malloc.html#casting-as-documentation",
    "title": "malloc",
    "section": "Casting as Documentation",
    "text": "Casting as Documentation\n\nSometimes we can use casts to make it more clear what our code should be doing. char *str = (char *)malloc(sizeof(char) * 8) ; // malloc returns void *\nI like void casts, they remind me of Python “_ =” which I use in notebooks to discard output. (void)printf(\"%s\\n\", str) ; // printf returns an int - we don't care.\nSometimes, e.g. in textual analysis, we count characters… char *in = \"loremipsum\" ; // etc unsigned counts[26] ; // what are the default values here btw while (str[i++]) { counts[(size_t)(in[i] - 'a')]++ ; // use letter as index }\nPython is generally used for text analysis now, but C is still in use."
  },
  {
    "objectID": "malloc.html#casting-1",
    "href": "malloc.html#casting-1",
    "title": "malloc",
    "section": "Casting",
    "text": "Casting\nint main() { char buf[8] = \"hihi :)\" ; // we create a string long *tmp = (long *)buf ; // we say buf is the addr of a long long num = *tmp ; // we say num is the value of stored at buf void *ptr = (void *)num ; // we say the value in num is, itself, an addr size_t siz = (size_t)num ; // we say the value in num is a size printf(\"%s / %p / %zu / %ld\\n\", buf, ptr, siz, num ) ; for ( int i = 7 ; i &gt; -1 ; i-- ) { printf(\"%02hhX\", buf[i]) ; } printf(\" / %016lx / %016lx / %016lx\\n\", (long unsigned)ptr, (long unsigned)siz, (long unsigned)num ) ; return 0 ; }\nuser@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out hihi :) / 0x293a2069686968 / 11604384926951784 / 11604384926951784 00293A2069686968 / 00293a2069686968 / 00293a2069686968 / 00293a2069686968 user@DESKTOP-THMS2PJ:~$"
  },
  {
    "objectID": "malloc.html#takeaways-1",
    "href": "malloc.html#takeaways-1",
    "title": "malloc",
    "section": "Takeaways",
    "text": "Takeaways\n\nCast the return value of malloc. int main() { char *ptr = malloc(8) ; // error-prone, ambigious char *str = (char *)malloc(sizeof(char) * 8) ; // more intentional }\nMuch bigger deal when using types of size other than one, or of unknown size."
  },
  {
    "objectID": "malloc.html#today-3",
    "href": "malloc.html#today-3",
    "title": "malloc",
    "section": "Today",
    "text": "Today\nMalloc part 2\n✓ free()\nChecking malloc return value\n✓ Memory-adjacent tech\n✓ casting\n✓ pointer arithmetic\n✓ unary &"
  },
  {
    "objectID": "malloc.html#pointer-arithmetic",
    "href": "malloc.html#pointer-arithmetic",
    "title": "malloc",
    "section": "Pointer Arithmetic",
    "text": "Pointer Arithmetic\n\nWait a minute… sizeof(int) != 1.\nWhatever value q is must be some value other than 1 away from q[1]\nYet we do not address the next int in an array by saying q[1*sizeof(int)]\nRecall:\n\nLot going on here. We’ll discuss this latter as “pointer arithmetic”, a “C bad” discussion."
  },
  {
    "objectID": "malloc.html#recall-python-bad",
    "href": "malloc.html#recall-python-bad",
    "title": "malloc",
    "section": "Recall: Python bad",
    "text": "Recall: Python bad\n\nPeople are allowed to like things, so you are allowed to like this.\nI don’t. &gt;&gt;&gt; x, y, s, t = 1, 2, \"h\", \"i\" &gt;&gt;&gt; x + y 3 &gt;&gt;&gt; x + s Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt; TypeError: unsupported operand type(s) for +: 'int' and 'str' &gt;&gt;&gt; s + t 'hi' &gt;&gt;&gt;\nThis is called operator overloading. It’s not allowed in C."
  },
  {
    "objectID": "malloc.html#recall-c-good",
    "href": "malloc.html#recall-c-good",
    "title": "malloc",
    "section": "Recall: C Good",
    "text": "Recall: C Good\n\nIf you add strings together, gcc stops you.\n\nvoid main() {\n        \"a\" + \"b\";\n}\n\nThanks, gcc.\n\nleaky.c: In function ‘main’:\nleaky.c:2:13: error: invalid operands to binary + (have ‘char *’ and ‘char *’)\n    2 |         \"a\" + \"b\";\n      |         ~~~ ^\n      |         |   |\n      |         |   char *\n      |         char *\n\nWhat does “binary” mean ? (Hint: MATH 251W)"
  },
  {
    "objectID": "malloc.html#c-bad",
    "href": "malloc.html#c-bad",
    "title": "malloc",
    "section": "C… Bad?",
    "text": "C… Bad?\n\n“This is called operator overloading. It’s not allowed in C.”\nAddition and subtraction are overloaded in C.\n\nMy advice: Never use either.\n\nIn C, addition is specifically defined in the case where pointer has a numerical value added to it.\n\nint * + int\nint * + long\nchar * + int\nlong * + char\n\nSubtraction is defined on two numeric types or two pointer types.\nPointer + pointer is not allowed. hi.c: In function ‘main’: hi.c:11:76: error: invalid operands to binary + (have ‘char *’ and ‘char *’) 11 | printf(\"%p\\n\", (char *)p + (char *)x ) ;\nC cleverly calls this “pointer arithmetic” so we can pretend operator overloading isn’t allowed in C.\nC good! Python bad! We did it team! Firm handshakes all around."
  },
  {
    "objectID": "malloc.html#c-bad-1",
    "href": "malloc.html#c-bad-1",
    "title": "malloc",
    "section": "C… Bad?",
    "text": "C… Bad?\n\n“This is called operator overloading. It’s not allowed in C.”\nAddition and subtraction are overloaded in C.\n\nMy advice: Never use either.\n\nIn C, addition is specifically defined in the case where pointer has a numerical value added to it.\n\nint * + int\nint * + long\nchar * + int\nlong * + char\n\nSubtraction is defined on two numeric types or two pointer types.\nPointer + pointer is not allowed. hi.c: In function ‘main’: hi.c:11:76: error: invalid operands to binary + (have ‘char *’ and ‘char *’) 11 | printf(\"%p\\n\", (char *)p + (char *)x ) ;\nC cleverly calls this “pointer arithmetic” so we can pretend operator overloading isn’t allowed in C.\nC good! Python bad! We did it team! Firm handshakes all around."
  },
  {
    "objectID": "malloc.html#c-bad-2",
    "href": "malloc.html#c-bad-2",
    "title": "malloc",
    "section": "C… Bad?",
    "text": "C… Bad?\n\n“This is called operator overloading. It’s not allowed in C.”\nAddition and subtraction are overloaded in C.\n\nMy advice: Never use either.\n\nIn C, addition is specifically defined in the case where pointer has a numerical value added to it.\n\nint * + int\nint * + long\nchar * + int\nlong * + char\n\nSubtraction is defined on two numeric types or two pointer types.\nPointer + pointer is not allowed. hi.c: In function ‘main’: hi.c:11:76: error: invalid operands to binary + (have ‘char *’ and ‘char *’) 11 | printf(\"%p\\n\", (char *)p + (char *)x ) ;\nC cleverly calls this “pointer arithmetic” so we can pretend operator overloading isn’t allowed in C.\nC good! Python bad! We did it team! Firm handshakes all around."
  },
  {
    "objectID": "malloc.html#wait-what-about",
    "href": "malloc.html#wait-what-about",
    "title": "malloc",
    "section": "Wait what about []",
    "text": "Wait what about []\n\nI have terrible news about arrays.\nPointer arithmetic all the way down my friends. int arr[4] = { 0x10, 0x100, 0x1000, 0x10000 } ; printf(\" arr+1 : %p\\n\", arr+1) ; printf(\"*(arr+1): %p\\n\", *(arr+1)) ; printf(\"(*arr+1): %p\\n\", (*arr+1)) ; printf(\" arr[1]: %p\\n\", arr[1]) ;\n“Wow that is so easy to read and such a useable language.” - me, to myself arr+1 : 0x7fff5956cce4 *(arr+1): 0x100 (*arr+1): 0x11 arr[1]: 0x100\nOh perfect - arr[n] is logically equivalent to *(arr+n) ;"
  },
  {
    "objectID": "malloc.html#arrn-arrn",
    "href": "malloc.html#arrn-arrn",
    "title": "malloc",
    "section": "arr[n] = *(arr+n)",
    "text": "arr[n] = *(arr+n)\n\nTest it. int main() { int arr[4] = { 0x10, 0x100, 0x1000, 0x10000 }, i ; for ( i = 0 ; i &lt; 4 ; i++ ) { printf(\"*(arr+%d): %5x, arr[%d]: %5x\\n\", i, *(arr+i), i, arr[i]) ; } return 0; }\n“Come sail away, come sail away, come sail away with C” - me user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out *(arr+0): 10, arr[0]: 10 *(arr+1): 100, arr[1]: 100 *(arr+2): 1000, arr[2]: 1000 *(arr+3): 10000, arr[3]: 10000 user@DESKTOP-THMS2PJ:~$\narr[n] is logically equivalent to *(arr+n)."
  },
  {
    "objectID": "malloc.html#arrn-arrn-1",
    "href": "malloc.html#arrn-arrn-1",
    "title": "malloc",
    "section": "arr[n] = *(arr+n)",
    "text": "arr[n] = *(arr+n)\n\nLiterally never do this ever for any reason. int main() { int arr[4] = { 0x10, 0x100, 0x1000, 0x10000 }, i ; for ( i = 0 ; i &lt; 4 ; i++ ) { printf(\"%d[arr]: %5x\\n\", i, i[arr]) ; } printf(\"1[(long *)arr: %5lx\\n\", 1[(long *)arr]); // NO! return 0; }\nI am going to become the joker. user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out 0[arr]: 10 1[arr]: 100 2[arr]: 1000 3[arr]: 10000 1[(long *)arr]: 1000 user@DESKTOP-THMS2PJ:~$"
  },
  {
    "objectID": "malloc.html#today-4",
    "href": "malloc.html#today-4",
    "title": "malloc",
    "section": "Today",
    "text": "Today\nMalloc part 2\n✓ free()\nChecking malloc return value\n✓ Memory-adjacent tech\n✓ casting\n✓ pointer arithmetic\n✓ unary &"
  },
  {
    "objectID": "malloc.html#unary",
    "href": "malloc.html#unary",
    "title": "malloc",
    "section": "Unary &",
    "text": "Unary &\n\n& is both a unary and binary operator in C, like - (minus) int main() { int x ; x = 1 - 2 ; x = - 2 ; int y ; x = 0x11 ; y = 0x10 ; x = x & y ; // BITWISE and, so 0x10 x = & y ; // is this allowed? return 0; }\nWhat does unary & do? hi.c: In function ‘main’: hi.c:15:11: warning: assignment to ‘int’ from ‘int *’ makes integer from pointer without a cast [-Wint-conversion] 15 | x = & y ; | ^"
  },
  {
    "objectID": "malloc.html#unary-1",
    "href": "malloc.html#unary-1",
    "title": "malloc",
    "section": "Unary &",
    "text": "Unary &\nhi.c: In function ‘main’: hi.c:15:11: warning: assignment to ‘int’ from ‘int *’ makes integer from pointer without a cast [-Wint-conversion] 15 | x = & y ; | ^* Pointers! Our* favorite**! * We know how to examine these. int main() { int x = 0xF0, y = 0x0F, *p ; // just unique vals p = &y ; printf(\"*p = %x, p = %p\\n\", *p, p) ; return 0; } * This gives us: user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out *p = f, p = 0x7fff37619e98 user@DESKTOP-THMS2PJ:~$ * Ah ha, & is inverse *."
  },
  {
    "objectID": "malloc.html#unary-is-inverse",
    "href": "malloc.html#unary-is-inverse",
    "title": "malloc",
    "section": "Unary & is inverse *",
    "text": "Unary & is inverse *\nint main() { int x = 0xF0, y = 0x0F, *p ; // just unique vals p = &y ; printf(\"*p = %x, p = %p\\n\", *p, p) ; printf(\" y = %x, &y = %p\\n\", y, &y) ; return 0; }* p = &y -&gt; *p = y user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out *p = f, p = 0x7ffc85ee5f68 y = f, &y = 0x7ffc85ee5f68 user@DESKTOP-THMS2PJ:~$ * I bet it works in reverse."
  },
  {
    "objectID": "malloc.html#is-not-inverse-unary",
    "href": "malloc.html#is-not-inverse-unary",
    "title": "malloc",
    "section": "* is not inverse Unary &",
    "text": "* is not inverse Unary &\n\nOutmanuever segmentation faults with judicious use of malloc() and free(). int main() { int x = 0xF0, y = 0x0F, *p = (int *)malloc(sizeof(int)); // just unique vals *p = y ; printf(\"*p = %x, p = %p\\n\", *p, p) ; printf(\" y = %x, &y = %p\\n\", y, &y) ; free(p) ; return 0; }\nBut this just means the value of y is stored at p, not that p points to y. user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out *p = f, p = 0x556ae59ec2a0 y = f, &y = 0x7ffc47f075c8 user@DESKTOP-THMS2PJ:~$\n*p = y creates a copy of the value stored in y."
  },
  {
    "objectID": "malloc.html#is-not-inverse-unary-1",
    "href": "malloc.html#is-not-inverse-unary-1",
    "title": "malloc",
    "section": "* is not inverse Unary &",
    "text": "* is not inverse Unary &\n\nOutmanuever segmentation faults with judicious use of malloc() and free(). int main() { int x = 0xF0, y = 0x0F, *p = (int *)malloc(sizeof(int)); // just unique vals *p = y ; printf(\"*p = %x, p = %p\\n\", *p, p) ; printf(\" y = %x, &y = %p\\n\", y, &y) ; free(p) ; return 0; }\nBut this just means the value of y is stored at p, not that p points to y. user@DESKTOP-THMS2PJ:~$ gcc hi.c ; ./a.out *p = f, p = 0x556ae59ec2a0 y = f, &y = 0x7ffc47f075c8 user@DESKTOP-THMS2PJ:~$\n*p = y creates a copy of the value stored in y."
  },
  {
    "objectID": "malloc.html#today-5",
    "href": "malloc.html#today-5",
    "title": "malloc",
    "section": "Today",
    "text": "Today\nMalloc part 2\n✓ free()\nChecking malloc return value\n✓ Memory-adjacent tech\n✓ casting\n✓ pointer arithmetic\n✓ unary &"
  },
  {
    "objectID": "malloc.html#malloc-fails",
    "href": "malloc.html#malloc-fails",
    "title": "malloc",
    "section": "Malloc fails",
    "text": "Malloc fails\n\nWe can trigger an P=1 failure with by using -1 to get the maximum possible size_t value. int main() { void *p = malloc(-1); if (p == 0) { fprintf(stderr, \"Malloc failed.\\n\") ; exit(-1) ; } return 0; }\nIf we run the code: user@DESKTOP-THMS2PJ:~$ ./a.out Malloc failed. user@DESKTOP-THMS2PJ:~$\nIf malloc fails and you attempt to use the pointer, you will segfault.\nIf that happens and you ask me for help I’ll send you this slide!\nC! It’s fun!"
  },
  {
    "objectID": "malloc.html#malloc-fails-1",
    "href": "malloc.html#malloc-fails-1",
    "title": "malloc",
    "section": "Malloc fails",
    "text": "Malloc fails\n\nWe can trigger an P=1 failure with by using -1 to get the maximum possible size_t value. int main() { void *p = malloc(-1); if (p == 0) { fprintf(stderr, \"Malloc failed.\\n\") ; exit(-1) ; } return 0; }\nIf we run the code: user@DESKTOP-THMS2PJ:~$ ./a.out Malloc failed. user@DESKTOP-THMS2PJ:~$\nIf malloc fails and you attempt to use the pointer, you will segfault.\nIf that happens and you ask me for help I’ll send you this slide!\nC! It’s fun!"
  },
  {
    "objectID": "malloc.html#malloc-fails-2",
    "href": "malloc.html#malloc-fails-2",
    "title": "malloc",
    "section": "Malloc fails",
    "text": "Malloc fails\n\nWe can trigger an P=1 failure with by using -1 to get the maximum possible size_t value. int main() { void *p = malloc(-1); if (p == 0) { fprintf(stderr, \"Malloc failed.\\n\") ; exit(-1) ; } return 0; }\nIf we run the code: user@DESKTOP-THMS2PJ:~$ ./a.out Malloc failed. user@DESKTOP-THMS2PJ:~$\nIf malloc fails and you attempt to use the pointer, you will segfault.\nIf that happens and you ask me for help I’ll send you this slide!\nC! It’s fun!"
  },
  {
    "objectID": "bchain.html#transactions",
    "href": "bchain.html#transactions",
    "title": "bchain",
    "section": "# Transactions",
    "text": "# Transactions\n\nA chain of digital signatures\n\n\nRather than a physical coin, an electronic coin is a record.\n\nRecords can be stored in multiple locations, coins cannot\nRecords can produced by anyone, coins cannot\nRecords describe ownership, coins cannot\n\nI can lose, find, or forge a coin, not so for a record (of past events)"
  },
  {
    "objectID": "bchain.html#doublecount-1",
    "href": "bchain.html#doublecount-1",
    "title": "bchain",
    "section": "Doublecount",
    "text": "Doublecount\n\nThe problem of course is the payee can’t verify that one of the owners did not double-spend the coin.\n\n\nBanks with only n coins are the exact problem\n\nThe bank is sole arbiter of providing credit with those coins.\nBanks with finite coins are vulnerable to bank runs.\nBanks have operating expenses that incur transaction costs.\nA bank must be trusted (very tough in early 2009, or… ever?)"
  },
  {
    "objectID": "merkle.html",
    "href": "merkle.html",
    "title": "bchain",
    "section": "",
    "text": "Welcome to variously CS 276/CS 540\n\nBlockchain\n\nAction Items:\n\nlist_t after this"
  },
  {
    "objectID": "merkle.html#the-bitcoin-network",
    "href": "merkle.html#the-bitcoin-network",
    "title": "Graphs",
    "section": "The Bitcoin Network",
    "text": "The Bitcoin Network\n\nThe network operates as follows (CD:)\n\nBroadcast (Transactions)\nCollect\nWork/Mine\nBroadcast (Block)\nAccept\nExpress"
  },
  {
    "objectID": "merkle.html#incentive",
    "href": "merkle.html#incentive",
    "title": "Graphs",
    "section": "Incentive",
    "text": "Incentive\n\nThe system only works if there’s a reason to invest in mining\n\nThe incentive can also be funded with transaction fees\n\n\nIf you really want your transaction to be accepted, offer a small amount of coinage as a transaction fee.\nThis is done by creating a transaction with no receipient, and the default receipient is regarded as the miner.\nTransaction fees allow inflationless mining.\nThe last bitcoin (21M’th) will be mined circa 2140 and the system will be fee-only at that time.\n\nThe incentive may help encourage nodes to stay honest.\n\nSN, paraphrased: Fees will likely be more lucrative than theft.\nCD: Attackers will likely be political motivated to destabilize the currency."
  },
  {
    "objectID": "merkle.html#incentive-1",
    "href": "merkle.html#incentive-1",
    "title": "Graphs",
    "section": "Incentive",
    "text": "Incentive\n\nThe system only works if there’s a reason to invest in mining\n\nThe incentive can also be funded with transaction fees\n\n\nIf you really want your transaction to be accepted, offer a small amount of coinage as a transaction fee.\nThis is done by creating a transaction with no receipient, and the default receipient is regarded as the miner.\nTransaction fees allow inflationless mining.\nThe last bitcoin (21M’th) will be mined circa 2140 and the system will be fee-only at that time.\n\nThe incentive may help encourage nodes to stay honest.\n\nSN, paraphrased: Fees will likely be more lucrative than theft.\nCD: Attackers will likely be political motivated to destabilize the currency."
  },
  {
    "objectID": "merkle.html#pruning",
    "href": "merkle.html#pruning",
    "title": "Graphs",
    "section": "Pruning",
    "text": "Pruning\n\nBitcoin scaling is a real problem, but\nThere’s a lot of ways to handle that.\nOnly the most recent transaction on a coin must be saved, for example.\n\nOnce the latest transaction in a coin is buried under enough blocks, the spent transactions before it can be discarded to save disk space.\n\nThis is done using a little thing called “Merkle Tree” which happens to be…\nA Directed Acyclic Graph\n\n\n\n\nSouthwest Chief at Laguna, February 2020\n\n\nGraph Theory: Cool, Fun, Practical"
  },
  {
    "objectID": "merkle.html#merkle-tree",
    "href": "merkle.html#merkle-tree",
    "title": "Graphs",
    "section": "Merkle Tree",
    "text": "Merkle Tree\n\nDisclosure: Wikipedia claims Merkle Trees are a computer science topic:\n\nIn cryptography and computer science, a hash tree or Merkle tree is a tree in which…\n\nI am a computer scientist.\nI’m sorry! I think they’re really cool!\nAnyways a ‘tree’ is a DAG where:\n\nThere is a root node, with no incoming edges\nEvery other edge has exactly one incoming edge\n\n\n\n\n\nTree (computer science)\n\n\nI should probably say “hash tree” (descriptive name) but I’m really used to hearing “Merkle tree”."
  },
  {
    "objectID": "merkle.html#merkle-tree-1",
    "href": "merkle.html#merkle-tree-1",
    "title": "Graphs",
    "section": "Merkle Tree",
    "text": "Merkle Tree\n\nNew term: Leaf (or leaf node)\n\nA leaf is a vertex (or node) of a tree with no outgoing edges.\n\nIn a hash tree, a leaf node contains some data and a hash of that data. # Github Copilot wrote this given the name class HashTreeLeaf: def __init__(self, data): self.data = data self.hash = hash(data) def __hash__(self): return self.hash"
  },
  {
    "objectID": "merkle.html#merkle-tree-2",
    "href": "merkle.html#merkle-tree-2",
    "title": "Graphs",
    "section": "Merkle Tree",
    "text": "Merkle Tree\n\nEvery other node n contains:\n\nA hash\nComputed over the the hashs\nOf the nodes, for which\nn has a corresponding outgoing edge.\n\nTo my knowledge, all Merkle/hash trees are binary trees\n\nA binary tree is a tree in which no node has more than two outgoing edges.\n\n# Github Copilot wrote this given the name class HashTreeNode: def __init__(self, left, rite): assert(left != None) # added by cd self.left = left self.rite = rite self.hash = hash(left)^hash(rite) def __hash__(self): return self.hash\nThis allows non-leaf nodes to have one or two outgoing edges."
  },
  {
    "objectID": "merkle.html#binary-tree-ops",
    "href": "merkle.html#binary-tree-ops",
    "title": "Graphs",
    "section": "Binary Tree Ops",
    "text": "Binary Tree Ops\n\nBinary trees, usually the special case of sorted binary search trees (BSTs), a mainstay of second semester CS education.\nThey are not in scope here.\nIf you need to implement a Merkle tree, find someone else’s “binary search tree” code and add the hashing to it.\nGenerative AIs (all, not just Github Copilot) can usually do BSTs in any given language.\nThey cannot do Merkle trees (I checked ChatGPT, Gemini, Copilot) for some reason.\nRealistically, engineering teams and not individuals should write anything expected to achieve cryptographic goals (too easy to make mistakes)."
  },
  {
    "objectID": "merkle.html#merkle-tree-3",
    "href": "merkle.html#merkle-tree-3",
    "title": "Graphs",
    "section": "Merkle Tree",
    "text": "Merkle Tree\n\nThis is a very good visualization:\n\nAll data/coins/transactions are in leaf nodes\nExtremely difficulty to falsify anything, due to all the computed hashes\nOld transactions can be discarded\nOld enough trees may be empty (!!!) if all constituent coins are spent.\nThis is likely since the most used coins are… the most used coins."
  },
  {
    "objectID": "merkle.html#merkle-tree-4",
    "href": "merkle.html#merkle-tree-4",
    "title": "Graphs",
    "section": "Merkle Tree",
    "text": "Merkle Tree\n\nThis is a very good visualization of pruning:\n\n\nThis is a Satoshi Nakamoto graphic."
  },
  {
    "objectID": "merkle.html#pruning-use",
    "href": "merkle.html#pruning-use",
    "title": "Graphs",
    "section": "Pruning Use",
    "text": "Pruning Use\n\nI am unable to characterize expected savings to pruning:\n\nUsers report around 100x (500GB to 5GB)\nMost coins appear to be part of zero transactions\nSome large clusters of coins, like SN’s, are valued at tenths of trillions USD but if mobilized would probably tank the valuation.\nSo coin velocity, median/average transactions, frequency are all very difficult to characterize.\nAlso likely volatile.\n\nIn general: Crypto people I trust seem to think Bitcoin is mostly unoptimized and could get a lot more streamlined.\nIn general: Hard for competing standards to catch on."
  },
  {
    "objectID": "merkle.html#pruning-efficacy",
    "href": "merkle.html#pruning-efficacy",
    "title": "Graphs",
    "section": "Pruning Efficacy",
    "text": "Pruning Efficacy\n\nWe can see how much better one Merkle tree is if maximally pruned.\n\nHave around 4k transactions per block\nSo for binary Merkle trees, that is log2(4k) ~= 12 levels\nThat is 2^12 leaves, 2^12 nodes of above them, 2^11 nodes above those, etc.\nΣ 2_n_ = 2_n+1_-1, or &gt;&gt;&gt; sigma = lambda x : sum([2 ** n for n in range(x+1)]) &gt;&gt;&gt; close = lambda x : 2 ** (x + 1) - 1 # for \"closed form\" &gt;&gt;&gt; for x in range(50): ... assert(close(x) == sigma(x)) ... &gt;&gt;&gt;\nAny unpruned tree would have 2^13-1 internal and 2^12 leaf nodes\nA tree with one remaining transaction would have on leaf node and two internal nodes per ‘level’\nThat is, 2*12 internal and 1 leaf node. &gt;&gt;&gt; savin = lambda x : (2*x + 1) / ( 2 ** (x + 1) + 2 ** x - 1 ) &gt;&gt;&gt; savin(10) 0.006838163464669489 &gt;&gt;&gt; savin(12) 0.002034670790266135"
  },
  {
    "objectID": "merkle.html#on-memory-usage",
    "href": "merkle.html#on-memory-usage",
    "title": "Graphs",
    "section": "On Memory Usage",
    "text": "On Memory Usage\n\nArithmetic!\n\nA block header with no transactions would be about 80 bytes. If we suppose blocks are generated every 10 minutes, 80 bytes * 6 * 24 * 365 = 4.2MB per year.\n\nI don’t think that estimate is accurate but I’m not sure why it wouldn’t be. I think SN is only counting the block headers, not the trees?\n\nWith computer systems typically selling with 2GB of RAM as of 2008, and Moore’s Law predicting current growth of 1.2GB per year, storage should not be a problem even if the block headers must be kept in memory\n\nIn 2009 we see discussions of expected computing growth and decision making on memory/storage in distributed systems (!!!)\n\nIt is possible to verify payments without running a full network node.\n\nSN notes you can just submit a transaction and if it’s accepted assume the coins for it were in the correct hands. This does markedly reduce the need for individuals (but not the full network) to store transaction histories."
  },
  {
    "objectID": "merkle.html#transactions",
    "href": "merkle.html#transactions",
    "title": "Graphs",
    "section": "Transactions",
    "text": "Transactions\n\nWe previously imagined a coin contains:\n\nThe public key of the current owner\nThe record of all previous owners\nThe signature of the previous owner, generated over (1) and (2)\n\nThese are all integers, more or less, that can be verified. &gt;&gt;&gt; Coin(*[randint(0,1024 * 1024) for _ in range(3)]) &lt;Coin object at 0x7f765208eb90&gt; # NOT verified\nWell… there’s actually no reason to have a single former owner or future owner.\nSo transactions can have multiple inputs before being bundled in hash trees.\nWe can think of them as dictionaries of send/recieve signatures and values.\n\nAfter this semester, we will change ownership of evening classes! &gt;&gt;&gt; Coin({'ckd': 2, 'jr': 2, 'hc':1, 'lc': 1, 'gp': 1} {'hks': 2, 'rb': 2, 'hi':2, 'fa': 1, 'ir': 1} hash(...)) &lt;Coin object at 0x7f765208eb90&gt;\nThis has a de facto negative transaction fee (it’s a bad metaphor)\n\nMostly: This allows transactions to not all be off the same price.\nThis allows using a unique ID for transactions and still spend all at once."
  },
  {
    "objectID": "merkle.html#multi-transaction",
    "href": "merkle.html#multi-transaction",
    "title": "Graphs",
    "section": "Multi Transaction",
    "text": "Multi Transaction\n\nWe can visualize as follows:\n\n\nThis is a Satoshi Nakamoto graphic."
  },
  {
    "objectID": "merkle.html#privacy",
    "href": "merkle.html#privacy",
    "title": "Graphs",
    "section": "Privacy",
    "text": "Privacy\n\nThe necessity to announce all transactions publicly precludes this method, but privacy can still be maintained by breaking the flow of information in another place: by keeping public keys anonymous.\n\n\nSN claims that breaking keys (say, account numbers) from personal identifying information achieves privacy.\nCD claims the considerable metadata leaks are a marked loss in privacy, but that’s okay.\nBanks have full knowledge and routinely have e.g. data breaches, illegal ad targetting, etc.\nWells Fargo Agrees to Pay $3 Billion to Resolve Criminal and Civil Investigations into Sales Practices Involving the Opening of Millions of Accounts without Customer Authorization\nThis ’big banks perspective actually isn’t too far off.\n\nThis is similar to the level of information released by stock exchanges\n\nLastly - if you have been part of n transactions, it is simple enough to use a distinct key for each, providing a slightly higher level of protection against privacy violations and any case were an attacker gains access to your key.\n\nAs an additional firewall, a new key pair should be used for each transaction to keep them from being linked to a common owner."
  },
  {
    "objectID": "merkle.html#privacy-1",
    "href": "merkle.html#privacy-1",
    "title": "Graphs",
    "section": "Privacy",
    "text": "Privacy\n\nWe can visualize as follows:\n\n\nThis is a Satoshi Nakamoto graphic."
  },
  {
    "objectID": "merkle.html#bonus-calculations",
    "href": "merkle.html#bonus-calculations",
    "title": "Graphs",
    "section": "Bonus: Calculations",
    "text": "Bonus: Calculations\n\nSN closes with a brief essay on probability, including calculations in the C programming language\nAlso known as: my favorite thing.\nRegard the following as bonus slides, but that are really cool!"
  },
  {
    "objectID": "merkle.html#calculations",
    "href": "merkle.html#calculations",
    "title": "Graphs",
    "section": "Calculations",
    "text": "Calculations\n\nWe consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain.\n\n\nIn the (quite) early days, gaining a control of a majority of miners was regarded as impossible.\nIn 2014, it happened: GHash.io, a mining consortium, achieved 51% of compute power.\nRead more on Wikipedia\nGHash.io voluntarily committed to a 40% cap to avoid devaluing their holdings.\nIn any case, this risk was foreseen by SN (and, frankly, everyone else) and is discussed."
  },
  {
    "objectID": "merkle.html#calculations-1",
    "href": "merkle.html#calculations-1",
    "title": "Graphs",
    "section": "Calculations",
    "text": "Calculations\n\nWe consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain.\n\n\nWe use a “Binomial Random Walk”\n\nWe progress along the integer number line, that is, {…, -1, 0, 1, 2…}\nThe value given is the length lead maintained by the “honest” (non-attacker) chain.\nSo if the honest chain is lenght 1010, and the attack is lenght 1000, the walk is at 10.\n\nAttacker outpacing is equivalent to the “Gambler’s Ruin” problem.\n\nGambler has infinite $ and targets breakeven in potentially infinite time\n\nSN uses mathematical notation, I’ll use Python. def prob_attk_ctch(attk_blck_bhnd, prob_next_hnst, prob_next_attk): assert(prob_next_hnst + prob_next_attk == 1) z = attk_blck_bhnd p, q = prob_next_hnst, prob_next_attk if (p &lt;= q): return 1 if (p &gt; q): return (q / p) ** z\nprob_attk_ctch(z, p, q) is the probabilty an attacker z blocks behind an honest chain catches up given that the attack controls fraction share q ∈ [0,1] of the total nodes."
  },
  {
    "objectID": "merkle.html#calculations-2",
    "href": "merkle.html#calculations-2",
    "title": "Graphs",
    "section": "Calculations",
    "text": "Calculations\n\nWe consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain.\n\n\nMuch easier if we consider a single attacker calculating their catchup probability. def prob_ctch(blck_bhnd, node_frac): z, p, q = blck_bhnd, 1 - node_frac, node_frac if (p &lt;= q): return 1 if (p &gt; q): return (q / p) ** z\nThese numbers are actually higher than I intuitively expected, using e.g. GHash.io’s 40% (assuming GHash.io somehow became compromised) &gt;&gt;&gt;&gt; {n:prob_ctch(n, .4) for n in range(1,10,2)} {1: 0.6666666666666667, 3: 0.2962962962962964, 5: 0.13168724279835398, 7: 0.05852766346593512, 9: 0.026012294873748946} &gt;&gt;&gt; {n/10:prob_ctch(3, n/10) for n in range(1,5)} {0.1: 0.0013717421124828536, 0.2: 0.015625, 0.3: 0.07871720116618078, 0.4: 0.2962962962962964}"
  },
  {
    "objectID": "merkle.html#calculations-3",
    "href": "merkle.html#calculations-3",
    "title": "Graphs",
    "section": "Calculations",
    "text": "Calculations\n\nGiven our assumption that p &gt; q, the probability drops exponentially as the number of blocks the attacker has to catch up with increases.\n\n\nIt occurs to me I can write this in .js with a canvas element.\n\nfunction qz(z, q) { const p = 1 - q if (p &lt;= q) { return 1 } else if (p &gt; q) { return Math.pow(q / p, z) } } function draw() { const q = document.getElementById(‘q’).value const z = document.getElementById(‘z’).value const c = document.getElementById(‘plot’).getContext(“2d”) c.strokeStyle = “white” c.clearRect(0,0,800,800) c.strokeStyle = “black” for ( let i = 0 ; i &lt; 800 ; i++ ) { c.fillRect(i, 800 - qz(i * z / 800, q) * 800, 2, 2) } } Set q ∈ (0,.5) Set z &gt; 0"
  },
  {
    "objectID": "merkle.html#code",
    "href": "merkle.html#code",
    "title": "Graphs",
    "section": "code",
    "text": "code\n&lt;script&gt; function qz(z, q) { const p = 1 - q if (p &lt;= q) { return 1 } else if (p &gt; q) { return Math.pow(q / p, z) } } function draw() { const q = document.getElementById('q').value const z = document.getElementById('z').value const c = document.getElementById('plot').getContext(\"2d\") c.strokeStyle = \"white\" c.clearRect(0,0,800,800) c.strokeStyle = \"black\" for ( let i = 0 ; i &lt; 800 ; i++ ) { c.fillRect(i, 800 - qz(i * z / 800, q) * 800, 2, 2) } } &lt;/script&gt; &lt;input value=\".4\" type=\"number\" min=\"0\" max=\"0.5\" id=\"q\"&gt; &lt;button onclick=\"draw()\" type=\"button\"&gt;Set &lt;em&gt;q&lt;/em&gt; ∈ (0,.5)&lt;/button&gt; &lt;input value=\"5\" type=\"number\" min=\"1\" id=\"z\"&gt; &lt;button onclick=\"draw()\" type=\"button\"&gt;Set &lt;em&gt;z&lt;/em&gt; &gt; 0 &lt;/button&gt;&lt;br&gt; &lt;canvas style=\"background-color:white\" id=\"plot\" width=\"800\" height=\"800\"&gt;&lt;/canvas&gt;"
  },
  {
    "objectID": "list_t.html",
    "href": "list_t.html",
    "title": "list_t",
    "section": "",
    "text": "This is the first of two “data structures” assignments, implementing the “chain” of blockchain.\nThe data stored by the structure is simply a void * which could be:\n\nA pointer to a block, or\nFor the test, a numerical value cast to void *\n\nIt is split over 3 files:\n\ntester.c which is an example of how some client could use list_t\nlist_t.h which the public API you will implement, as with 4096_t\n\nChange only the typedef line.\n\nlist_t.c which you may implement in any way you like.\nAdditionally, a Makefile is provided."
  },
  {
    "objectID": "list_t.html#implement-big-primality-testing",
    "href": "list_t.html#implement-big-primality-testing",
    "title": "BigRSA",
    "section": "Implement Big Primality Testing",
    "text": "Implement Big Primality Testing\n\nIt turns out this is impossible. Nevertheless, we have a plan.\n\n\nImplement randomization via /dev/random\n\n/dev/random and the more prefered but less established /dev/urandom are file-like random number generations that could plausibly be cryptographically secure on your system.\nWe will not be able to implement cryptographically secure RSA, but we should follow the random number generation convention.\nBasically, we read from /dev/random as we would any other file, here is an example of reading and printing 4096 “random” bits.\n\nS is a constant defined in 4096_t\n\n\n\n\nBigRNG.c\n\n#include \"4096_t.h\"\n\nint main() {\n        uint64_t bignum[S];\n        FILE *fp = fopen(\"/dev/random\", \"r\");\n        fread(bignum, sizeof(uint64_t), S, fp);\n        fclose(fp);\n        seebig(bignum);\n        return 0;\n}\n\n\nYou will need to use randomization to select your primes.\n\n\n\nImplement Big Prime Generation\n\nUse:\n\nlibgmp\n/dev/random\n\nBasically, get this to work.\n\nIt seemed fine for me.\n-lgmp\n\n\n\n\nBigRNG.c\n\nvoid prigmp(uint64_t *big, uint8_t words) {\n    /* populate from buffer */\n    mpz_t m;\n    FILE *fp = fopen(\"/dev/random\", \"r\");\n    memset(big, 0, BYTES);\n    fread(big, sizeof(uint64_t), words, fp);\n    fclose(fp);\n    mpz_init(m);\n    mpz_import(m, S, -1, sizeof(uint64_t), 0, 0, big);\n    mpz_nextprime(m, m);\n    mpz_export(big, NULL, -1, sizeof(uint64_t), 0, 0, m);\n    mpz_clear(m);\n    return;\n}"
  },
  {
    "objectID": "list_t.html#implement-biggcd",
    "href": "list_t.html#implement-biggcd",
    "title": "BigRSA",
    "section": "Implement BigGCD",
    "text": "Implement BigGCD\n\nModifying the extended Euclidean algorithm / extended gcd for use with the 4096_t ints.\nI had to do the following:\n\nChange all arithmetic operations from using infix operators like \\(+\\) or \\(/\\).\nModifying the Euclidean algorithm to use only positive values.\nTest extensively.\n\nYou can also implement 4096_t to accomodate negative values (which I did not do).\n\nI instead created different local values with my EEA function that tracked whether everything was positive or negative.\nThen wrote wrapper functions around the “big” operations that tracked the sign values."
  },
  {
    "objectID": "list_t.html#generate-keys",
    "href": "list_t.html#generate-keys",
    "title": "BigRSA",
    "section": "Generate Keys",
    "text": "Generate Keys\n\nWrite a 4096 bit .bad and .pub file.\nImplement in a .c file called “bigkey.c”\n\nIt should behave identically to “keygen.c”, but generate 4096 bit keys.\nThe 4096 bit refers to how large the \\(n\\) value should be\nE.g. the \\(e\\) value may still be (decimal) 65537\n\nThe KeyGen description from “RSAinC” in provided below, as reference:\n\n\nA Private Key in 3 Parts\n\nWe recall that the private key minimally contains:\n\nn, a modular base\ne, an encryptor, and\nd, a descryptor.\n\nBased on the KeyGen lab, it should be uncomplicated to calculate these values for 64 bit keys.\nWe will use .bad instead of .pem and insecurely store these values in plaintext.\nWe will then make executables to generate .bad and encrypt content provided a .bad\n\nWe name a .bad so helpfully we don’t use it by accident.\n\nWe will naively print 3 lines of hexademical values, n, e, then d.\nWe will write them to a 5-line file as follows:\n\nThe first line is the precise header text.\nThe second line is the n value in hexadecimal.\nThe third line is the e value, which is 10001.\nThe fourth line is the d value, which should be kept secret.\nThe fifth and final line is the precise footer text.\n\n\n\n\nunsafe.bad\n\n-----BEGIN UNSAFE PRIVATE KEY-----\n95a61f99198bd8e9\n10001\nfbea5e6a3ed31e8f\n-----END UNSAFE PRIVATE KEY-----\n\n\n\nA Public Key in 2 Parts\n\nWe recall that the public key contains, and should only contain:\n\nn, a modular base, and\ne, an encryptor\n\nBased on the KeyGen lab, we already have the ability to write these values to file.\nWe will use .pub instead of .pem or .bad\n\nNot a huge deal how these are stored, actually.\nThe key itself though, is still unsafe to use.\n\nWe will naively print 2 lines of hexademical values, n, then e.\nWe will right them to a file prefixed and suffixed as follows:\n\n\n\nunsafe.pub\n\n-----BEGIN UNSAFE PUBLIC KEY-----\n95a61f99198bd8e9\n10001\n-----END UNSAFE PUBLIC KEY-----"
  },
  {
    "objectID": "list_t.html#implement-end-to-end-4096-bit-rsa",
    "href": "list_t.html#implement-end-to-end-4096-bit-rsa",
    "title": "BigRSA",
    "section": "Implement End-to-end 4096 bit RSA",
    "text": "Implement End-to-end 4096 bit RSA\n\nDo so in a novel file, bigrsa.c, which should:\n\nAccept 3 command line arguments:\n\nA flag -d or -e for decrypt or encrypt\nThe file name of an input file.\nThe file name of an output file.\n\nIt should:\n\nRead the content of the input file.\nEncrypt or decrypt, as specified, the file contents.\n\nIt should read n and d from “unsafe.bad” to decrypt.\nIt should read n and e from “unsafe.pub” to encrypt.\n\nWrite the encrypted or decrypted content to the output file.\n\n\nYour BigRSA should function over either “keygen.c” 32 bit keys or “bigkey.c” 4096 bit keys."
  },
  {
    "objectID": "list_t.html#a-note",
    "href": "list_t.html#a-note",
    "title": "BigRSA",
    "section": "A Note",
    "text": "A Note\n\nBe advised that the square of a 4096 bit value requires 8198 bits to specify.\nIt is reasonable to test of 512 (openssl minimum) or 1024 (ssh-keygen minumum size)"
  },
  {
    "objectID": "list_t.html#tester",
    "href": "list_t.html#tester",
    "title": "BigRSA",
    "section": "“Tester”",
    "text": "“Tester”\n\nRather than provide an end-to-end containerized autograder, I am providing a Makefile.\n\nwget https://github.com/cd-c89/refrsa/raw/refs/heads/main/Makefile # curl was struggling\n\n\nMakefile\n\nCC = gcc # or clang\nCFLAGS = -std=c89 -Wall -Wextra -Werror -Wpedantic -O2\nCLIBS = -lgmp # for biggmp and primes\nBIGNUM = biggmp.c # or use 4096_t.c\n\nall: bigrsa bigkey\n\nbigrsa: bigrsa.c $(BIGNUM) 4096_t.h\n    $(CC) bigrsa.c $(BIGNUM) $(CFLAGS) -o bigrsa $(CLIBS)\n    \nbigkey: bigkey.c $(BIGNUM) 4096_t.h\n    $(CC) bigkey.c $(BIGNUM) $(CFLAGS) -o bigkey $(CLIBS)\n\nclean:\n    rm -f bigrsa bigkey unsafe.* *.txt\n\ncheck: bigrsa bigkey\n    ./bigkey\n    echo \"Multiple of four chars.\" &gt; m.txt\n    ./bigrsa -e m.txt c.txt\n    ./bigrsa -d c.txt n.txt\n    diff m.txt n.txt\n\n\nI am also providing:\n\nA reference solution that uses this Makefile.\nA GitHub action that uses this Makefile:\n\n\n\n\nC89.yml\n\nname: C89 CI\n\non: push\n    \njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - run: make check\n\n\nRead more in “Solved”"
  },
  {
    "objectID": "list_t.html#solution",
    "href": "list_t.html#solution",
    "title": "BigRSA",
    "section": "Solution",
    "text": "Solution\n\nSpoiler alert: This section contains spoilers, including a working solution, to the BigRSA assignment.\n\n\n\n\n\n\n\nSpoiler Alert!\n\n\n\nThis section contains spoilers, including a working solution, to the BigRSA assignment."
  },
  {
    "objectID": "list_t.html#a-reference-solution",
    "href": "list_t.html#a-reference-solution",
    "title": "BigRSA",
    "section": "A Reference Solution",
    "text": "A Reference Solution\n\nAfter careful reflection, the weight and challenge of this assignment made a single, in-container script insufficient, in my view, for testing.\nIn lieu, I am providing a full reference implementation, with a few caveats:\n\nI have maintained 4096_t solutions as closed source.\n\nInstead, I have implemented an interface to libgmp mpz_t numbers in biggmp.c\nIf you are stuck on 4096_t, you should use this as well.\n\nI am trusting you to either look at, or not look at, my code, based on what works best for your learning.\n\nIt is provided as is, and likely has few bugs, but probably not that few.\n\nI am not requiring you to have any particular interfacing, though I am providing one as an example."
  },
  {
    "objectID": "list_t.html#a-perfect-system",
    "href": "list_t.html#a-perfect-system",
    "title": "BigRSA",
    "section": "A Perfect System",
    "text": "A Perfect System\n\nA perfect project will:\n\nUse a ‘bigkey’ executable once to perform key generation:\n\nWrite keys to two files, one public and one private.\n\nUse a ‘bigrsa’ executable twice to perform “round trip” encryption on a greater than 64 bit data file.\n\nWrite more than 64 bits to a data file.\n\nIt is easier to do a precise multiple of 64\n\nEncrypt this file and store the ciphertext as a new file.\nDecrypt the cipher text file.\nTake a diff of the input file and the decrypted file.\n\nIf the return code of diff $? is 0, the project is a success."
  },
  {
    "objectID": "list_t.html#an-explanation",
    "href": "list_t.html#an-explanation",
    "title": "BigRSA",
    "section": "An explanation",
    "text": "An explanation\n\nWhy this implementation?\n\nI could not find a way I liked to specify:\n\nStoring keys\nStory cipher texts\nSetting key lengths\n\nI felt any specification was unfairly restrictive."
  },
  {
    "objectID": "list_t.html#how-to-use-the-reference-repository",
    "href": "list_t.html#how-to-use-the-reference-repository",
    "title": "BigRSA",
    "section": "How to use the reference repository",
    "text": "How to use the reference repository\n\nEither clone the repository and include your own bigrsa and bigkey or,\nAdd the relevant files to your crypto repository.\nStudy the Makefile closely, and use this reference material or #help-line if you are confused.\n\nMy favorite Makefile tutorial\n\nYou are not required to use GitHub actions (or containers, conspiciously absent) but may wish to do so.\nYou don’t need to think about clang vs gcc, but I wanted to show you clang and Makefile variables."
  },
  {
    "objectID": "list_t.html#the-repository",
    "href": "list_t.html#the-repository",
    "title": "BigRSA",
    "section": "The Repository",
    "text": "The Repository\n\n\n\n\n\n\nExpand for Reference Solution\n\n\n\n\n\n\nThe repository is publicly visible at github.com/cd-c89/refrsa"
  },
  {
    "objectID": "list_t.html#option-0x0-linked-list-lisp-list",
    "href": "list_t.html#option-0x0-linked-list-lisp-list",
    "title": "list_t",
    "section": "Option 0x0: Linked List (“LISP list”)",
    "text": "Option 0x0: Linked List (“LISP list”)\n\nOne obvious way to implement list_t is as a linked list.\n\nA list is a void ** of length 2.\nThe first element is the data element.\nThe second element is a pointer to another list or NULL in the case of no other elements.\nEvery add/remove requires a corresponding malloc/free.\n\n\n\n\nlist_t.h\n\ntypedef void **list_t;"
  },
  {
    "objectID": "list_t.html#option-0x1-a-null-terminated-vector-c-vector",
    "href": "list_t.html#option-0x1-a-null-terminated-vector-c-vector",
    "title": "list_t",
    "section": "Option 0x1: A null-terminated vector (“C vector”)",
    "text": "Option 0x1: A null-terminated vector (“C vector”)\n\nOne obvious way to implement `list_t is as a null-terminated array, buffer, or vector.\n\nA list is a void ** of unspecified length, one greater than the number of elements.\nEvery void * is some data element, except,\nSome final terminating element is NULL\nEither:\n\nThe entire structure is malloced/freed for any change or,\nSomehow mallocs and frees occur only occasionally.\n\nMost obviously by manually calculating size and only resizing when increasing past some power of two in size.\n\n\n\n\n\n\nlist_t.h\n\ntypedef void **list_t;"
  },
  {
    "objectID": "list_t.html#option-0x2-a-length-prefixed-vector-pascal-vvector",
    "href": "list_t.html#option-0x2-a-length-prefixed-vector-pascal-vvector",
    "title": "list_t",
    "section": "Option 0x2: A length-prefixed vector (Pascal vvector)",
    "text": "Option 0x2: A length-prefixed vector (Pascal vvector)\n\nOne obvious way to implement `list_t is as a length-prefixed array, buffer, or vector.\n\nA list is a void ** of specified length, one greater than the number of elements.\nThe first element is a size_t cast to a void * representing the length.\n\nRecall, void * and size_t must be the same size, as they both describe the size of the computer’s memory.\nYou may manage “off-by-one” in any way you like here.\n\nEvery successive element is a data element.\nEither:\n\nThe entire structure is malloced/freed for any change or,\nSomehow mallocs and frees occur only occasionally.\n\nMost obviously by manually calculating size and only resizing when increasing past some power of two in size.\n\n\n\n\n\n\nlist_t.h\n\ntypedef void **list_t;"
  },
  {
    "objectID": "list_t.html#other-options",
    "href": "list_t.html#other-options",
    "title": "list_t",
    "section": "Other options",
    "text": "Other options\n\nAn astute student may realize that:\n\nIt is trivial to both length-prefix and null-terminate\nIt is trivial for an element of a linked list to be a vector of some length, say 16.\n\nAn astute student may wish to implement a doubly-linked list or a binary tree that exposes a list interface.\nAdvanced students should implement an XOR list, which is left as an exercise to the interested student.\n\nAdvanced students should consider how valgrind would regard an XOR list."
  },
  {
    "objectID": "list_t.html#novel-header",
    "href": "list_t.html#novel-header",
    "title": "list_t",
    "section": "Novel Header",
    "text": "Novel Header\n\nAlongside the tester, the expected behavior of the list_t type is defined by the comments and function type specified in list_t.h."
  },
  {
    "objectID": "list_t.html#novel-tester",
    "href": "list_t.html#novel-tester",
    "title": "list_t",
    "section": "Novel Tester",
    "text": "Novel Tester\n\nVersus other testers this term, I wanted to provide a more concrete file that actually used the list_t, performed operations, and issued outputs as print statements.\nI hope that tester is self-documenting, but would love to hear your questions!"
  },
  {
    "objectID": "list_t.html#option-0x2-a-length-prefixed-vector-pascal-vector",
    "href": "list_t.html#option-0x2-a-length-prefixed-vector-pascal-vector",
    "title": "list_t",
    "section": "Option 0x2: A length-prefixed vector (“Pascal vector”)",
    "text": "Option 0x2: A length-prefixed vector (“Pascal vector”)\n\nOne obvious way to implement `list_t is as a length-prefixed array, buffer, or vector.\n\nA list is a void ** of specified length, one greater than the number of elements.\nThe first element is a size_t cast to a void * representing the length.\n\nRecall, void * and size_t must be the same size, as they both describe the size of the computer’s memory.\nYou may manage “off-by-one” in any way you like here.\n\nEvery successive element is a data element.\nEither:\n\nThe entire structure is malloced/freed for any change or,\nSomehow mallocs and frees occur only occasionally.\n\nMost obviously by manually calculating size and only resizing when increasing past some power of two in size.\n\n\n\n\n\n\nlist_t.h\n\ntypedef void **list_t;"
  },
  {
    "objectID": "btcinc.html",
    "href": "btcinc.html",
    "title": "BTCinC",
    "section": "",
    "text": "With the completion of the Merkle, you essentially have a working blockchain already. The final project is to make the blockchain look good.\n\nMS CS students must select and publish one of the following options by 1 May at 10 PM PT.\n\nIf you are anxious about meeting the deadline, the first option with extensive library support is the most manageable option.\n\nBS CS students interested in research, engineering, or computer science should choose an appropriate option and publish by 9 May at 3 PM.\nUndergraduate students in other populations should simply aim to complete all the homeworks, but may wish to pursue an option as an enrichment opportunity in conversation with the course instructor.\n\n\n\n\n\n\nUtilize libraries from earlier assignments, including SHA, RSA, list_t and Merkle trees.\n\nIf you are “stuck” you may use any code you find online (subject to licensing) providing that the code does not, itself, implement blockchain.\n\nImplement under version control on GitHub or GitLab.\nEmploy GitHub Actions and workflows or GitLab CI/CD to execute a daily workflow.\nExtend the chain’s length by one within the workflow.\n\nUse a very low proof-of-work to not trigger provisioning guards intended to prevent bitcoin mining within Actions. Read more.\n\nSave the output as an artifact.\nPerform necessary work to ensure artifacts can be checked into version control.\n\nStack Overflow recommends git-auto-commit-action\n\nUse these artifacts as the basis for future blocks.\n\n\n\n\n\n\n\n\nCreate a document like the FLP impossibility proof, the Nakamoto’08 paper, and Cynthia Dwork’s proof-of-work contribution.\nDescribe your blockchain implementation in the context of these results.\nFormat the description in IEEE or ACM Conference format.\nWrite a product of five to six pages.\nFormat using Quarto or LaTeX for ACM format, or LaTeX only for IEEE format.\nPlace source documentation in .qmd or .tex files under version control along with the reference codebase on Github.com.\nInclude a compiled PDF or HTML document.\n\nYou should likely do both, as done by leading publisher arXiv.\n\n\n\n\n\n\n\n\n\nPerform a comparative analysis using the time command-line command.\n\nYou should do non-zero statistics.\n\nEvaluate the performance of your initial implementation.\nEvaluate the performance of your improved implementation using design patterns.\nEvaluate the performance of reference implementations like SHA256sum or the GMP library.\n\nYou have seen me model this in the discussion of my prime generator vs. the GMP prime generator.\n\nFormat the description in IEEE format.\nWrite a product of five to six pages.\nFormat using LaTeX.\nPlace source documentation in .tex files under version control along with the reference codebase on Github.com.\n\nEnsure your codebase contains all source code necessary to reproduce your results.\nThis should include scripts of some sort, likely .sh or Makefile\n\n\nInclude a compiled PDF or HTML document.\n\nYou should likely do both, as done by leading publisher arXiv\n\n\n\n\n\n\n\n\n\nThe script should alter either the ownership or the history of a transaction.\n\nRecall that doing so requires constructing a new chain of greater length than the original, attacked chain.\n\nThe attack need not be feasible.\nDescribe the costs and benefits of the attack.\nComment on whether an attacker could justify the expense.\nDiscuss whether other attack vectors.\n\nThink about factors such as plain-text private key storage, are more likely.\nThe discussion on Snowden (in the RSA lecture) are most informative here.\n\nComment on which technologies used in class are the least secure.\nFormat the assessment as a technical blog post.\n\nYou are encouraged to publish within your portfolio or to a social platform such as LinkedIn.\nHere is a recent example from NetSPI\nHere is an all-time legendary blogpost from Joel\n\nUse a format similar to homework and lab specifications.\nUse Quarto markdown rendered to HTML.\nInclude code snippets in C, Python, LaTeX, or equivalent languages like Node.js."
  },
  {
    "objectID": "btcinc.html#option-program-product",
    "href": "btcinc.html#option-program-product",
    "title": "BTCinC",
    "section": "",
    "text": "Utilize libraries from earlier assignments, including SHA, RSA, list_t and Merkle trees.\n\nIf you are “stuck” you may use any code you find online (subject to licensing) providing that the code does not, itself, implement blockchain.\n\nImplement under version control on GitHub or GitLab.\nEmploy GitHub Actions and workflows or GitLab CI/CD to execute a daily workflow.\nExtend the chain’s length by one within the workflow.\n\nUse a very low proof-of-work to not trigger provisioning guards intended to prevent bitcoin mining within Actions. Read more.\n\nSave the output as an artifact.\nPerform necessary work to ensure artifacts can be checked into version control.\n\nStack Overflow recommends git-auto-commit-action\n\nUse these artifacts as the basis for future blocks."
  },
  {
    "objectID": "btcinc.html#option-two-theoretical-contribution",
    "href": "btcinc.html#option-two-theoretical-contribution",
    "title": "BTCinC",
    "section": "",
    "text": "Create a document like the FLP impossibility proof, the Nakamoto’08 paper, and Cynthia Dwork’s proof-of-work contribution.\nDescribe your blockchain implementation in the context of these results.\nFormat the description in IEEE or ACM Conference format.\nWrite a product of five to six pages.\nFormat using Quarto or LaTeX for ACM format, or LaTeX only for IEEE format.\nPlace source documentation in .qmd or .tex files under version control along with the reference codebase on Github.com.\nInclude a compiled PDF or HTML document.\n\nYou should likely do both, as done by leading publisher arXiv."
  },
  {
    "objectID": "btcinc.html#option-three-systems-research-contribution",
    "href": "btcinc.html#option-three-systems-research-contribution",
    "title": "BTCinC",
    "section": "",
    "text": "Perform a comparative analysis using the time command-line command.\n\nYou should do non-zero statistics.\n\nEvaluate the performance of your initial implementation.\nEvaluate the performance of your improved implementation using design patterns.\nEvaluate the performance of reference implementations like SHA256sum or the GMP library.\n\nYou have seen me model this in the discussion of my prime generator vs. the GMP prime generator.\n\nFormat the description in IEEE format.\nWrite a product of five to six pages.\nFormat using LaTeX.\nPlace source documentation in .tex files under version control along with the reference codebase on Github.com.\n\nEnsure your codebase contains all source code necessary to reproduce your results.\nThis should include scripts of some sort, likely .sh or Makefile\n\n\nInclude a compiled PDF or HTML document.\n\nYou should likely do both, as done by leading publisher arXiv"
  },
  {
    "objectID": "btcinc.html#option-four-security-research-and-threat-modeling",
    "href": "btcinc.html#option-four-security-research-and-threat-modeling",
    "title": "BTCinC",
    "section": "",
    "text": "The script should alter either the ownership or the history of a transaction.\n\nRecall that doing so requires constructing a new chain of greater length than the original, attacked chain.\n\nThe attack need not be feasible.\nDescribe the costs and benefits of the attack.\nComment on whether an attacker could justify the expense.\nDiscuss whether other attack vectors.\n\nThink about factors such as plain-text private key storage, are more likely.\nThe discussion on Snowden (in the RSA lecture) are most informative here.\n\nComment on which technologies used in class are the least secure.\nFormat the assessment as a technical blog post.\n\nYou are encouraged to publish within your portfolio or to a social platform such as LinkedIn.\nHere is a recent example from NetSPI\nHere is an all-time legendary blogpost from Joel\n\nUse a format similar to homework and lab specifications.\nUse Quarto markdown rendered to HTML.\nInclude code snippets in C, Python, LaTeX, or equivalent languages like Node.js."
  },
  {
    "objectID": "merkle.html#graphs",
    "href": "merkle.html#graphs",
    "title": "Graphs",
    "section": "Graphs",
    "text": "Graphs\n\nThere are many ways to understand graphs, but I actually think graph theory is quite accessible.\nI think it’s also easier when using a running example.\nI will also use a running example, Amtrak 🚄\n\nOr perhaps… a training example?\nI am training… to run?????\n???????????"
  },
  {
    "objectID": "merkle.html#graph-definition",
    "href": "merkle.html#graph-definition",
    "title": "Graphs",
    "section": "Graph: Definition",
    "text": "Graph: Definition\n\nA graph is an ordered pair.\n\nThat is: two things, in a fixed order.\nAn ordered pair can be thought of as a sequence of length 2\na = \"one thing\"\nb = \"another thing\"\nordered_pair = [a,b]\nAn ordered pair can be thought of as a tuple of length 2, a 2-ple.\na &lt;- \"one thing\"\nb &lt;- \"another thing\"\nordered_pair &lt;- c(a,b)\nA graph is not a set:\n&gt;&gt;&gt; [a,b][0]\n'one thing'\n&gt;&gt;&gt; {a,b}[0]\n&lt;stdin&gt;:1: SyntaxWarning: 'set' object is not subscriptable; perhaps you missed a comma?\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'set' object is not subscriptable"
  },
  {
    "objectID": "merkle.html#aside-sets-and-pairs",
    "href": "merkle.html#aside-sets-and-pairs",
    "title": "Graphs",
    "section": "Aside: Sets and pairs",
    "text": "Aside: Sets and pairs\n\nTake a number plane (click):\n\n\ny=2\n\n\nx=-2 \n\n\n x=2\n\ny=2"
  },
  {
    "objectID": "merkle.html#aside-sets-and-pairs-1",
    "href": "merkle.html#aside-sets-and-pairs-1",
    "title": "Graphs",
    "section": "Aside: Sets and pairs",
    "text": "Aside: Sets and pairs\n\nDenote ordered pair (.5,1.5) in red.\n\n\ny=2\n\n\nx=-2 \n\n\n x=2\n\ny=2"
  },
  {
    "objectID": "merkle.html#pair-definition",
    "href": "merkle.html#pair-definition",
    "title": "Graphs",
    "section": "Pair: Definition",
    "text": "Pair: Definition\n\nWe construct pairs from sets.\n\nAn ordered pair is a set of cardinality two. (2 elements)\nOne element of the set is a set of cardinality one. (1 element)\nThe other element of the set is a set of cardinality two (2 elements)\nThe element of the set of cardinality one is one of the two elements of the set of cardinality two."
  },
  {
    "objectID": "merkle.html#pair-definition-1",
    "href": "merkle.html#pair-definition-1",
    "title": "Graphs",
    "section": "Pair: Definition",
    "text": "Pair: Definition\n\nThe element of both sets is regarded as the first element.\nThis doesn’t work in Python since Python sets can’t contain other sets:\n\n&gt;&gt;&gt; [a,b] # ordered pair\n['one thing', 'another thing']\n&gt;&gt;&gt; {{a},{a,b}} # ordered pair with sets\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'set'\n&gt;&gt;&gt;\n\nBut this is an implementation hurdle, and not a logical one.\nDefine: An ordered pair is a set of two elements, a set containing the head element of the pair, and a set containing both elements of the pair."
  },
  {
    "objectID": "merkle.html#graph-definition-1",
    "href": "merkle.html#graph-definition-1",
    "title": "Graphs",
    "section": "Graph: Definition",
    "text": "Graph: Definition\n\nA graph is an ordered pair \\(G\\)\nWe denote the two elements of the pair as:\n\n\\(V\\) for vertices\n\\(E\\) for edges \\[\nG = (V, E) := \\{ \\{V\\}, \\{V,E\\}\\}\n\\]"
  },
  {
    "objectID": "merkle.html#graph-definition-2",
    "href": "merkle.html#graph-definition-2",
    "title": "Graphs",
    "section": "Graph: Definition",
    "text": "Graph: Definition\n\nAn Amtrak is an ordered pair\nWe denote the two elements of the pair as:\n\nStations for train stations used by Amtrak passengers, and\nTrains which Amtrak passengers ride between stations.\n\n\nAmtrak = (Stations, Trains)"
  },
  {
    "objectID": "merkle.html#graph-definition-3",
    "href": "merkle.html#graph-definition-3",
    "title": "Graphs",
    "section": "Graph: Definition",
    "text": "Graph: Definition\n\nRestrict our example to the PDX&lt;-&gt;SEA 6x daily trains:\n\n\n\n\nCENTRALIA\nOLYMPIA/LACEY\nSEATTLE\nTUKWILA\n\n\nKELSO/LONGVIEW\nPORTLAND\nTACOMA\nVANCOUVER WA\n\n\n\n\nE is a set of elements termed ‘edges’, ‘links’, or ‘lines’\n\nThe edges are pairs of vertices\nNow we have to make a decision…\nIn an undirected graph, edges are unordered pairs (sets of cardinality two)\nIn an directed graph, edges are ordered pairs (not subsets then)\nAmtrak is undirected - all connections are bidirectional.\n\nThat is, for all stations in Amtrak, if there is outgoing route to some other station, there is an incoming route from that same station."
  },
  {
    "objectID": "merkle.html#graph-definition-4",
    "href": "merkle.html#graph-definition-4",
    "title": "Graphs",
    "section": "Graph: Definition",
    "text": "Graph: Definition\n\nE is a set of elements termed ‘edges’, ‘links’, or ‘lines’\n\nThe edges are pairs of vertices\n\nNow we have to make a decision…\n\nIn an undirected graph, edges are unordered pairs (sets of cardinality two)\nIn an directed graph, edges are ordered pairs (not subsets then)\n\nAmtrak is undirected - all connections are bidirectional.\n\nThat is, for all stations in Amtrak, if there is outgoing route to some other station, there is an incoming route from that same station.\n\nHadoop is directed.\n\nThe NameNode may forward Python scripts to the DataNodes with ‘-file’\nDataNodes may not pass scripts back (or they have no Hadoop-ly way to do so).\n\nThe internet is directed.\n\nWe may use ‘curl’ to download files from a url, but going the other way (creating files at a url) is highly nontrivial.\nWe use Github to do this (in this class) but that means we don’t have an ‘edge’ directly to a url - Github has an edge and just lets us use it."
  },
  {
    "objectID": "merkle.html#graph-definition-5",
    "href": "merkle.html#graph-definition-5",
    "title": "Graphs",
    "section": "Graph: Definition",
    "text": "Graph: Definition\n\nE is a set of pairs of vertices\n\nLet’s look at some pairs… are these edges?\n\n\n\n\n\nCENTRALIA\nOLYMPIA/LACEY\nSEATTLE\nTUKWILA\n\n\n\n\nKELSO/LONGVIEW\nPORTLAND\nTACOMA\nVANCOUVER WA\n\n\n\n\nLet’s take a look at the route with the stations in order of geography rather than alphabet:\nSEATTLE\nTUKWILA\nTACOMA\nOLYMPIA/LACEY\nCENTRALIA\nKELSO/LONGVIEW\nVANCOUVER WA\nPORTLAND\nThe first pair - Centralia and Keslo/Longview - is an edge.\n\nWe see that these two stations are adjacent, between Olympia and Vancouver WA.\n\nThe others, like Seattle and Tacoma, are not edges.\n\nWe can go from Seattle to Tacoma, but we stop at Tukwila in between\nSo there is no train from Seattle to Tacoma - only from Seattle to Tukwila, and Tukwila to Tacoma\n\nThis graph is undirected - Seattle is next to Tukwila, and Tukwila is next to Seattle"
  },
  {
    "objectID": "merkle.html#graph-definition-6",
    "href": "merkle.html#graph-definition-6",
    "title": "Graphs",
    "section": "Graph: Definition",
    "text": "Graph: Definition\n\nE is a set of pairs of stations\n\nOur edges are pairs of adjacent stations\nThere are 8 stations so there are 7 edges\n\n\n\n\n\n(SEATTLE, TUKWILA)\n(CENTRALIA, KELSO/LONGVIEW)\n\n\n\n\n(TUKWILA, TACOMA)\n(KELSO/LONGVIEW, VANCOUVER WA)\n\n\n(TACOMA, OLYMPIA/LACEY)\n(VANCOUVER WA, PORTLAND)\n\n\n(OLYMPIA/LACEY, CENTRALIA)\n\n\n\n\n\nI use tuple notion here, with parens, but it would be equally proper to use set notatation for an undirected graph.\nAlso I maintained geographic ordering (as a convenience) but it would be more proper to have no particular order since E is a set.\n\n\n\n\n{CENTRALIA, KELSO/LONGVIEW}\n{TACOMA, OLYMPIA/LACEY}\n\n\n\n\n{KELSO/LONGVIEW, VANCOUVER WA}\n{TUKWILA, TACOMA}\n\n\n{OLYMPIA/LACEY, CENTRALIA}\n{VANCOUVER WA, PORTLAND}\n\n\n{SEATTLE, TUKWILA}"
  },
  {
    "objectID": "merkle.html#graph-definition-7",
    "href": "merkle.html#graph-definition-7",
    "title": "Graphs",
    "section": "Graph: Definition",
    "text": "Graph: Definition\n\nWe can express G using only sets over elements of stations (this is basically JSON):\nG = {\n  V = {\n    SEATTLE,\n    TUKWILA,\n    TACOMA,\n    OLYMPIA/LACEY,\n    CENTRALIA,\n    KELSO/LONGVIEW,\n    VANCOUVER WA\n    PORTLAND,\n  }, \n  {\n    V,\n    E = {\n              {\n                  TUKWILA,\n                  TACOMA\n              },\n              {\n                  TACOMA,\n                  OLYMPIA/LACEY\n              },\n              {\n                  OLYMPIA/LACEY,\n                  CENTRALIA\n              },\n              {\n                  CENTRALIA,\n                  KELSO/LONGVIEW\n              },\n              {\n                  KELSO/LONGVIEW,\n                  VANCOUVER WA\n              },\n              {\n                  VANCOUVER WA,\n                  PORTLAND\n              }\n          }\n    }\n}"
  },
  {
    "objectID": "merkle.html#graph-definition-8",
    "href": "merkle.html#graph-definition-8",
    "title": "Graphs",
    "section": "Graph: Definition",
    "text": "Graph: Definition\n\nWe can express G using only sets over elements of stations (this is basically JSON):\nG = {\n  V = {\n    SEATTLE,\n    TUKWILA,\n    TACOMA,\n    OLYMPIA/LACEY,\n    CENTRALIA,\n    KELSO/LONGVIEW,\n    VANCOUVER WA\n    PORTLAND,\n  }, \n  {\n    V,\n    E = {\n              {\n                  TUKWILA,\n                  TACOMA\n              },\n              {\n                  TACOMA,\n                  OLYMPIA/LACEY\n              },\n              {\n                  OLYMPIA/LACEY,\n                  CENTRALIA\n              },\n              {\n                  CENTRALIA,\n                  KELSO/LONGVIEW\n              },\n              {\n                  KELSO/LONGVIEW,\n                  VANCOUVER WA\n              },\n              {\n                  VANCOUVER WA,\n                  PORTLAND\n              }\n          }\n    }\n}"
  },
  {
    "objectID": "merkle.html#graph-definition-9",
    "href": "merkle.html#graph-definition-9",
    "title": "Graphs",
    "section": "Graph: Definition",
    "text": "Graph: Definition\n\nWe can express G using only sets over elements of stations (this is basically JSON):\nG = {\n  V = {\n    SEATTLE,\n    TUKWILA,\n    TACOMA,\n    OLYMPIA/LACEY,\n    CENTRALIA,\n    KELSO/LONGVIEW,\n    VANCOUVER WA\n    PORTLAND,\n  }, \n  {\n    V,\n    E = {\n              {\n                  TUKWILA,\n                  TACOMA\n              },\n              {\n                  TACOMA,\n                  OLYMPIA/LACEY\n              },\n              {\n                  OLYMPIA/LACEY,\n                  CENTRALIA\n              },\n              {\n                  CENTRALIA,\n                  KELSO/LONGVIEW\n              },\n              {\n                  KELSO/LONGVIEW,\n                  VANCOUVER WA\n              },\n              {\n                  VANCOUVER WA,\n                  PORTLAND\n              }\n          }\n    }\n}"
  },
  {
    "objectID": "merkle.html#graph-exercise",
    "href": "merkle.html#graph-exercise",
    "title": "Graphs",
    "section": "Graph: Exercise",
    "text": "Graph: Exercise\n\nAmtrak has recently added a number of regional lines, includin the Hiawatha, with service from Milwaukee to the world’s greatest city, Chicago.\n\nFrom the grandeur of Grant Park’s Buckingham Fountain to iconic museums and skyscrapers, see for yourself why Chicago was once dubbed “Paris on the Prairie.” Engage in retail therapy on the Magnificent Mile or root for the home team within the friendly confines of famed Wrigley Field.\n\nAs an exercise, construct the graph of the Hiawatha route using the JSON-ish notation I used for Cascades.\nThe route is described here and contains five stations.\nYou may use the three letter codes like “MKE” and “CHI” as a notational convenience if you would like.\nAs a bonus: Write valid json. Here’s a tester.\n\nFun fact: Chicago Union Station is designated with Chicago’s three letter code “CHI” - beating out Midway (MDW) and even the worlds busiest airport from 1963-1998 - O’Hare (ORD) #Trains🚆\n```json G = { V = { SEATTLE, TUKWILA, TACOMA, OLYMPIA/LACEY, CENTRALIA, KELSO/LONGVIEW, VANCOUVER WA PORTLAND, }, { V, E = { { TUKWILA, TACOMA }, { TACOMA, OLYMPIA/LACEY }, { OLYMPIA/LACEY, CENTRALIA }, { CENTRALIA, KELSO/LONGVIEW }, { KELSO/LONGVIEW, VANCOUVER WA }, { VANCOUVER WA, PORTLAND } } } } }"
  },
  {
    "objectID": "merkle.html#dags",
    "href": "merkle.html#dags",
    "title": "Graphs",
    "section": "DAGS",
    "text": "DAGS\n\nThe “better way” is a directed acyclic graph, or “DAG”.\n\nVector version of Image:Tred-G.png, Public domain, via Wikimedia Commons\n“In mathematics, particularly graph theory, and computer science, a directed acyclic graph (DAG) is a directed graph with no directed cycles.” We already know what a directed graph is (in excruciating detail)"
  },
  {
    "objectID": "merkle.html#cycles",
    "href": "merkle.html#cycles",
    "title": "Graphs",
    "section": "Cycles",
    "text": "Cycles\nWe’ll build cycles real quick, then back to cloud.\n\nE is a set of pairs of elements of V.\nWe can think of edges in a graph as a homogenous binary relation.\n\nHomogenous: From a set (the set of vertices) to itself.\nBinary: Over two elements (just like edges)\nRelation: A set\n\n“Transitive closures” are defined over homogenous binary relations, so we can take a “transitive closure” over edges."
  },
  {
    "objectID": "merkle.html#cartesian-product",
    "href": "merkle.html#cartesian-product",
    "title": "Graphs",
    "section": "Cartesian product",
    "text": "Cartesian product\n\nA relation R over a set S is a set of pairs of elements of S\n\nOr: a subset of the set of all pairs of elements\n\nWe denote all pairs using a “Cartesian product”:\n\nS × S\n\nFor example, over the set of primary colors C:\n\nC = { B, G, R }\n\nThe Cartesian product is all pairs:\n\nC × C = { (B, G), (B, R), (G, B), (G, R),(R, B), (R, G) }\n\nOrder matters."
  },
  {
    "objectID": "merkle.html#relation",
    "href": "merkle.html#relation",
    "title": "Graphs",
    "section": "Relation",
    "text": "Relation\n\nA relation R over a set S is a set of pairs of elements of S\n\nOr: a subset of the set of all pairs of elements in is transitive\n\nWe begin with the Cartesian product:\n\nC × C = { (B, G), (B, R), (G, B), (G, R),(R, B), (R, G) }\n\nWe consider a subset of C × C: colors in “wavelength” order, which we term W\n\nR has a higher wavelength than G\n\n\n(R, G) ∈ W ⊂ C × C\n\nG has a higher wavelength than B\n\n(G, B) ∈ W ⊂ C × C\n\nAs a notional convenience, this is often expressed as, with elements as lower case letters, gWb\n\ngWb := (G, B) ∈ W ⊂ C × C"
  },
  {
    "objectID": "merkle.html#transitivity",
    "href": "merkle.html#transitivity",
    "title": "Graphs",
    "section": "Transitivity",
    "text": "Transitivity\n\nSo we take relation W over a set C to be the following:\n\nW ⊂ C × C = { (R, G), (G, B) }\nW = { rWg, gWb }\n\nWhat does this tell us about the relation between r and b?\nWell, so far, nothing. But…\n\nif r has a higher wavelength than g\nand g has a great wavelength than b\ndoes it follow that r has a great wavelength than b?\n\n\nrWb\n\nThis is called transitivity or the transitive property\n\nTransitivity := ∀ x, y, z: xRy and yRz ⇒ xRz"
  },
  {
    "objectID": "merkle.html#closure",
    "href": "merkle.html#closure",
    "title": "Graphs",
    "section": "Closure",
    "text": "Closure\n\nOur initial relation was not transitive.\n\nW = { rWg, gWb }\n\nAs in the Amtrak case, we considered only adjacent elements as a convenience, but that doesn’t tell us if e.g. we can get from Seattle to Eugene.\nTo do that, we need to to preserve transitivity - and we do so using the notion of transitive closure\nWe denote the transitive closure R⁺\n\nThe transitive closure R⁺ of some relation R must contain all elements of R.\n\n\nR⁺ ⊃ R\n∀ xRy : xR⁺y\n∀ {x, y} ∈ R, ∃ {x, y} ∈ R⁺"
  },
  {
    "objectID": "merkle.html#closure-1",
    "href": "merkle.html#closure-1",
    "title": "Graphs",
    "section": "Closure",
    "text": "Closure\n\nWe denote the transitive closure R⁺\n\nThe transitive closure R⁺ of some relation R must contain all elements of R.\n\n\nR⁺ ⊃ R\n\nThe transitive closure R⁺ of some relation R must be transitive.\n\n∀ x, y, z: xR⁺y and yR⁺z ⇒ xR⁺z\n∀ {x, y}, {y, z} ∈ R, ∃ {x, z} ∈ R⁺\n\nNote: since this is a “for all”, it means as we are required to add new elements to maintain transitivity, transitivity must apply to those new elements.\nSo, if we add SeattleAmtrakTacoma because we have SeattleAmtrakTukwila and TukwilaAmtrakTacoma…\nWe will then have to add SeattleAmtrakOlympia because Amtrak also contains TukwilaAmtrakOlympia\nMaybe this looks a little nicer with 3 letter station names and and train numbers (for Cascades 503) rather than just “Amtrak”:\n\nsea503⁺tac\nsea503⁺olw"
  },
  {
    "objectID": "merkle.html#closure-2",
    "href": "merkle.html#closure-2",
    "title": "Graphs",
    "section": "Closure",
    "text": "Closure\n\nWe denote the transitive closure R⁺\n\nThe transitive closure R⁺ of some relation R must contain all elements of R.\n\n\nR⁺ ⊃ R\n\nThe transitive closure R⁺ of some relation R must be transitive.\n\n∀ x, y, z: xR⁺y and yR⁺z ⇒ xR⁺z\n\nR⁺ must be the smallest possible relation for that is a transitive superset of R.\n\nCartesian Product is always transitive and a superset, but not always the smallest satisfying set.\n\n\nR⁺ : ∀ R’ ⊂ S × S: R’ ⊃ R and Transitive(R’) : |R⁺| &lt; |R’| and R⁺ ⊃ R and Transitive(R’)"
  },
  {
    "objectID": "merkle.html#cycles-1",
    "href": "merkle.html#cycles-1",
    "title": "Graphs",
    "section": "Cycles",
    "text": "Cycles\n\nWe use transitive closure to define cycles\n\nWe consider a graph\n\n\nG = (V, E)\n\nWe note that E is a homogenous binary relation over V\nWe consider that E⁺ the transitive closure of E\n\nE⁺ ⊃ E\n\nG contains a cycle (has the property of being cyclic) if E⁺ contains an edge from a node to itself.\n\nCyclic(G) := ∃ v : vE⁺v\nCyclic(G = (V, E)) := ∃ v ∈ V: {v, v} ∈ E⁺\n\nSome notes:\n\nCycles are defined to be non-trivial, which means they don’t contain “loops”, so or an edge from a node to itself.\n\nWe don’t think about this with Amtrak because we don’t take a train from Portland to Portland\n\nCircuits, walks, paths, and trails are also defined in graph theory and are related.\nDirect paths and undirected paths are, of course, distinct but intuitively so.\n\nCascades 503, which runs Seattle to Portland, has a Seattle to Tukwila edge but not a Tukwila to Seattle edge.\nThe Cascades route, which runs service between Vancouver BC and Eugene, has both edges."
  },
  {
    "objectID": "merkle.html#dags-1",
    "href": "merkle.html#dags-1",
    "title": "Graphs",
    "section": "DAGS",
    "text": "DAGS\n“In mathematics, particularly graph theory, and computer science, a directed acyclic graph (DAG) is a directed graph with no directed cycles.”\n\nSo it is a graph\n\nG = (V, E)\n\nIt is directed, so E is a set of ordered pairs\n\nOrdered(e) ∀ e ∈ E\n\nIt contains no cycles\n\n¬Cyclic(G)\n¬∃ v ∈ V: vE⁺v"
  },
  {
    "objectID": "merkle.html#dags-2",
    "href": "merkle.html#dags-2",
    "title": "Graphs",
    "section": "DAGS",
    "text": "DAGS\n\nCascades 503 is a directed acyclic graph.\n\nIt has edges from all relative northern stations to all relative southern stations for all stations between Seattle and Portland inclusive.\n\nColor wavelength is a directed acyclic graph.\n\nThere is no color that is both higher wavelength and lower wavelength than some other color.\n\nThe sentence syntax tree from nltk is a directed acyclic graph.\n\n\n\nSentences (S) contain words or phrases, and phrases (xP) contain words, but no phrases contain a sentence or words contain a phrase.\nMapReduce is a directed acyclic graph.\n\nNeither Map nor Reduce accept as input anything that they have output, or is constructed from their outputs."
  },
  {
    "objectID": "merkle.html#dags-3",
    "href": "merkle.html#dags-3",
    "title": "Graphs",
    "section": "DAGS",
    "text": "DAGS\n\nDirected Acyclic Graphs generalize MapReduce ```json { “word_x_tagcount”: { “key_value_pairs” : { “input” : “filename:text”, ““:”word:tag”, ““:”word_x_tag:1”, “output”: “word_x_tag:count” } } }"
  },
  {
    "objectID": "merkle.html#fin",
    "href": "merkle.html#fin",
    "title": "Graphs",
    "section": "FIN",
    "text": "FIN\n\nDistributed consensus is non-trivial.\nIt tends to rely on math in the most classical sense of the term.\nIt allows a lot of new possibilities.\nIt uses a lot of cloud technologies.\nIt powers a lot of cloud technologies."
  },
  {
    "objectID": "merkle.html#pair-definition-2",
    "href": "merkle.html#pair-definition-2",
    "title": "Graphs",
    "section": "Pair: Definition",
    "text": "Pair: Definition\n\nAn ordered pair of two elements is a set of two elements, a set containing the head item in the pair, and a set containing both items in the pair.\n\nWe denote this set ‘p’\n\n\n(a, b) := p : { {a} , {a, b} }\n\nExtract the head item by taking the intersection of all of the elements of p\n\nI denote this ‘Head(p)’\n\n\nHead(p) := x : x ∈ ∩ p\nHead(p) := x : ∀ Y ∈ p : x ∈ Y\n\nThe tail is the sole element of the union that is not an element of the intersection, with the caveat that we do not consider the case in which the head and tail differ\n\nI denote this ‘Tail(p)’\n\n\nTail(p) := x : x ∈ ∪ p  ∩ p\nTail(p) := x : ∃ Y₁, Y₂ ∈ p : x ∈ Y₁ and x ∉ Y₂\nThis can be generalized to construct sequences out of sets, and to create graphs out of sets, mostly as a curiousity."
  },
  {
    "objectID": "merkle.html#pair-definition-3",
    "href": "merkle.html#pair-definition-3",
    "title": "Graphs",
    "section": "Pair: Definition",
    "text": "Pair: Definition\n\nAn ordered pair of two elements is a set of two elements, a set containing the head item in the pair, and a set containing both items in the pair.\n\nWe denote this set ‘p’\n\n\n(a, b) := p : { {a} , {a, b} }"
  },
  {
    "objectID": "merkle.html#head",
    "href": "merkle.html#head",
    "title": "Graphs",
    "section": "“Head”",
    "text": "“Head”\n\nExtract the head item by taking the intersection of all of the elements of p\n\nI denote this ‘Head(p)’\n\n\n\\[\n\\begin{align*}\n\\text{Head}(p) &:= x : x \\in \\bigcap p \\\\\n\\text{Head}(p) &:= x : \\forall Y \\in p : x \\in Y\n\\end{align*}\n\\]"
  },
  {
    "objectID": "merkle.html#tail",
    "href": "merkle.html#tail",
    "title": "Graphs",
    "section": "“Tail”",
    "text": "“Tail”\n\nThe tail is the sole element of the union that is not an element of the intersection, with the caveat that we do not consider the case in which the head and tail differ\n\nI denote this ‘Tail(p)’\n\n\n\\[\n\\begin{align*}\n\\text{Tail}(p) &:= x : x \\in \\bigcup p \\setminus \\bigcap p \\\\\n\\text{Tail}(p) &:= x : \\exists Y_1, Y_2 \\in p : x \\in Y_1 \\land x \\notin Y_2\n\\end{align*}\n\\]"
  },
  {
    "objectID": "merkle.html#nodes-vertices-or-v",
    "href": "merkle.html#nodes-vertices-or-v",
    "title": "Graphs",
    "section": "Nodes, Vertices, or \\(V\\)",
    "text": "Nodes, Vertices, or \\(V\\)\n\nLet us consider the “Amtrak Cascades”\nThe set of vertices is the set of stations:\n\n\n\n\n\n\n\n\n\n\n\nALBANY\nEVERETT\nPORTLAND\nTUKWILA\nEUGENE\n\n\nBELLINGHAM\nKELSO/LONGVIEW\nSALEM\nVANCOUVER BC\nOREGON CITY\n\n\nCENTRALIA\nMOUNT VERNON\nSEATTLE\nVANCOUVER WA\nTACOMA\n\n\nEDMONDS\nOLYMPIA/LACEY\nSTANWOOD"
  },
  {
    "objectID": "graphs.html#incentive",
    "href": "graphs.html#incentive",
    "title": "Graphs",
    "section": "Incentive",
    "text": "Incentive\n\nThe system only works if there’s a reason to invest in mining\n\nThe incentive can also be funded with transaction fees\n\n\nIf you really want your transaction to be accepted, offer a small amount of coinage as a transaction fee.\nThis is done by creating a transaction with no receipient, and the default receipient is regarded as the miner.\nTransaction fees allow inflationless mining.\nThe last bitcoin (21M’th) will be mined circa 2140 and the system will be fee-only at that time.\n\nThe incentive may help encourage nodes to stay honest.\n\nSN, paraphrased: Fees will likely be more lucrative than theft.\nCD: Attackers will likely be political motivated to destabilize the currency."
  },
  {
    "objectID": "graphs.html#pruning",
    "href": "graphs.html#pruning",
    "title": "Graphs",
    "section": "Pruning",
    "text": "Pruning\n\nBitcoin scaling is a real problem, but\nThere’s a lot of ways to handle that.\nOnly the most recent transaction on a coin must be saved, for example.\n\nOnce the latest transaction in a coin is buried under enough blocks, the spent transactions before it can be discarded to save disk space.\n\nThis is done using a little thing called “Merkle Tree” which happens to be…\nA Directed Acyclic Graph\n\n\n\n\nSouthwest Chief at Laguna, February 2020\n\n\nGraph Theory: Cool, Fun, Practical"
  },
  {
    "objectID": "graphs.html#merkle-tree",
    "href": "graphs.html#merkle-tree",
    "title": "Graphs",
    "section": "Merkle Tree",
    "text": "Merkle Tree\n\nDisclosure: Wikipedia claims Merkle Trees are a computer science topic:\n\nIn cryptography and computer science, a hash tree or Merkle tree is a tree in which…\n\nI am a computer scientist.\nI’m sorry! I think they’re really cool!\nAnyways a ‘tree’ is a DAG where:\n\nThere is a root node, with no incoming edges\nEvery other edge has exactly one incoming edge\n\n\n\n\n\nTree (computer science)\n\n\nI should probably say “hash tree” (descriptive name) but I’m really used to hearing “Merkle tree”."
  },
  {
    "objectID": "graphs.html#merkle-tree-1",
    "href": "graphs.html#merkle-tree-1",
    "title": "Graphs",
    "section": "Merkle Tree",
    "text": "Merkle Tree\n\nNew term: Leaf (or leaf node)\n\nA leaf is a vertex (or node) of a tree with no outgoing edges.\n\nIn a hash tree, a leaf node contains some data and a hash of that data. # Github Copilot wrote this given the name class HashTreeLeaf: def __init__(self, data): self.data = data self.hash = hash(data) def __hash__(self): return self.hash"
  },
  {
    "objectID": "graphs.html#merkle-tree-2",
    "href": "graphs.html#merkle-tree-2",
    "title": "Graphs",
    "section": "Merkle Tree",
    "text": "Merkle Tree\n\nEvery other node n contains:\n\nA hash\nComputed over the the hashs\nOf the nodes, for which\nn has a corresponding outgoing edge.\n\nTo my knowledge, all Merkle/hash trees are binary trees\n\nA binary tree is a tree in which no node has more than two outgoing edges.\n\n# Github Copilot wrote this given the name class HashTreeNode: def __init__(self, left, rite): assert(left != None) # added by cd self.left = left self.rite = rite self.hash = hash(left)^hash(rite) def __hash__(self): return self.hash\nThis allows non-leaf nodes to have one or two outgoing edges."
  },
  {
    "objectID": "graphs.html#binary-tree-ops",
    "href": "graphs.html#binary-tree-ops",
    "title": "Graphs",
    "section": "Binary Tree Ops",
    "text": "Binary Tree Ops\n\nBinary trees, usually the special case of sorted binary search trees (BSTs), a mainstay of second semester CS education.\nThey are not in scope here.\nIf you need to implement a Merkle tree, find someone else’s “binary search tree” code and add the hashing to it.\nGenerative AIs (all, not just Github Copilot) can usually do BSTs in any given language.\nThey cannot do Merkle trees (I checked ChatGPT, Gemini, Copilot) for some reason.\nRealistically, engineering teams and not individuals should write anything expected to achieve cryptographic goals (too easy to make mistakes)."
  },
  {
    "objectID": "graphs.html#merkle-tree-3",
    "href": "graphs.html#merkle-tree-3",
    "title": "Graphs",
    "section": "Merkle Tree",
    "text": "Merkle Tree\n\nThis is a very good visualization:\n\nAll data/coins/transactions are in leaf nodes\nExtremely difficulty to falsify anything, due to all the computed hashes\nOld transactions can be discarded\nOld enough trees may be empty (!!!) if all constituent coins are spent.\nThis is likely since the most used coins are… the most used coins."
  },
  {
    "objectID": "graphs.html#merkle-tree-4",
    "href": "graphs.html#merkle-tree-4",
    "title": "Graphs",
    "section": "Merkle Tree",
    "text": "Merkle Tree\n\nThis is a very good visualization of pruning:\n\n\nThis is a Satoshi Nakamoto graphic."
  },
  {
    "objectID": "graphs.html#pruning-use",
    "href": "graphs.html#pruning-use",
    "title": "Graphs",
    "section": "Pruning Use",
    "text": "Pruning Use\n\nI am unable to characterize expected savings to pruning:\n\nUsers report around 100x (500GB to 5GB)\nMost coins appear to be part of zero transactions\nSome large clusters of coins, like SN’s, are valued at tenths of trillions USD but if mobilized would probably tank the valuation.\nSo coin velocity, median/average transactions, frequency are all very difficult to characterize.\nAlso likely volatile.\n\nIn general: Crypto people I trust seem to think Bitcoin is mostly unoptimized and could get a lot more streamlined.\nIn general: Hard for competing standards to catch on."
  },
  {
    "objectID": "graphs.html#pruning-efficacy",
    "href": "graphs.html#pruning-efficacy",
    "title": "Graphs",
    "section": "Pruning Efficacy",
    "text": "Pruning Efficacy\n\nWe can see how much better one Merkle tree is if maximally pruned.\n\nHave around 4k transactions per block\nSo for binary Merkle trees, that is log2(4k) ~= 12 levels\nThat is 2^12 leaves, 2^12 nodes of above them, 2^11 nodes above those, etc.\nΣ 2_n_ = 2_n+1_-1, or &gt;&gt;&gt; sigma = lambda x : sum([2 ** n for n in range(x+1)]) &gt;&gt;&gt; close = lambda x : 2 ** (x + 1) - 1 # for \"closed form\" &gt;&gt;&gt; for x in range(50): ... assert(close(x) == sigma(x)) ... &gt;&gt;&gt;\nAny unpruned tree would have 2^13-1 internal and 2^12 leaf nodes\nA tree with one remaining transaction would have on leaf node and two internal nodes per ‘level’\nThat is, 2*12 internal and 1 leaf node. &gt;&gt;&gt; savin = lambda x : (2*x + 1) / ( 2 ** (x + 1) + 2 ** x - 1 ) &gt;&gt;&gt; savin(10) 0.006838163464669489 &gt;&gt;&gt; savin(12) 0.002034670790266135"
  },
  {
    "objectID": "graphs.html#on-memory-usage",
    "href": "graphs.html#on-memory-usage",
    "title": "Graphs",
    "section": "On Memory Usage",
    "text": "On Memory Usage\n\nArithmetic!\n\nA block header with no transactions would be about 80 bytes. If we suppose blocks are generated every 10 minutes, 80 bytes * 6 * 24 * 365 = 4.2MB per year.\n\nI don’t think that estimate is accurate but I’m not sure why it wouldn’t be. I think SN is only counting the block headers, not the trees?\n\nWith computer systems typically selling with 2GB of RAM as of 2008, and Moore’s Law predicting current growth of 1.2GB per year, storage should not be a problem even if the block headers must be kept in memory\n\nIn 2009 we see discussions of expected computing growth and decision making on memory/storage in distributed systems (!!!)\n\nIt is possible to verify payments without running a full network node.\n\nSN notes you can just submit a transaction and if it’s accepted assume the coins for it were in the correct hands. This does markedly reduce the need for individuals (but not the full network) to store transaction histories."
  },
  {
    "objectID": "graphs.html#transactions",
    "href": "graphs.html#transactions",
    "title": "Graphs",
    "section": "Transactions",
    "text": "Transactions\n\nWe previously imagined a coin contains:\n\nThe public key of the current owner\nThe record of all previous owners\nThe signature of the previous owner, generated over (1) and (2)\n\nThese are all integers, more or less, that can be verified. &gt;&gt;&gt; Coin(*[randint(0,1024 * 1024) for _ in range(3)]) &lt;Coin object at 0x7f765208eb90&gt; # NOT verified\nWell… there’s actually no reason to have a single former owner or future owner.\nSo transactions can have multiple inputs before being bundled in hash trees.\nWe can think of them as dictionaries of send/recieve signatures and values.\n\nAfter this semester, we will change ownership of evening classes! &gt;&gt;&gt; Coin({'ckd': 2, 'jr': 2, 'hc':1, 'lc': 1, 'gp': 1} {'hks': 2, 'rb': 2, 'hi':2, 'fa': 1, 'ir': 1} hash(...)) &lt;Coin object at 0x7f765208eb90&gt;\nThis has a de facto negative transaction fee (it’s a bad metaphor)\n\nMostly: This allows transactions to not all be off the same price.\nThis allows using a unique ID for transactions and still spend all at once."
  },
  {
    "objectID": "graphs.html#multi-transaction",
    "href": "graphs.html#multi-transaction",
    "title": "Graphs",
    "section": "Multi Transaction",
    "text": "Multi Transaction\n\nWe can visualize as follows:\n\n\nThis is a Satoshi Nakamoto graphic."
  },
  {
    "objectID": "graphs.html#privacy",
    "href": "graphs.html#privacy",
    "title": "Graphs",
    "section": "Privacy",
    "text": "Privacy\n\nThe necessity to announce all transactions publicly precludes this method, but privacy can still be maintained by breaking the flow of information in another place: by keeping public keys anonymous.\n\n\nSN claims that breaking keys (say, account numbers) from personal identifying information achieves privacy.\nCD claims the considerable metadata leaks are a marked loss in privacy, but that’s okay.\nBanks have full knowledge and routinely have e.g. data breaches, illegal ad targetting, etc.\nWells Fargo Agrees to Pay $3 Billion to Resolve Criminal and Civil Investigations into Sales Practices Involving the Opening of Millions of Accounts without Customer Authorization\nThis ’big banks perspective actually isn’t too far off.\n\nThis is similar to the level of information released by stock exchanges\n\nLastly - if you have been part of n transactions, it is simple enough to use a distinct key for each, providing a slightly higher level of protection against privacy violations and any case were an attacker gains access to your key.\n\nAs an additional firewall, a new key pair should be used for each transaction to keep them from being linked to a common owner."
  },
  {
    "objectID": "graphs.html#privacy-1",
    "href": "graphs.html#privacy-1",
    "title": "Graphs",
    "section": "Privacy",
    "text": "Privacy\n\nWe can visualize as follows:\n\n\nThis is a Satoshi Nakamoto graphic."
  },
  {
    "objectID": "graphs.html#bonus-calculations",
    "href": "graphs.html#bonus-calculations",
    "title": "Graphs",
    "section": "Bonus: Calculations",
    "text": "Bonus: Calculations\n\nSN closes with a brief essay on probability, including calculations in the C programming language\nAlso known as: my favorite thing.\nRegard the following as bonus slides, but that are really cool!"
  },
  {
    "objectID": "graphs.html#calculations",
    "href": "graphs.html#calculations",
    "title": "Graphs",
    "section": "Calculations",
    "text": "Calculations\n\nWe consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain.\n\n\nIn the (quite) early days, gaining a control of a majority of miners was regarded as impossible.\nIn 2014, it happened: GHash.io, a mining consortium, achieved 51% of compute power.\nRead more on Wikipedia\nGHash.io voluntarily committed to a 40% cap to avoid devaluing their holdings.\nIn any case, this risk was foreseen by SN (and, frankly, everyone else) and is discussed."
  },
  {
    "objectID": "graphs.html#calculations-1",
    "href": "graphs.html#calculations-1",
    "title": "Graphs",
    "section": "Calculations",
    "text": "Calculations\n\nWe consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain.\n\n\nWe use a “Binomial Random Walk”\n\nWe progress along the integer number line, that is, {…, -1, 0, 1, 2…}\nThe value given is the length lead maintained by the “honest” (non-attacker) chain.\nSo if the honest chain is lenght 1010, and the attack is lenght 1000, the walk is at 10.\n\nAttacker outpacing is equivalent to the “Gambler’s Ruin” problem.\n\nGambler has infinite $ and targets breakeven in potentially infinite time\n\nSN uses mathematical notation, I’ll use Python. def prob_attk_ctch(attk_blck_bhnd, prob_next_hnst, prob_next_attk): assert(prob_next_hnst + prob_next_attk == 1) z = attk_blck_bhnd p, q = prob_next_hnst, prob_next_attk if (p &lt;= q): return 1 if (p &gt; q): return (q / p) ** z\nprob_attk_ctch(z, p, q) is the probabilty an attacker z blocks behind an honest chain catches up given that the attack controls fraction share q ∈ [0,1] of the total nodes."
  },
  {
    "objectID": "graphs.html#calculations-2",
    "href": "graphs.html#calculations-2",
    "title": "Graphs",
    "section": "Calculations",
    "text": "Calculations\n\nWe consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain.\n\n\nMuch easier if we consider a single attacker calculating their catchup probability. def prob_ctch(blck_bhnd, node_frac): z, p, q = blck_bhnd, 1 - node_frac, node_frac if (p &lt;= q): return 1 if (p &gt; q): return (q / p) ** z\nThese numbers are actually higher than I intuitively expected, using e.g. GHash.io’s 40% (assuming GHash.io somehow became compromised) &gt;&gt;&gt;&gt; {n:prob_ctch(n, .4) for n in range(1,10,2)} {1: 0.6666666666666667, 3: 0.2962962962962964, 5: 0.13168724279835398, 7: 0.05852766346593512, 9: 0.026012294873748946} &gt;&gt;&gt; {n/10:prob_ctch(3, n/10) for n in range(1,5)} {0.1: 0.0013717421124828536, 0.2: 0.015625, 0.3: 0.07871720116618078, 0.4: 0.2962962962962964}"
  },
  {
    "objectID": "graphs.html#calculations-3",
    "href": "graphs.html#calculations-3",
    "title": "Graphs",
    "section": "Calculations",
    "text": "Calculations\n\nGiven our assumption that p &gt; q, the probability drops exponentially as the number of blocks the attacker has to catch up with increases.\n\n\nIt occurs to me I can write this in .js with a canvas element.\n\nfunction qz(z, q) { const p = 1 - q if (p &lt;= q) { return 1 } else if (p &gt; q) { return Math.pow(q / p, z) } } function draw() { const q = document.getElementById(‘q’).value const z = document.getElementById(‘z’).value const c = document.getElementById(‘plot’).getContext(“2d”) c.strokeStyle = “white” c.clearRect(0,0,800,800) c.strokeStyle = “black” for ( let i = 0 ; i &lt; 800 ; i++ ) { c.fillRect(i, 800 - qz(i * z / 800, q) * 800, 2, 2) } } Set q ∈ (0,.5) Set z &gt; 0"
  },
  {
    "objectID": "graphs.html#code",
    "href": "graphs.html#code",
    "title": "Graphs",
    "section": "code",
    "text": "code\n&lt;script&gt; function qz(z, q) { const p = 1 - q if (p &lt;= q) { return 1 } else if (p &gt; q) { return Math.pow(q / p, z) } } function draw() { const q = document.getElementById('q').value const z = document.getElementById('z').value const c = document.getElementById('plot').getContext(\"2d\") c.strokeStyle = \"white\" c.clearRect(0,0,800,800) c.strokeStyle = \"black\" for ( let i = 0 ; i &lt; 800 ; i++ ) { c.fillRect(i, 800 - qz(i * z / 800, q) * 800, 2, 2) } } &lt;/script&gt; &lt;input value=\".4\" type=\"number\" min=\"0\" max=\"0.5\" id=\"q\"&gt; &lt;button onclick=\"draw()\" type=\"button\"&gt;Set &lt;em&gt;q&lt;/em&gt; ∈ (0,.5)&lt;/button&gt; &lt;input value=\"5\" type=\"number\" min=\"1\" id=\"z\"&gt; &lt;button onclick=\"draw()\" type=\"button\"&gt;Set &lt;em&gt;z&lt;/em&gt; &gt; 0 &lt;/button&gt;&lt;br&gt; &lt;canvas style=\"background-color:white\" id=\"plot\" width=\"800\" height=\"800\"&gt;&lt;/canvas&gt;\nFIN"
  },
  {
    "objectID": "graphs.html#fin",
    "href": "graphs.html#fin",
    "title": "Graphs",
    "section": "FIN",
    "text": "FIN\n\nDistributed consensus is non-trivial.\nIt tends to rely on math in the most classical sense of the term.\nIt allows a lot of new possibilities.\nIt uses a lot of cloud technologies.\nIt powers a lot of cloud technologies."
  },
  {
    "objectID": "heap_t.html",
    "href": "heap_t.html",
    "title": "heap_t",
    "section": "",
    "text": "On Due Dates\n\n\n\n\nI am not allowed to make assignments due during finals.\nHowever, I am supportive of “no excuse” late turn-ins up until the final project is due.\n\n\n\n\nThis is the first of two “data structures” assignments, implementing the “Merkle tree” of blockchain.\nThe data stored by the structure is untyped and the heap is provided only with its size.\n\nThe same is true of the provided comparison function.\n\nIt is split over 3 files:\n\ntester.c which is an example of how some client could use heap_t\nheap_t.h which the public API you will implement, as with list_t\n\nYou may not change any lines and must use the array implementation.\nThis is learning objective of the assignment.\n\nheap_t.c where you have some freedom but will be implementing known algorithms.\nAdditionally, a Makefile is provided."
  },
  {
    "objectID": "heap_t.html#option-0x0-linked-list-lisp-list",
    "href": "heap_t.html#option-0x0-linked-list-lisp-list",
    "title": "list_t",
    "section": "Option 0x0: Linked List (“LISP list”)",
    "text": "Option 0x0: Linked List (“LISP list”)\n\nOne obvious way to implement list_t is as a linked list.\n\nA list is a void ** of length 2.\nThe first element is the data element.\nThe second element is a pointer to another list or NULL in the case of no other elements.\nEvery add/remove requires a corresponding malloc/free.\n\n\n\n\nlist_t.h\n\ntypedef void **list_t;"
  },
  {
    "objectID": "heap_t.html#option-0x1-a-null-terminated-vector-c-vector",
    "href": "heap_t.html#option-0x1-a-null-terminated-vector-c-vector",
    "title": "list_t",
    "section": "Option 0x1: A null-terminated vector (“C vector”)",
    "text": "Option 0x1: A null-terminated vector (“C vector”)\n\nOne obvious way to implement `list_t is as a null-terminated array, buffer, or vector.\n\nA list is a void ** of unspecified length, one greater than the number of elements.\nEvery void * is some data element, except,\nSome final terminating element is NULL\nEither:\n\nThe entire structure is malloced/freed for any change or,\nSomehow mallocs and frees occur only occasionally.\n\nMost obviously by manually calculating size and only resizing when increasing past some power of two in size.\n\n\n\n\n\n\nlist_t.h\n\ntypedef void **list_t;"
  },
  {
    "objectID": "heap_t.html#option-0x2-a-length-prefixed-vector-pascal-vector",
    "href": "heap_t.html#option-0x2-a-length-prefixed-vector-pascal-vector",
    "title": "list_t",
    "section": "Option 0x2: A length-prefixed vector (“Pascal vector”)",
    "text": "Option 0x2: A length-prefixed vector (“Pascal vector”)\n\nOne obvious way to implement `list_t is as a length-prefixed array, buffer, or vector.\n\nA list is a void ** of specified length, one greater than the number of elements.\nThe first element is a size_t cast to a void * representing the length.\n\nRecall, void * and size_t must be the same size, as they both describe the size of the computer’s memory.\nYou may manage “off-by-one” in any way you like here.\n\nEvery successive element is a data element.\nEither:\n\nThe entire structure is malloced/freed for any change or,\nSomehow mallocs and frees occur only occasionally.\n\nMost obviously by manually calculating size and only resizing when increasing past some power of two in size.\n\n\n\n\n\n\nlist_t.h\n\ntypedef void **list_t;"
  },
  {
    "objectID": "heap_t.html#other-options",
    "href": "heap_t.html#other-options",
    "title": "list_t",
    "section": "Other options",
    "text": "Other options\n\nAn astute student may realize that:\n\nIt is trivial to both length-prefix and null-terminate\nIt is trivial for an element of a linked list to be a vector of some length, say 16.\n\nAn astute student may wish to implement a doubly-linked list or a binary tree that exposes a list interface.\nAdvanced students should implement an XOR list, which is left as an exercise to the interested student.\n\nAdvanced students should consider how valgrind would regard an XOR list."
  },
  {
    "objectID": "heap_t.html#novel-header",
    "href": "heap_t.html#novel-header",
    "title": "list_t",
    "section": "Novel Header",
    "text": "Novel Header\n\nAlongside the tester, the expected behavior of the list_t type is defined by the comments and function type specified in list_t.h."
  },
  {
    "objectID": "heap_t.html#novel-tester",
    "href": "heap_t.html#novel-tester",
    "title": "heap_t",
    "section": "Novel Tester",
    "text": "Novel Tester\n\nVersus other testers this term, I wanted to provide a more concrete file that actually used the heap_t, performed operations, and issued outputs as print statements.\nI hope that tester is self-documenting, but would love to hear your questions!\n\n\n\n\nFor reference, here is heap_t.h"
  },
  {
    "objectID": "bchain.html",
    "href": "bchain.html",
    "title": "bchain",
    "section": "",
    "text": "Announcements\n\nWelcome to variously CS 276/CS 540\n\nBlockchain\n\nAction Items:\n\nlist_t after this\n\n\n\n\nToday\n\nBackground\nBlocks\n\nJust structs\n\n\n\n\nBackground\n\n\n2000s\n\nDotcom crash (~2000)\n\nMany digital currency failed\nMany ecommerce sites failed\nMany internet banks (e.g. Net.B@nk) fail\nMost large sites (Amazon, Cisco) contracted ~80%\n\nCentralized servers are politically weak.\n\n\n\n2008\n\nGreat Recession (~2007-)\n\nTraditional currency liquity crises\nMany banks fail\nMany surviving banks reorganize\nHuge pressure on governments, central currencies\n\nCentralized banks are politically week\n\n\n\nOpen question\n\nHow can the client of a currency system:\n\nHave access to currency that is\n\nNon-physical\nNon-governmental\nNon-repudiable\n\nTransactions cannot be denied to have happened\n\n\n\n\n\n\nBitcoin\n\nBitcoin is the first blockchain\n\nHas no central server\n\nNot like ecash with DigiCash, Inc. (failed in Dotcom)\nNot like USD with the US Treasury (~failed in Great Recession)\n\nAllows transactions\n\nI can transfer n coins to someone\n\n\n\n\n\nFeatures\n\nAchieves consensus\n\nTransactions cannot be ‘repudiated’ (no chargeback)\nCannot spend coins you don’t have\n\nRelies on cryptography (instead of servers)\n\nUses RSA for privacy/anonymity\nUses SHA for nonrepudiation\n\nUses ‘proof of work’ C. Dwork ’92\n\n\n\nNakamoto ’08\n\nWe now follow the Nakamoto ’08 paper,\nBitcoin: A Peer-to-Peer Electronic Cash System\nYou should read it.\n\n\n\nGenesis Block\n00000000   01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................\n00000010   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................\n00000020   00 00 00 00 3B A3 ED FD  7A 7B 12 B2 7A C7 2C 3E   ....;£íýz{.²zÇ,&gt;\n00000030   67 76 8F 61 7F C8 1B C3  88 8A 51 32 3A 9F B8 AA   gv.a.È.ÃˆŠQ2:Ÿ¸ª\n00000040   4B 1E 5E 4A 29 AB 5F 49  FF FF 00 1D 1D AC 2B 7C   K.^J)«_Iÿÿ...¬+|\n00000050   01 01 00 00 00 01 00 00  00 00 00 00 00 00 00 00   ................\n00000060   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................\n00000070   00 00 00 00 00 00 FF FF  FF FF 4D 04 FF FF 00 1D   ......ÿÿÿÿM.ÿÿ..\n00000080   01 04 45 54 68 65 20 54  69 6D 65 73 20 30 33 2F   ..EThe Times 03/\n00000090   4A 61 6E 2F 32 30 30 39  20 43 68 61 6E 63 65 6C   Jan/2009 Chancel\n000000A0   6C 6F 72 20 6F 6E 20 62  72 69 6E 6B 20 6F 66 20   lor on brink of \n000000B0   73 65 63 6F 6E 64 20 62  61 69 6C 6F 75 74 20 66   second bailout f\n000000C0   6F 72 20 62 61 6E 6B 73  FF FF FF FF 01 00 F2 05   or banksÿÿÿÿ..ò.\n000000D0   2A 01 00 00 00 43 41 04  67 8A FD B0 FE 55 48 27   *....CA.gŠý°þUH'\n000000E0   19 67 F1 A6 71 30 B7 10  5C D6 A8 28 E0 39 09 A6   .gñ¦q0·.\\Ö¨(à9.¦\n000000F0   79 62 E0 EA 1F 61 DE B6  49 F6 BC 3F 4C EF 38 C4   ybàê.aÞ¶Iö¼?Lï8Ä\n00000100   F3 55 04 E5 1E C1 12 DE  5C 38 4D F7 BA 0B 8D 57   óU.å.Á.Þ\\8M÷º..W\n00000110   8A 4C 70 2B 6B F1 1D 5F  AC 00 00 00 00            ŠLp+kñ._¬....\n\n\nBlocks\n\n\nBitcoin\n\nIn this paper, we propose a solution to the double-spending problem using a peer-to-peer distributed timestamp server to generate computational proof of the chronological order of transactions\n\n\n\n\nPeer-to-peer\nDistributed\nTimestamped (gulp)\n\n\n\n\nComputational proofs\nChronological ordering\nTransactions\n\n\n\n\n\nTransactions\n\nA chain of digital signatures\n\n\nVs physical coin, a record data struct.\n\nRecords can be stored in multiple locations, coins cannot\nRecords can produced by anyone, coins cannot\nRecords describe ownership, coins cannot\n\n“My” coins don’t have my name on them.\n“My” bitcoins do\n\n\n\n\n\nA transaction\n\nEach owner transfers the coin to the next by digitally signing a hash of the previous transaction and the public key of the next owner and adding these to the end of the coin\n\n\nMe and \\(n\\) friends owners \\(m\\) coins\nWe all have public keys.\nWe transfer those coins to \\(p\\) new owners\nWe write this down.\n\n\n\nSignage\n\nTo verify it is (1) our coins and (2) use transferring them, we:\n\nWrite down the details.\nSHA256 hash the message\nRSA encrypt with our private key\nRelease the hash and cipher text\n\n\n\n\nVerify\n\nThe general public:\n\nDecrypts the ciphertext with our public key\nSHA256 hashes the decrypted text\nIf the hash matches our released hash, then it had to be us and the transaction is valid.\n\n\n\n\n\n\n\n\n\n\n\n\nRSA_Encryption\n\n\ncluster_encryption\n\nEncryption\n\n\ncluster_decryption\n\nDecryption\n\n\n\nmessage\n\nMessage (M)\n\n\n\nencrypt\n\nCiphertext (C) = M^e mod n\n\n\n\nmessage-&gt;encrypt\n\n\n\n\n\ninter\n\nEncrypted Transaction\n\n\n\nencrypt-&gt;inter\n\n\n\n\n\npublic_key_ref\n\n\n\nPrivate Key: (n, d)\n\n\n\npublic_key_ref-&gt;encrypt\n\n\n\n\n\nciphertext\n\nCiphertext (C)\n\n\n\ndecrypt\n\nMessage (M) = C^d mod n\n\n\n\nciphertext-&gt;decrypt\n\n\n\n\n\noutput\n\nDecrypted Transaction\n\n\n\ndecrypt-&gt;output\n\n\n\n\n\nprivate_key_ref\n\n\n\nPublic Key: (n, e)\n\n\n\nprivate_key_ref-&gt;decrypt\n\n\n\n\n\ninput\n\nUnencrypted Transaction\n\n\n\ninput-&gt;message\n\n\n\n\n\ninter-&gt;ciphertext\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRSA_Encryption\n\n\ncluster_digest_post\n\nPostcompression\n\n\ncluster_decryption\n\nDecryption\n\n\ncluster_check\n\nIntegrity Check\n\n\ncluster_digest_pre\n\nPrecompression\n\n\ncluster_encryption\n\nEncryption\n\n\n\nmessage\n\nMessage (M)\n\n\n\nencrypt\n\nCiphertext (C) = M^e mod n\n\n\n\nmessage-&gt;encrypt\n\n\n\n\n\ninter\n\nEncrypted Transaction\n\n\n\nencrypt-&gt;inter\n\n\n\n\n\npublic_key_ref\n\n\n\nPrivate Key: (n, d)\n\n\n\npublic_key_ref-&gt;encrypt\n\n\n\n\n\nshamsg\n\nMessage (M)\n\n\n\nchecksum\n\nChecksum: sha256 M\n\n\n\nshamsg-&gt;checksum\n\n\n\n\n\ndigestpre\n\nTx Digest 1 (MD1) \n\n\n\nchecksum-&gt;digestpre\n\n\n\n\n\nsquares\n\n\n\nH^(0)\n\n\n\nsquares-&gt;checksum\n\n\n\n\n\nshamsg2\n\nMessage (M)\n\n\n\nchecksum2\n\nChecksum: sha256 M\n\n\n\nshamsg2-&gt;checksum2\n\n\n\n\n\ndigestpost\n\nTx Digest 0 (MD0)\n\n\n\nchecksum2-&gt;digestpost\n\n\n\n\n\nsquares2\n\n\n\nH^(0)\n\n\n\nsquares2-&gt;checksum2\n\n\n\n\n\nciphertext\n\nCiphertext (C)\n\n\n\ndecrypt\n\nMessage (M) = C^d mod n\n\n\n\nciphertext-&gt;decrypt\n\n\n\n\n\noutput\n\nDecrypted Transaction\n\n\n\ndecrypt-&gt;output\n\n\n\n\n\nprivate_key_ref\n\n\n\nPublic Key: (n, e)\n\n\n\nprivate_key_ref-&gt;decrypt\n\n\n\n\n\npre\n\nMD0\n\n\n\ncheck\n\n\n\nMD1 == MD0\n\n\n\npre-&gt;check\n\n\n\n\n\npost\n\nMD1\n\n\n\npost-&gt;check\n\n\n\n\n\naccept\n\nTransaction Acceptance\n\n\n\ncheck-&gt;accept\n\n\n\n\n\ninput\n\nUnencrypted Transaction\n\n\n\ninput-&gt;message\n\n\n\n\n\ninput-&gt;shamsg\n\n\n\n\n\ninter-&gt;ciphertext\n\n\n\n\n\noutput-&gt;shamsg2\n\n\n\n\n\ndigestpre-&gt;pre\n\n\n\n\n\ndigestpost-&gt;post\n\n\n\n\n\n\n\n\n\n\n\n\n\nDemo\n$ pwd\n~/crypto/bigrsa\n$ make # featuring libgmp because I'm scared of prime generation\ngcc bigrsa.c biggmp.c -std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -lgmp -o bigrsa -lgmp\ngcc bigkey.c biggmp.c -std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -lgmp -o bigkey -lgmp\n$ ./bigkey\n$ echo \"CD pays PC n buckerinos\" &gt; m.txt # home persona -&gt; work persona\n$ ./bigrsa -d m.txt c.txt # -d as we sign with private key\n$ cat c.txt # this will be unprintable\n8�s4�������}���9�xh�/��1�␦8��v����̃�[M�����]�'3�&gt;Vv\n$ ./bigrsa -e c.txt n.txt\n$ cat n.txt # will be original message\nCD pays PC n buckerinos\n$ ../shainc/shainc m.txt # just happen to have a sha256 around\nf7208b993f0ad6a7277dee1bf4bb5478a57562c76e5bf18e011d6729f91caaa8  m.txt\n$ ../shainc/shainc n.txt\nf7208b993f0ad6a7277dee1bf4bb5478a57562c76e5bf18e011d6729f91caaa8  n.txt\n\nBuckerinos accepted, who needs banks 👍\n\n\n\nWait a minute\n$ echo \"CD pays PC infinity buckerinos\" &gt; m.txt\n\nWhat stops this from happening?\n\n\n\nDoublecount\n\nThe problem of course is the payee can’t verify that one of the owners did not double-spend the coin.\n\n\nBanks with only n coins are the exact problem\n\n\n\nWith Physicalcoin\n\nThe (central?) bank is sole arbiter of providing credit with those coins.\nBanks with finite coins are vulnerable to bank runs.\nBanks have operating expenses that incur transaction costs.\nA bank must be trusted (very tough in early 2009, or… ever?)\n\n\n\nLedgers\n\nAll transactions are logged publicly (and verifiable publicly)\n\nA “public ledger”\n\nThese transactions in aggregate form the blockchain.\nAs of ~now the chain is ~600 GB\nIt can be “pruned” down to ~5 GB\nRemember, transactions = coins.\n\n\n\nAside: Metadata\n\nIn theory, Bitcoin can be anonymous.\n\nI generate a key, never tell anyone.\nParticipate like anyone else.\nThe key has nothing in common with my identity.\n\n\n\n\nAside: Limits\n\nIf a coin is used for something illegal (e.g. ransom), its full ownership is known.\nIf that coin is ever exchanged for currency/material, someone (e.g. DoJ) can seize assets.\nUsers take on risks trading ‘tainted’ coins\nDepartment of Justice Seizes $2.3 Million in Cryptocurrency Paid to the Ransomware Extortionists Darkside\n\n\n\nTimestamps\n\nTime is hard (actually impossible)\nOh well.\n\n\nThe solution we propose begins with a timestamp server\n\n\nPublicly announce every transaction.\nThrow in a struct.\nHash it every 10 minutes.\n\n\n\nFrom Paper\n\nEach timestamp includes the previous timestamp in sits hash, forming a chain, with each additional timestamp reinforcing the ones before it.\n\n\n\n\nAbstract Tx’s\n\nFor now, we abstract how transactions are handled.\n\nWe assume the existence of merkle.h\nFuture week\n\nWe can get timestamps froms &lt;times.h&gt;\nWe can get hashes from shainc or sha256sum\n\n\n\nBlock\n\n\nbchain.h\n\ntypedef struct digest_struct {\n    /* sha256 - 8 * 32 = 256 */\n    uint32_t h[8];\n} digest;\n\nstruct blockchain_struct {\n    /* hash of previous block */\n    digest  prev_h;\n    /* hash of transaction tree */\n    digest  tree_h;\n    /* time stamp */\n    time_t  time_s;\n    /* ???? */\n};\n\n\n\nDoublespend\n\nHow does this help?\n\nIn theory, evidence of past transactions, but…\nIsn’t it easy enough to spend twice and there be different chains of blocks?\nWith the no central server, what is authoritative.\n\n\n\n\nSolution\n\nTwo parts:\n\nFirst spend is authoritative\n\nEstablished by timestamps\n\nBlocks are expensive to forge\n\nThis is “bitcoin mining”\n\n\n\n\n\nProof of work\n\nMake a block except the nonce.\n\n“Number used once”\nThe fourth field, with previous, transactions, and time.\n\nPick arbitrary nonce.\nThen loop:\n\nWhile the hash of the block doesn’t have some trailing zeros…\nPick a new nonce.\n\n\n\n\nIt’s hard.\n\nLet’s get one trailing zero.\nAdd utf-8 “nonce”.\n\n$ echo \"CD-1&gt;PC0\" &gt; tx.txt; ./shainc tx.txt\n280f2529f42dc8164b8d630b33f691a3c44eacf426e2ee3cd36f8613ad2b6ee5  tx.txt\n$ echo \"CD-1&gt;PC1\" &gt; tx.txt; ./shainc tx.txt\nce6f47257405beddf0c4aff37e097a58b4c676c632da4f3b2f72a7ca47d96045  tx.txt\n$ echo \"CD-1&gt;PC2\" &gt; tx.txt; ./shainc tx.txt\n487fc3985769aa0763a21cc61b2006180d5d78676d58693e91e2da771d5af936  tx.txt\n\n...\n\n$ echo \"CD-1&gt;PCE\" &gt; tx.txt ; ./shainc tx.txt\ne2cd4224f6f6d64684ce4f31587ac1d14eca59390604168f5bde9390861692d3  tx.txt\n$ echo \"CD-1&gt;PCF\" &gt; tx.txt ; ./shainc tx.txt\n741f4fee0582ccb44db1503f8e3f326b2ae6c4ee94c3d0f31427e933b40a9fc0  tx.txt\n\n\nDifficulty\n\nBitcoin has a scaling difficulty.\n\nEvery binary trailing zero is 2x as hard.\nEvery hex trailing zero is 16x as hard.\nExponentially scaling.\n\nIt targets 1 block per 10 minutes across as bitcoin miners\n\nSo every participant tries to find the nonce and it takes 10 minutes.\n\n\n\n\nQuoth SN:\n\nSN: Proof-of-work is “one-CPU-one-vote”\n\nMe: In absolutely no way is this decentralized\nMe: ~65% of active/public CPUs are owned by AWS/AZ/GCP\nMe: A cryptography expert happens to have a proposed a currency that would be de facto centralized by the NSA and its tera+scale cryptography datacenters at time of proposal.\n\n\n\n\nLogging\n\nThe majority decision is represented by the longest chain, which has the greatest proof-of-work effort invested in it.\n\n\nSecurity (undeniability) scales with age.\nForks can happen (two hashes discovered on different contents within nanoseconds)\nMost famous fork: Bitcoin and Bitcoin Cash\nThe chain gets more secure every 10 minutes.\n\n\n\nCompute\n\nIf a majority of CPU power is controlled by honest nodes, the honest chain will grow the fastest and outpace any competing chains.\n\n\nBig ‘if’\nBitcoin good at “dubiously legal”\nThe same authorities with majority of CPU power (trillion dollar companies, US Govt) also influence or control fiat currency (USD, Apple/Google Pay)\n\n\n\nClimate\n\nTo compensate for increasing hardware speed and varying interest in running nodes over time, the proof-of-work difficulty is determined by a moving average targeting an average number of blocks per hour.\n\n\nBitcoin becomes less efficient/more costly to use over time (by necessity)\nMiners are more efficient per hash - driving GPU development and a little bit the AI boom.\n\n\n\nThe Network\n\n\nBitcoin Network\n\nNew transactions are broadcast to all nodes\nEach node collects makes a block.\nEach node starts proof-of-work for its block.\nIf found, broadcasts the block to all nodes.\nNodes accept the block only if all transactions in it are valid (no doublespend).\nNodes accept via starting on the next block.\n\n\n\nBroadcast\n\nNew transactions are broadcast to all nodes\n\n\nYou have seen broadcasts:\n\nWithin Node.js, a server could receive information and broadcast it publicly.\nThere is existing support in the npm (node package manager) ecosystem.\nYou shouldn’t mine in Node.js and you shouldn’t store on network, but it’s worth a look.\n\nThere is nothing wrong with thinking of the Bitcoin network as many Node.js servers pinging each other.\nDoing this well, much less exhaustively, is non-trivial, but doing it “at all” is easy.\n\n\n\nAside: Example\n\nThis implements the message server of the famous impossibility result from Nancy Lynch that led to the eventual bitcoin result.\n\n\n\n\n\nCollect\n\nEach node collects new transactions into a block.\n\n\n\nbchain.h\n\nstruct blockchain_struct {\n    /* hash of previous block */\n    digest  prev_h;\n    /* hash of transaction tree */\n    digest  tree_h;\n    /* time stamp */\n    time_t  time_s;\n    /* number used once */\n    digest  n_once; /* Nonce has to be digest sized. Why? */\n};\n\n\n\nWork / Mine\n\nJust hash in a loop with a counter.\n\nHash\nProbably bitshift the result or something.\nSee if zero\n\nIf yes, broadcast*\nIf no, incrememnt counter.\n\n\nBroadcasting out-of-scope for now.\n\n\n\nBroadcast II\n\nWhen a node finds a proof-of-work, it broadcasts the block to all nodes.\n\n\nOnly miners must listen for transactions.\nAll users must listen for blocks.\nWhen your transaction is in a block, its means you gained/lost a coin.\nUntil then, in flux.\n\n\n\nAccept\n\nNodes accept the block only if all transactions in it are valid and not already spent.\n\n\nAll nodes inspect transaction history for doublecounts, etc.\nIf found, they keep working on the ‘old’ block, which isn’t fraudulent\nFraudelent blocks are expensive to make and unlikely to be accepted.\n\n\n\nExpress\n\nNodes express their acceptance of the block by working on creating the next block in the chain, using the hash of the accepted block as the previous hash.\n\n\nA block is known to have been expected once it is a previous block to a working block.\nSo, block n-2 is known accepted, n-1 is likely accepted but there may be candidates, n is currently being mined.\n\n\n\nIn my words:\n\nBroadcast (Transactions)\nCollect\nWork/Mine\nBroadcast (Block)\nAccept\nExpress\n\n\n\nToday\n\n✓ Background\n✓ Blocks\n\nJust structs\n\n\n\n\nClosing thoughts\n\nMake a block\nPut in a list\nBam! Blockchain\n\nLists that can’t lie."
  },
  {
    "objectID": "heap_t.html#initialize-or-construct-a-new-heap.",
    "href": "heap_t.html#initialize-or-construct-a-new-heap.",
    "title": "heap_t",
    "section": "Initialize or construct a new heap.",
    "text": "Initialize or construct a new heap.\n\nYou may not change the type but may change the names.\nImplement a max heap, wherein the maximum element per the comparison function called gt below is in the initial position.\nYou may 1-index or 0-index.\n\nheap_t heap(size_t ele_size, bool (*gt)(void *, void *));\n\nI stack allocated my heap, which you are welcome but not required to do.\nMy initial heap explicitly contained zero elements.\n\n\nThe Heap Struct\n\nI am requiring the usage of a single internal array, a function pointer, and something to track the size of elements in the array.\nYou do not have to maintain capacity and there is no graceful way to avoiding maintaining num_eles (though non-graceful is fine) but it is probably easier to view them as required.\n\n#include &lt;stdbool.h&gt;\n\ntypedef struct heap_struct {\n    /* These may be changed, but probably are okay */\n    size_t ele_size; /* size of element */\n    size_t num_eles; /* number of elements */\n    size_t capacity; /* current capacity of the heap */\n    bool (*gt)(void *, void *); /* for \"greater than\" */\n    /* You must store all data elements s.t. reachable from 1 pointer */\n    void *eles;\n} heap_t;\n\n\nExplanation\n\nele_size\n\nThis heap implementation allows storage of elements of any size_t specifiable size.\nFor example, it could store hash digests, 4096_t, fixed length strengths, or uint24_t’s.\nThis is a helpful exercise in reflecting on types and sizes.\n\nnum_eles\n\nA heap must track its size to know where to place the next element on an insert operation.\n\ncapacity\n\nYou are not required to keep an internal array precisely large enough to store all elements.\nI only change the size of my internal array by doubling, a common rule of thumb.\nYou can change the size of an array with novel malloc, a memcpy, and a free, or\nYou can change the size of an array with realloc, which is preferred but was not covered in lecture.\nYou are not required to have a distinct num_eles and capacity, but are sufficiently encouraged to do so I made both fields mandatory.\n\ngt\n\nThis is just the comparison function, without which the sorting regime of the heap is unclear and should be maintained within the data structure.\nI separately wanted you to see a struct with a function in it!\n\neles\n\nThis is the entries of the heap.\nIt must satisfy the heap property of the element at the initial location being the maximum.\nAll elements must be stored linearly in a single contigious memory block.\nYou may index to zero 0 or one 1 at your discretion, I used zero indexing which seemed unexpectedly easier when writing the code."
  },
  {
    "objectID": "heap_t.html#insert-an-element",
    "href": "heap_t.html#insert-an-element",
    "title": "heap_t",
    "section": "Insert an element",
    "text": "Insert an element\nvoid insert(heap_t *heap, void *ele_ptr);\n\nGiven the pointer to some element of appropriate size to be stored in the heap, place it in the first available location in the heap array then perform the heapify operation.\nConsult the slides if you are unclear on what heapify is."
  },
  {
    "objectID": "heap_t.html#list-to-heap.",
    "href": "heap_t.html#list-to-heap.",
    "title": "list_t",
    "section": "List to heap.",
    "text": "List to heap."
  },
  {
    "objectID": "heap_t.html#initialize-or-construct-a-new-heap.-1",
    "href": "heap_t.html#initialize-or-construct-a-new-heap.-1",
    "title": "heap_t",
    "section": "Initialize or construct a new heap.",
    "text": "Initialize or construct a new heap."
  },
  {
    "objectID": "heap_t.html#challenge-problem-heap-sort-a-list",
    "href": "heap_t.html#challenge-problem-heap-sort-a-list",
    "title": "heap_t",
    "section": "Challenge Problem: Heap sort a list",
    "text": "Challenge Problem: Heap sort a list\n\nEnsure you leak no memory.\nI found inplace (via the void return) more interesting than returning a new list, but not, I would say, easier.\n\nvoid h_sort(list_t l);"
  },
  {
    "objectID": "heap_t.html#challenge-problem-list-to-heap.",
    "href": "heap_t.html#challenge-problem-list-to-heap.",
    "title": "heap_t",
    "section": "Challenge Problem: List to heap.",
    "text": "Challenge Problem: List to heap.\n\nConvert a list to heap.\nWas more interesting to me as a creating a novel heap and preserving the initial list, but as a challenge problem you may set your own function type.\n\nheap_t l_to_h(list_t l);\n\nReasonable to make an h_to_l as well or not, the first direction seemed more interesting to me."
  },
  {
    "objectID": "heap_t.html#code",
    "href": "heap_t.html#code",
    "title": "heap_t",
    "section": "Code",
    "text": "Code\n#include &lt;stdbool.h&gt;\n\ntypedef struct heap_struct {\n    /* These may be changed, but probably are okay */\n    size_t ele_size; /* size of element */\n    size_t num_eles; /* number of elements */\n    size_t capacity; /* current capacity of the heap */\n    bool (*gt)(void *, void *); /* for \"greater than\" */\n    /* You must store all data elements s.t. reachable from 1 pointer */\n    void *eles;\n} heap_t;"
  },
  {
    "objectID": "heap_t.html#explanation",
    "href": "heap_t.html#explanation",
    "title": "heap_t",
    "section": "Explanation",
    "text": "Explanation\n\nele_size\n\nThis heap implementation allows storage of elements of any size_t specifiable size.\nFor example, it could store hash digests, 4096_t, fixed length strengths, or uint24_t’s.\nThis is a helpful exercise in reflecting on types and sizes.\n\nnum_eles\n\nA heap must track its size to know where to place the next element on an insert operation.\n\ncapacity\n\nYou are not required to keep an internal array precisely large enough to store all elements.\nI only change the size of my internal array by doubling, a common rule of thumb.\nYou can change the size of an array with novel malloc, a memcpy, and a free, or\nYou can change the size of an array with realloc, which is preferred but was not covered in lecture.\nYou are not required to have a distinct num_eles and capacity, but are sufficiently encouraged to do so I made both fields mandatory.\n\ngt\n\nThis is just the comparison function, without which the sorting regime of the heap is unclear and should be maintained within the data structure.\nI separately wanted you to see a struct with a function in it!\n\neles\n\nThis is the entries of the heap.\nIt must satisfy the heap property of the element at the initial location being the maximum.\nAll elements must be stored linearly in a single contigious memory block.\nYou may index to zero 0 or one 1 at your discretion, I used zero indexing which seemed unexpectedly easier when writing the code."
  },
  {
    "objectID": "heap_t.html#the-heap-struct",
    "href": "heap_t.html#the-heap-struct",
    "title": "heap_t",
    "section": "The Heap Struct",
    "text": "The Heap Struct\n\nI am requiring the usage of a single internal array, a function pointer, and something to track the size of elements in the array.\nYou do not have to maintain capacity and there is no graceful way to avoiding maintaining num_eles (though non-graceful is fine) but it is probably easier to view them as required.\n\n#include &lt;stdbool.h&gt;\n\ntypedef struct heap_struct {\n    /* These may be changed, but probably are okay */\n    size_t ele_size; /* size of element */\n    size_t num_eles; /* number of elements */\n    size_t capacity; /* current capacity of the heap */\n    bool (*gt)(void *, void *); /* for \"greater than\" */\n    /* You must store all data elements s.t. reachable from 1 pointer */\n    void *eles;\n} heap_t;"
  },
  {
    "objectID": "heap_t.html#pop-the-maximal-element",
    "href": "heap_t.html#pop-the-maximal-element",
    "title": "heap_t",
    "section": "Pop the maximal element",
    "text": "Pop the maximal element\nvoid *maxpop(heap_t *heap);\n\nThis returns a heap allocated copy of the former maximum value in the heap.\nSeparately, these element is removed from the heap.\nFinally, the heap is rearranged to maintain the heap property using a “SiftDown” operation."
  },
  {
    "objectID": "heap_t.html#sift-down",
    "href": "heap_t.html#sift-down",
    "title": "heap_t",
    "section": "Sift Down",
    "text": "Sift Down\n\nAfter a maxpop, the initial index - zero or one - is vacant.\nOverwrite this value at this location with the last element in the heap array - the rightmost leaf in the last layer.\nCompare this value, now at the initial position, which each of its children.\nSwap it with the greatest of its children.\nContinue to swap, or “sift down”, this value until it is either in a leaf position or is greater than both of its children."
  },
  {
    "objectID": "heap_t.html#visual-demo",
    "href": "heap_t.html#visual-demo",
    "title": "heap_t",
    "section": "Visual Demo",
    "text": "Visual Demo\n\nBegin with the default heap.\n\n{224, 160, 192, 64, 96, 128}\n\n\n\n\n\n\n\nfinite_automata\n\n\n1\n\n224\n\n\n\n2\n\n160\n\n\n\n1-&gt;2\n\n\n\n\n\n3\n\n192\n\n\n\n1-&gt;3\n\n\n\n\n\n4\n\n064\n\n\n\n2-&gt;4\n\n\n\n\n\n5\n\n096\n\n\n\n2-&gt;5\n\n\n\n\n\n6\n\n128\n\n\n\n3-&gt;6\n\n\n\n\n\n\n\n\n\n\n\nHeap allocate a space for 224 to be returned to the client (and freed by the client).\nOverwrite 224 with the rightmost leaf of the final layer.\n\nIn this case, I also just leave this value in the array (why not?)\nI just won’t look at it due to it being outside of the number of elements, and it will be freed eventually.\n\n\n{128, 160, 192, 64, 96}\n\n\n\n\n\n\n\nfinite_automata\n\n\n1\n\n128\n\n\n\n2\n\n160\n\n\n\n1-&gt;2\n\n\n\n\n\n3\n\n192\n\n\n\n1-&gt;3\n\n\n\n\n\n4\n\n064\n\n\n\n2-&gt;4\n\n\n\n\n\n5\n\n096\n\n\n\n2-&gt;5\n\n\n\n\n\n\n\n\n\n\n\nI check both of 128s children, find the maximum, and compare that to 128\n\nThe maximum is 192\nThat is greater than 128\nSo, swap.\n\n\n{192, 160, 128, 64, 96}\n\n\n\n\n\n\n\nfinite_automata\n\n\n1\n\n192\n\n\n\n2\n\n160\n\n\n\n1-&gt;2\n\n\n\n\n\n3\n\n128\n\n\n\n1-&gt;3\n\n\n\n\n\n4\n\n064\n\n\n\n2-&gt;4\n\n\n\n\n\n5\n\n096\n\n\n\n2-&gt;5\n\n\n\n\n\n\n\n\n\n\n\nIf 128 had child nodes, I would recurse, but in the case the process terminates here as the 128 is a leaf.\nWe notice that the heap property is satisfied - all parent nodes are greater than all of their child nodes."
  },
  {
    "objectID": "heap_t.html#pop-the-maximal-element-and-sift-down",
    "href": "heap_t.html#pop-the-maximal-element-and-sift-down",
    "title": "heap_t",
    "section": "Pop the maximal element and sift down",
    "text": "Pop the maximal element and sift down\nvoid *maxpop(heap_t *heap);\n\nThis returns a heap allocated copy of the former maximum value in the heap.\nSeparately, this element is removed from the heap.\nFinally, the heap is rearranged to maintain the heap property using a “SiftDown” operation.\n\n\nSift Down\n\nAfter a maxpop, the initial index - zero or one - is vacant.\nOverwrite this value at this location with the last element in the heap array - the rightmost leaf in the last layer.\nCompare this value, now at the initial position, which each of its children.\nSwap it with the greatest of its children.\nContinue to swap, or “sift down”, this value until it is either in a leaf position or is greater than both of its children.\n\n\n\nVisual Demo\n\nBegin with the default heap.\n\n{224, 160, 192, 64, 96, 128}\n\n\n\n\n\n\n\nfinite_automata\n\n\n1\n\n224\n\n\n\n2\n\n160\n\n\n\n1-&gt;2\n\n\n\n\n\n3\n\n192\n\n\n\n1-&gt;3\n\n\n\n\n\n4\n\n064\n\n\n\n2-&gt;4\n\n\n\n\n\n5\n\n096\n\n\n\n2-&gt;5\n\n\n\n\n\n6\n\n128\n\n\n\n3-&gt;6\n\n\n\n\n\n\n\n\n\n\n\nHeap allocate a space for 224 to be returned to the client (and freed by the client).\nOverwrite 224 with the rightmost leaf of the final layer.\n\nIn this case, I also just leave this value in the array (why not?)\nI just won’t look at it due to it being outside of the number of elements, and it will be freed eventually.\n\n\n{128, 160, 192, 64, 96}\n\n\n\n\n\n\n\nfinite_automata\n\n\n1\n\n128\n\n\n\n2\n\n160\n\n\n\n1-&gt;2\n\n\n\n\n\n3\n\n192\n\n\n\n1-&gt;3\n\n\n\n\n\n4\n\n064\n\n\n\n2-&gt;4\n\n\n\n\n\n5\n\n096\n\n\n\n2-&gt;5\n\n\n\n\n\n\n\n\n\n\n\nI check both of 128s children, find the maximum, and compare that to 128\n\nThe maximum is 192\nThat is greater than 128\nSo, swap.\n\n\n{192, 160, 128, 64, 96}\n\n\n\n\n\n\n\nfinite_automata\n\n\n1\n\n192\n\n\n\n2\n\n160\n\n\n\n1-&gt;2\n\n\n\n\n\n3\n\n128\n\n\n\n1-&gt;3\n\n\n\n\n\n4\n\n064\n\n\n\n2-&gt;4\n\n\n\n\n\n5\n\n096\n\n\n\n2-&gt;5\n\n\n\n\n\n\n\n\n\n\n\nIf 128 had child nodes, I would recurse, but in the case the process terminates here as the 128 is a leaf.\nWe notice that the heap property is satisfied - all parent nodes are greater than all of their child nodes."
  },
  {
    "objectID": "logics.html#background",
    "href": "logics.html#background",
    "title": "Logics",
    "section": "Background",
    "text": "Background\nThesis Title\nMining Secure Behavior of Hardware Designs\nPlain English\nJust as there are bugs in code that makes software, modern hardware is also written in code and therefore may contain bugs. I find these bugs.\nThesis\nSpecification mining can discover properties that can be used to verify the secure behavior of closed source CISC CPU designs, properties that can be used to verify the temporal correctness of CPU designs, and hyperproperties that can be used to verify that modules, SoCs, and CPUs have secure information flow.\nSome partners\nIntel Corporation, Semiconductor Research Corporation, Synopsys, MITRE, Cycuity"
  },
  {
    "objectID": "logics.html#motivations",
    "href": "logics.html#motivations",
    "title": "Logics",
    "section": "Motivations",
    "text": "Motivations\n\nComputers are just like everything else. But it can be hard to remember this!\nWhen reasonable precautions are not taken, problems arise affecting security and privacy."
  },
  {
    "objectID": "logics.html#diving-in",
    "href": "logics.html#diving-in",
    "title": "Logics",
    "section": "Diving In",
    "text": "Diving In\n\nThis course is an introduction on security, and covers more than just programming!\nProgramming will be used to teach the computing portion of the course, but the focus is less on programming itself and more on general computer ssecurity principles.\nIf you come across situations where you need to know a bit more about specific programming details, there are plenty of resources online, or just ask me!"
  },
  {
    "objectID": "logics.html#threat-1",
    "href": "logics.html#threat-1",
    "title": "Logics",
    "section": "Threat",
    "text": "Threat\n“Security” is incomplete as a concept.\n\nWhat is secure?\nFor whom is the ‘what’ secure?\nFrom whom is the ‘what’ secure?"
  },
  {
    "objectID": "logics.html#brainstorming",
    "href": "logics.html#brainstorming",
    "title": "Logics",
    "section": "Brainstorming",
    "text": "Brainstorming\n\nWhat are some things that we think of as being secure?\n\nWhat computer systems?\nWhat non-computing things?\nIs there a boundary between these?\n\nWhat does “security” mean to you?\nWhat about “secure” as an adjective?\nWhat about “secure” as a verb?\nForm groups of 2-4 and create a definiton of “secure” and “security”. [10-15 min]"
  },
  {
    "objectID": "logics.html#messaging",
    "href": "logics.html#messaging",
    "title": "Logics",
    "section": "Messaging",
    "text": "Messaging\nConsider and end-to-end messaging service.\n\nMessaging is secure.\nFor all senders and receivers the messaging is secured.\nFrom any third party the messaging service is secured."
  },
  {
    "objectID": "logics.html#limitations",
    "href": "logics.html#limitations",
    "title": "Logics",
    "section": "Limitations",
    "text": "Limitations\nWhat does this leave out?\n\nCan a third party tell who uses the service?\nCan a third party tell when messages are being sent?\nCan a third party tell the length of the messages?\n\nDo these matter?\nWho decides?"
  },
  {
    "objectID": "logics.html#clarity-matters",
    "href": "logics.html#clarity-matters",
    "title": "Logics",
    "section": "Clarity Matters",
    "text": "Clarity Matters\n\nIn 2019, Federal Police in Australia were taken to court.\n\nThey illegally accessed “metadata”.\nWhen caught, they lied about whether they did it or not.\nWhen caught again, they lied about how many times they did it.\nWe still don’t know if we know the extent of illegal access.\n\nForm groups of 2-4 and discuss: How can we address this environment as scientists of data and computing? [10 min]"
  },
  {
    "objectID": "logics.html#threat-modeling",
    "href": "logics.html#threat-modeling",
    "title": "Logics",
    "section": "Threat Modeling",
    "text": "Threat Modeling\nA more complete solution to security analysis is threat modeling.\nA threat model typically addresses:\n\nDescription of the subject to be modeled\nAssumptions that can be checked or challenged in the future as the threat landscape changes\nPotential threats to the system\nActions that can be taken to mitigate each threat\nA way of validating the model and threats, and verification of success of actions taken\n\nRead more: OWASP.org"
  },
  {
    "objectID": "logics.html#looping-back",
    "href": "logics.html#looping-back",
    "title": "Logics",
    "section": "Looping back!",
    "text": "Looping back!\nThis is what we have been doing!\nInformally\nFormally\nWhat?\nDescription of the subject to be modeled\nFor whom?\nA way of validating the model and threats, and verification of success of actions taken\nFrom whom?\nPotential threats to the system\nAny limitations?\nAssumptions that can be checked or challenged in the future as the threat landscape changes\nHow?\nActions that can be taken to mitigate each threat"
  },
  {
    "objectID": "logics.html#a-messaging-service",
    "href": "logics.html#a-messaging-service",
    "title": "Logics",
    "section": "A messaging service",
    "text": "A messaging service\nFor our messaging service…\nWhat?\nA way for users to send one another messages…\nFor whom?\n…such that only the sender and intended receipient may read the content…\nFrom whom?\n…yet third parties, such as other users, the service provider, and law enforcement may not…\nAny limitations?\nthough it may be possible to determine who is sending messages and when.\nHow?\nTo be continued!"
  },
  {
    "objectID": "logics.html#artifacts",
    "href": "logics.html#artifacts",
    "title": "Logics",
    "section": "Artifacts",
    "text": "Artifacts\nWe can instead proceed in four steps.\n\nDiagram: What are we building?\nIdentify threats: What could go wrong?\nMitigate:What are we doing to defend against threats?\nValidate: Have we acted on each of the previous steps?"
  },
  {
    "objectID": "logics.html#process",
    "href": "logics.html#process",
    "title": "Logics",
    "section": "Process",
    "text": "Process\n\n\n\n\nTerm this \\(M_1\\):\n\nStates \\[\n   q_n\n   \\]\nTransitions \\[\n  \\overset{\\{1\\}}{\\longrightarrow}\n  \\]\nStart state \\(q_1\\)\nAccept state \\(q_3\\)\n\n\n\n\n\nInput\n\nFinite bit string\n\\(\\{0,1\\}^n\\)\n\nOutput\n\nBoolean or bit\n\\(\\{0,1\\}\\)\n\nBegin in start\nRead symbol\nFollow edge"
  },
  {
    "objectID": "logics.html#signal",
    "href": "logics.html#signal",
    "title": "Logics",
    "section": "Signal",
    "text": "Signal\n“Signal is a cross-platform encrypted instant messaging service… Users can send one-to-one and group messages, which can include files, voice notes, images, and videos.”"
  },
  {
    "objectID": "logics.html#diagram",
    "href": "logics.html#diagram",
    "title": "Logics",
    "section": "Diagram",
    "text": "Diagram\nSignal is a… instant messaging service."
  },
  {
    "objectID": "logics.html#diagram-1",
    "href": "logics.html#diagram-1",
    "title": "Logics",
    "section": "Diagram",
    "text": "Diagram\nSignal is a… encrypted instant messaging service."
  },
  {
    "objectID": "logics.html#diagram-2",
    "href": "logics.html#diagram-2",
    "title": "Logics",
    "section": "Diagram",
    "text": "Diagram\nSignal is a cross-platform encrypted instant messaging service."
  },
  {
    "objectID": "logics.html#identify-threats",
    "href": "logics.html#identify-threats",
    "title": "Logics",
    "section": "Identify Threats",
    "text": "Identify Threats\nWho do you not want reading your messages?"
  },
  {
    "objectID": "logics.html#identify-threats-1",
    "href": "logics.html#identify-threats-1",
    "title": "Logics",
    "section": "Identify Threats",
    "text": "Identify Threats\nWho do you not want reading your messages?"
  },
  {
    "objectID": "logics.html#mitigation-and-validation",
    "href": "logics.html#mitigation-and-validation",
    "title": "Logics",
    "section": "Mitigation and Validation",
    "text": "Mitigation and Validation\nThese things are hard - but we must first ask the right questions.\n\nSignal is open source, and subject to community scrutiny.\nSignal has been demonstrated and is used by many users.\nSignal is recommended by privacy, technology, and activist communities.\nIs this enough?"
  },
  {
    "objectID": "logics.html#best-practices",
    "href": "logics.html#best-practices",
    "title": "Logics",
    "section": "Best Practices",
    "text": "Best Practices\nFive techniques for success\n\nDefine the scope and depth of analysis.\nGain a visual understanding of what you’re threat modeling.\nVisually model the attack possibilities.\nIdentify threats.\nDocument of missing or weak security controls."
  },
  {
    "objectID": "logics.html#define-the-scope",
    "href": "logics.html#define-the-scope",
    "title": "Logics",
    "section": "Define the Scope",
    "text": "Define the Scope\n\nDetermine stakeholders\n\nWho uses the service?\nWho provides the service?\nWho benefits from the service?\nWho does not benefit from the service?\n\nWho can answer these questions?\n\nAre they the same or different people?\nShould you do this by yourself?\nWhat do you do if you need help?"
  },
  {
    "objectID": "logics.html#visual-understanding",
    "href": "logics.html#visual-understanding",
    "title": "Logics",
    "section": "Visual Understanding",
    "text": "Visual Understanding\nI made this in draw.io"
  },
  {
    "objectID": "logics.html#identify-threats-2",
    "href": "logics.html#identify-threats-2",
    "title": "Logics",
    "section": "Identify Threats",
    "text": "Identify Threats\nWho do you not want reading your messages?"
  },
  {
    "objectID": "logics.html#document",
    "href": "logics.html#document",
    "title": "Logics",
    "section": "Document",
    "text": "Document\nThere are established norms for secure code - what about other services?"
  },
  {
    "objectID": "logics.html#now-consider",
    "href": "logics.html#now-consider",
    "title": "Logics",
    "section": "Now consider",
    "text": "Now consider\nA traffic light:\n\nDiagram: What are we building?\nIdentify threats: What could go wrong?\nMitigate: What are we doing to defend against threats?\nValidate: Have we acted on each of the previous steps?"
  },
  {
    "objectID": "logics.html#artifacts-1",
    "href": "logics.html#artifacts-1",
    "title": "Logics",
    "section": "Artifacts",
    "text": "Artifacts\nWe can instead proceed in four steps.\n\nDiagram: What are we building?\nIdentify threats: What could go wrong?\nMitigate:What are we doing to defend against threats?\nValidate: Have we acted on each of the previous steps?"
  },
  {
    "objectID": "logics.html#model",
    "href": "logics.html#model",
    "title": "Logics",
    "section": "Model",
    "text": "Model\nInformally\nFormally\nWhat?\nDescription of the subject to be modeled\nFor whom?\nA way of validating the model and threats, and verification of success of actions taken\nFrom whom?\nPotential threats to the system\nAny limitations?\nAssumptions that can be checked or challenged in the future as the threat landscape changes\nHow?\nActions that can be taken to mitigate each threat"
  },
  {
    "objectID": "logics.html#your-turn",
    "href": "logics.html#your-turn",
    "title": "Logics",
    "section": "Your turn!",
    "text": "Your turn!\nA commercial airliner threat model:\n\nConcerns crew and passengers, a flight deck and a service station.\nShould answer What?, For whom?, From whom?, Any limitations?\nShould include a a diagram and identify threats.\n\nForm groups of 2-4 and create 3-5 slides. [30-45 min]"
  },
  {
    "objectID": "logics.html#model-1",
    "href": "logics.html#model-1",
    "title": "Logics",
    "section": "Model",
    "text": "Model\nInformally\nFormally\nWhat?\nDescription of the subject to be modeled\nFor whom?\nA way of validating the model and threats, and verification of success of actions taken\nFrom whom?\nPotential threats to the system\nAny limitations?\nAssumptions that can be checked or challenged in the future as the threat landscape changes\nHow?\nActions that can be taken to mitigate each threat"
  },
  {
    "objectID": "logics.html#properties-1",
    "href": "logics.html#properties-1",
    "title": "Logics",
    "section": "Properties",
    "text": "Properties\n\nSome security properties are about bad things not happening:\n\nG¬_bad_\nTerm this “safety”\n\nSome security properties are about good things happening someday:\n\nF_good_\nTerm this “liveness”\n\nThese security policies are distinct but difficult to differentiate in Kripke Structures.\nFor non-experts, it may be helpful to formulate security properties that differentiate these.\n\n“I want to be able to access my apartment sometimes but I don’t want adversaries to be able to access it ever.”"
  },
  {
    "objectID": "logics.html#trace-properties",
    "href": "logics.html#trace-properties",
    "title": "Logics",
    "section": "Trace Properties",
    "text": "Trace Properties\n\nI think of properties in terms of traces\nA trace is the sequence of states through which a system passes over time.\n\nA sequence is an ordering of something. So traces are in order.\nA state is the configuration of a system at some specific time point.\nA system here is the entity that implements the security policy.\nWe emphasize the notion of over time. Traces are time-based."
  },
  {
    "objectID": "logics.html#traffic-light",
    "href": "logics.html#traffic-light",
    "title": "Logics",
    "section": "Traffic Light",
    "text": "Traffic Light\n\nThink of a traffic light.\n\nIn what states may a traffic light be?\nIn what sequence may these states occur?\nDoes a traffic light implement a security policy\nDo traffic lights change over time?"
  },
  {
    "objectID": "logics.html#theory-break-sorry",
    "href": "logics.html#theory-break-sorry",
    "title": "Logics",
    "section": "Theory break (sorry!)",
    "text": "Theory break (sorry!)\nA traffic light is an example of a state machine.\nA state machine is a mathematical model of computation. It is an abstract machine that can be in exactly one of a finite number of states at any given time."
  },
  {
    "objectID": "logics.html#trace-properties-1",
    "href": "logics.html#trace-properties-1",
    "title": "Logics",
    "section": "Trace Properties",
    "text": "Trace Properties\n\nA trace is the sequence of states through which a system passes over time.\n\nA sequence is an ordering of something. So traces are in order.\nA state is the configuration of a system at some specific time point.\nA system here is the entity that implements the security policy\nWe emphasize the notion of over time. Traces are time-based"
  },
  {
    "objectID": "logics.html#some-examples",
    "href": "logics.html#some-examples",
    "title": "Logics",
    "section": "Some Examples",
    "text": "Some Examples\nLet’s review some traces and see if they are from a traffic light system that is operating properly.\ntrace = [\n    \"RED___\",\n    \"GREEN_\",\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\",\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\",\n    \"YELLOW\"\n]"
  },
  {
    "objectID": "logics.html#start",
    "href": "logics.html#start",
    "title": "Logics",
    "section": "Start",
    "text": "Start\nDoes starting state matter?\ntrace = [\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\",\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\",\n    \"YELLOW\"\n]\n\ntrace = [\n    \"GREEN_\",\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\",\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\"\n]\n\ntrace = [\n    \"RED___\",\n    \"GREEN_\",\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\",\n    \"YELLOW\",\n    \"RED___\"\n]\nEnd"
  },
  {
    "objectID": "logics.html#length",
    "href": "logics.html#length",
    "title": "Logics",
    "section": "Length",
    "text": "Length\nDoes length matter?\ntrace = [\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\",\n    \"YELLOW\",\n    \"RED___\"\n]\n\ntrace = [\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\",\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\"\n]\n\ntrace = [\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\",\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\",\n    \"YELLOW\"\n]"
  },
  {
    "objectID": "logics.html#unique",
    "href": "logics.html#unique",
    "title": "Logics",
    "section": "Unique",
    "text": "Unique\nDoes the number of unique states matter?\ntrace = [\n    \"YELLOW\"\n]\n\ntrace = [\n    \"YELLOW\",\n    \"RED___\"\n]\n\ntrace = [\n    \"YELLOW\",\n    \"RED___\",\n    \"GREEN_\"\n]"
  },
  {
    "objectID": "logics.html#order",
    "href": "logics.html#order",
    "title": "Logics",
    "section": "order",
    "text": "order\nDoes order matter?\ntrace = [\n    \"GREEN_\",\n    \"YELLOW\"\n]\n\ntrace = [\n    \"RED___\",\n    \"YELLOW\",\n]\n\ntrace = [\n    \"GREEN_\",\n    \"RED___\"\n]"
  },
  {
    "objectID": "logics.html#sets-of-traces",
    "href": "logics.html#sets-of-traces",
    "title": "Logics",
    "section": "Sets of Traces",
    "text": "Sets of Traces\nA trace property is a set of traces.\nThe variable “property” is a list of traces.\nproperty[0] = [\"GREEN_\"]\nproperty[1] = [\"YELLOW\"]\nproperty[2] = [\"RED___\"]\nproperty[3] = [\"GREEN_\", \"YELLOW\"]"
  },
  {
    "objectID": "logics.html#system-properties",
    "href": "logics.html#system-properties",
    "title": "Logics",
    "section": "System Properties",
    "text": "System Properties\n\nA security policy has some given property if all possible traces produced by a system following said security policy are traces within the given property.\nThis may be an infinite number of traces or include traces of infinite length.\nSystems may have more than one property.\n\nLogics of specification are used to specify properties - more on that latter."
  },
  {
    "objectID": "logics.html#on-security",
    "href": "logics.html#on-security",
    "title": "Logics",
    "section": "On Security",
    "text": "On Security\nProperties provide a way to answer the “How?” after asking:\n\nWhat is secure?\nFor whom is the ‘what’ secure?\nFrom whom is the ‘what’ secure?"
  },
  {
    "objectID": "logics.html#announcements",
    "href": "logics.html#announcements",
    "title": "Logics",
    "section": "Announcements",
    "text": "Announcements\n\nWelcome to DATA-599: Cybersecurity!\nThere was no homework but is a lingering in-class exercise.\n\nNot to worry! I have something for next week.\n\nLet’s talk about how to specify properties."
  },
  {
    "objectID": "logics.html#properties-2",
    "href": "logics.html#properties-2",
    "title": "Logics",
    "section": "Properties",
    "text": "Properties\n“I want to be able to access my savings but no one else.”\n\nSafety properties are about bad things not happening:\n\nG¬_bad_\nThese are undefined transitions in Büchi automata\n“No one else may access my savings”\n\nLiveness properties are about good things happening eventually:\n\nF_good_\nThese are accepting states in Büchi automata\n“I want to be able to access my savings”"
  },
  {
    "objectID": "logics.html#trace-properties-2",
    "href": "logics.html#trace-properties-2",
    "title": "Logics",
    "section": "Trace Properties",
    "text": "Trace Properties\n\nA trace is the sequence of states through which a system passes over time.\n\nA sequence is an ordering of something. So traces are in order.\nA state is the configuration of a system at some specific time point.\nA system here is the entity that implements the security policy\nWe emphasize the notion of over time. Traces are time-based"
  },
  {
    "objectID": "logics.html#sets-of-traces-1",
    "href": "logics.html#sets-of-traces-1",
    "title": "Logics",
    "section": "Sets of Traces",
    "text": "Sets of Traces\nA set is an ordered collection of elements (such as sequences).\nA sequence is an ordered collection of elements (such as states).\nA trace property is a set of traces.\nA trace is a sequence of states."
  },
  {
    "objectID": "logics.html#organization",
    "href": "logics.html#organization",
    "title": "Logics",
    "section": "Organization",
    "text": "Organization"
  },
  {
    "objectID": "logics.html#example",
    "href": "logics.html#example",
    "title": "Logics",
    "section": "Example",
    "text": "Example"
  },
  {
    "objectID": "logics.html#enumeration",
    "href": "logics.html#enumeration",
    "title": "Logics",
    "section": "Enumeration",
    "text": "Enumeration\nLast class, we enumerated the possible traces.\nproperty[0] = [\"GREEN_\"]\nproperty[1] = [\"YELLOW\"]\nproperty[2] = [\"RED___\"]\nproperty[3] = [\"GREEN_\", \"YELLOW\"]"
  },
  {
    "objectID": "logics.html#talk",
    "href": "logics.html#talk",
    "title": "Logics",
    "section": "Talk",
    "text": "Talk\nLet’s do examples as a class until we feel good about them."
  },
  {
    "objectID": "logics.html#enumeration-1",
    "href": "logics.html#enumeration-1",
    "title": "Logics",
    "section": "Enumeration",
    "text": "Enumeration\nLast class, we enumerated the possible traces.\nproperty[0] = [\"GREEN_\"]\nproperty[1] = [\"YELLOW\"]\nproperty[2] = [\"RED___\"]\nproperty[3] = [\"GREEN_\", \"YELLOW\"]\nThis is bad. Why?"
  },
  {
    "objectID": "logics.html#specification",
    "href": "logics.html#specification",
    "title": "Logics",
    "section": "Specification",
    "text": "Specification\nRather than enumerate, let us specify.\nThe traffic light property is\nthe set of all sequences over precisely the states {\"GREEN_\", \"YELLOW\", \"RED___\"} \nsuch that \nthe only state succeeding \"GREEN_\" is \"YELLOW\" and\nthe only state succeeding \"YELLOW\" is \"RED___\" and\nthe onle state succeeding \"RED___\" is \"GREEN_\".\nThis is still bad. Why?"
  },
  {
    "objectID": "logics.html#model-checking",
    "href": "logics.html#model-checking",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a tuple that models a state machine.\nA state machine is a mathematical model of computation. It is an abstract machine that can be in exactly one of a finite number of states at any given time."
  },
  {
    "objectID": "logics.html#model-checking-1",
    "href": "logics.html#model-checking-1",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a tuple {S, …} that models a state machine.\n\nS is a finite set of states\n\nKripke structures only work for finite state machines\nFor the sake of this class, we can imagine infinite states if needed."
  },
  {
    "objectID": "logics.html#model-checking-2",
    "href": "logics.html#model-checking-2",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a tuple {S, …} that models a state machine.\n\nFor a traffic light, S is:\n{\"GREEN_\", \"YELLOW\", \"RED___\"}\nFor a commerical airliner, S is all combinations of people on the airliner and locations on the airliner.\n\nOne element of S over 2 crew and 1 passenger could be:\n{[\"CRW1\", \"DECK\"], [\"CRW2\", \"SERV\"], [\"PSG1\",\"SEAT\"]}"
  },
  {
    "objectID": "logics.html#model-checking-3",
    "href": "logics.html#model-checking-3",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a tuple {S, I, …} that models a state machine.\n\nI is a subset of S, we denote this I ⊂ S\n\nAny state in I must be a state in S\nThere may be states in S that are not in I\nThese are the possible initial states of the state machine."
  },
  {
    "objectID": "logics.html#model-checking-4",
    "href": "logics.html#model-checking-4",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a tuple {S, I, …} that models a state machine.\n\nFor a traffic light, I = S {\"GREEN_\", \"YELLOW\", \"RED___\"}\nFor a Bitcoin, the initial state is Satoshi Nakamoto’s public key."
  },
  {
    "objectID": "logics.html#model-checking-5",
    "href": "logics.html#model-checking-5",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a tuple {S, I, …} that models a state machine.\n\nS is a finite set of states\nI ⊂ S is the set of initial states."
  },
  {
    "objectID": "logics.html#model-checking-6",
    "href": "logics.html#model-checking-6",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a tuple {S, I, R, …} that models a state machine.\n\nR is a transition relation over S, we denote this R ⊂ S × S\n\nThis just means R says whether one state may be transitioned to from another.\nR expresses them enumerating sequences of length two, called ordered pairs\n\nA starting state\nAn ending state\nThese states are the states in S"
  },
  {
    "objectID": "logics.html#model-checking-7",
    "href": "logics.html#model-checking-7",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a tuple {S, I, R, …} that models a state machine.\n\nR is a transition relation over S, we denote this R ⊂ S × S\n\nThis just means R says whether one state may be transitioned to from another.\nR expresses them enumerating sequences of length two, called ordered pairs\n\nBONUS/CHALLENGE: R is left-total.\nA binary relation R ⊂ S × S is left-total if for all elements s of S there exists some ordered pair in R such that the first element of the ordered pair is s.\nR ⊂ S × S is left-total ≔ ∀ s1 ∈ S, ∃ s2 ∈ S such that (s1,s2) ∈ R"
  },
  {
    "objectID": "logics.html#model-checking-8",
    "href": "logics.html#model-checking-8",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a tuple {S, I, R, …} that models a state machine.\n\nFor a traffic light, R is:\n{(\"GREEN_\", \"YELLOW\"),\n (\"YELLOW\", \"RED___\"),\n (\"RED___\", \"GREEN_\")}\nFor a commerical airliner, R must describe how crew may not move to the service station when passengers are present and vice versa, or some other arrangement.\n\nNote: Relations may be used to to express the arrangement of people on an airliner as well as express transition relations."
  },
  {
    "objectID": "logics.html#model-checking-9",
    "href": "logics.html#model-checking-9",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a tuple {S, I, R, …} that models a state machine.\n\nS is a finite set of states\nI ⊂ S is the set of initial states.\nR ⊂ S × S is a left-total transition relation."
  },
  {
    "objectID": "logics.html#model-checking-10",
    "href": "logics.html#model-checking-10",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a 4-tuple {S, I, R, L} that models a state machine.\n\nL is a labeling function over S, we denote this L ⊂ S → ???\n\nThis just means L provides a way of talking about the states in S\nWe talk about these states using atomic propositions\n\nPropositions are expressions in propositional, or zeroth order, logic.\nThey are simply true or false.\nAtomic propositions are simplest possible form of these logic expressions.\n\nL ⊂ S → 2_AP_"
  },
  {
    "objectID": "logics.html#model-checking-11",
    "href": "logics.html#model-checking-11",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a 4-tuple {S, I, R, L} that models transitions between over atomic propositions AP.\n\nL is a labeling function over S, we denote this L ⊂ S → 2_AP_\n\nGiven AP, L tells us whether each is true or false (2 options) for every given state."
  },
  {
    "objectID": "logics.html#model-checking-12",
    "href": "logics.html#model-checking-12",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a 4-tuple {S, I, R, L} that models transitions and AP.\n\nFor a traffic light, AP could be the following, expressed as a proposition set:\n{s == \"GREEN_\", \n s == \"YELLOW\", \n s == \"RED___\", \n s ∈ {\"GREEN_\", \"YELLOW\"},\n s ∈ {\"YELLOW\", \"RED___\"},\n s ∈ {\"RED___\", \"GREEN_\"}}\nPropositions are often named using single lower cases letters in italics beginning with p"
  },
  {
    "objectID": "logics.html#model-checking-13",
    "href": "logics.html#model-checking-13",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a 4-tuple {S, I, R, L} that models transitions and AP.\n\nFor a traffic light, AP could be the following:\nAP = \n[p : state == \"GREEN_\", \n q : state == \"YELLOW\", \n r : state == \"RED___\", \n s : state ∈ {\"GREEN_\", \"YELLOW\"},\n t : state ∈ {\"YELLOW\", \"RED___\"},\n u : state ∈ {\"RED___\", \"GREEN_\"}]\nThen the L would be given as :\n{(\"GREEN_\", {p, s, u}), \n (\"YELLOW\", {q, s, t}),\n (\"RED___\", {r, t, u})}"
  },
  {
    "objectID": "logics.html#model-checking-14",
    "href": "logics.html#model-checking-14",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a 4-tuple {S, I, R, L} that models transitions and AP.\n\nFor a commercial airliner, we may want to use AP more intentionally:\n\nLet p denote there are passengers at the service station.\nLet q denote there are crew at the service station.\nLet r denote there all passengers are seated.\nLet s denote at least two crew are in the flight deck."
  },
  {
    "objectID": "logics.html#model-checking-15",
    "href": "logics.html#model-checking-15",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a 4-tuple {S, I, R, L} that models transitions and AP.\n\nS is a finite set of states\nI ⊂ S is the set of initial states.\nR ⊂ S × S is a left-total transition relation.\nL ⊂ S → 2_AP_ is the labelling relation."
  },
  {
    "objectID": "logics.html#model-checking-16",
    "href": "logics.html#model-checking-16",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a 4-tuple {S, I, R, L} that models transitions and AP.\n\nS is a finite set of states and I ⊂ S is the set of initial states.\n{“GREEN_”, “YELLOW”, “RED___“}\nR ⊂ S × S is a left-total transition relation.\n{(“GREEN_”, “YELLOW”), (“YELLOW”, “RED_”), (”RED_”, “GREEN_”)}\nL ⊂ S → 2_AP_ is the labelling relation.\n{(“GREEN_”, {p, s, u}), (“YELLOW”, {q, s, t}), (“RED___“, {r, t, u})}\n\nA Kripke Structure modelling a traffic light is the 4-tuple…\n({\"GREEN_\", \"YELLOW\", \"RED___\"}, \n {\"GREEN_\", \"YELLOW\", \"RED___\"}, \n {(\"GREEN_\", \"YELLOW\"), \n  (\"YELLOW\", \"RED___\"), \n  (\"RED___\", \"GREEN_\")}, \n {(\"GREEN_\", {p, s, u}),\n  (\"YELLOW\", {q, s, t}), \n  (\"RED___\", {r, t, u})})\n…over AP…\n[p : state == \"GREEN_\",  \n q : state == \"YELLOW\",  \n r : state == \"RED___\",  \n s : state ∈ {\"GREEN_\", \"YELLOW\"},\n t : state ∈ {\"YELLOW\", \"RED___\"},\n u : state ∈ {\"RED___\", \"GREEN_\"}]"
  },
  {
    "objectID": "logics.html#model-checking-17",
    "href": "logics.html#model-checking-17",
    "title": "Logics",
    "section": "Model Checking",
    "text": "Model Checking\nA Kripke Structure is a 4-tuple {S, I, R, L} that models transitions and AP.\n\nThis is still bad. Why?"
  },
  {
    "objectID": "logics.html#diagrams",
    "href": "logics.html#diagrams",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nNow that I’ve rigorously defined Kripke Structures, I am willing to tell you they are just diagrams.\n\nClarke, Edmund & Grumberg, Orna & Jha, Somesh & Lu, Yuan & Veith, Helmut. (2003). Counterexample-guided abstraction refinement for symbolic model checking. J. ACM. 50. 752-794. 10.1145/876638.876643."
  },
  {
    "objectID": "logics.html#diagrams-1",
    "href": "logics.html#diagrams-1",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nThis differs from ours, but only slightly.\n\nThe proposition labels are the same as the state name initials.\nr is the only accepted starting state.\nStates are allowed to transition to the themselves\n\nThink of this is a distinct notion of time.\n\nI describe the only thing that changes time as a change in state.\nIf we imagine that there is a transition every second, the green-to-green is needed."
  },
  {
    "objectID": "logics.html#diagrams-2",
    "href": "logics.html#diagrams-2",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nA ≔ {Q, Σ, δ, q0, F }\n\nQ = {0, 1, 2 } in cyan\nΣ = {R, G, Y } in magenta\nδ = {R0G1,G1Y2,Y2R0} in blue\nq0 or 0 in orange\nF = {q0} or {0} in black\n\nTraffic Light"
  },
  {
    "objectID": "logics.html#diagrams-3",
    "href": "logics.html#diagrams-3",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nA ≔ {Q, Σ, δ, q0, F }\n\nQ : the states of A.\nΣ : the alphabet of A.\nδ : Q × Σ → Q : transition function.\nq0 ∈ Q : the initial state of A\nF ⊆ Q : the acceptance condition\n\nTraffic Light"
  },
  {
    "objectID": "logics.html#diagrams-4",
    "href": "logics.html#diagrams-4",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nA ≔ {Q, Σ, δ, q0, F }\n\nQ = { q0, q1, q2} in cyan\nΣ : the alphabet of A.\nδ : Q × Σ → Q : transition function.\nq0 ∈ Q : the initial state of A\nF ⊆ Q : the acceptance condition\n\nTraffic Light"
  },
  {
    "objectID": "logics.html#diagrams-5",
    "href": "logics.html#diagrams-5",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nA ≔ {Q, Σ, δ, q0, F }\n\nQ = { q0, q1, q2} in cyan\nΣ = {red, green, yellow} in magenta\nδ : Q × Σ → Q : transition function.\nq0 ∈ Q : the initial state of A\nF ⊆ Q : the acceptance condition\n\nTraffic Light"
  },
  {
    "objectID": "logics.html#limitations-1",
    "href": "logics.html#limitations-1",
    "title": "Logics",
    "section": "Limitations",
    "text": "Limitations\nKripke Structures are better than enumeration, but…\n\nRepresentation in text is difficult to understand\nShowing equivalence to traces can be difficult\n\n\nWe will introduce a better way to write out relations, then look at our Kripke Structures."
  },
  {
    "objectID": "logics.html#an-example",
    "href": "logics.html#an-example",
    "title": "Logics",
    "section": "An example",
    "text": "An example\nConsider the following Kripke Structure:\n\nThe following statements are true of traces accepted by this structure:\n\np and q are true initially.\nOnce q becomes false, it never becomes true again.\nOnce q becomes false, p stays true forever.\np goes from false to true when q goes from true to true false."
  },
  {
    "objectID": "logics.html#a-concretization",
    "href": "logics.html#a-concretization",
    "title": "Logics",
    "section": "A concretization",
    "text": "A concretization\nConsider the following representation:\n\nTake p to be “password checking is blocked/secured”\nTake q to be “system access is blocked/secured”\n\nA passwording service must disclose if an entered password is correct.\n\np and q are true initially.\n\nNo checking, no access\n\nOnce q becomes false, it never becomes true again.\n\nOnce logged in, we can no longer guess passwords.\n\nOnce q becomes false, p stays true forever.\n\nOnce logged in, access is not revoked.\n\n\nInfinite guesses (bad), but persistent users may not look up passwords (good)."
  },
  {
    "objectID": "logics.html#goals",
    "href": "logics.html#goals",
    "title": "Logics",
    "section": "Goals",
    "text": "Goals\nWe have:\n\nA way to describe the current state of the system (AP)\n\nWe need:\n\nA way to describe relations between atomic propositions over time.\n\nConsider:\n\np and q are true initially.\nOnce q becomes false, it never becomes true again.\n\nq until not q\n\nOnce q becomes false, p stays true forever.\n\nq until not q\n\np goes from false to true when q goes from true to true false."
  },
  {
    "objectID": "logics.html#next-and-until",
    "href": "logics.html#next-and-until",
    "title": "Logics",
    "section": "Next and Until",
    "text": "Next and Until\nIt often suffices to define two temporal operators:\n\nX: “next”\nU: “until”\n\nAlong with existing logical operators:\n\n¬: “not”\n∨: “or”\n\nWe need apply this over atomic propositions in AP to describe the security requirements of a system.\n&gt;"
  },
  {
    "objectID": "logics.html#composition",
    "href": "logics.html#composition",
    "title": "Logics",
    "section": "Composition",
    "text": "Composition\nWith logical negation (not) and disjunction (or) we can generate other logical connectives.\n\n\n\n\n\n\n\n\n\n\n\n\\(p\\)\n\\(q\\)\n\\(\\neg p\\)\n\\(p \\lor q\\)\n\\(\\neg p \\lor \\neg q\\)\n\\(\\neg p \\lor \\neg q \\equiv p \\land q\\)\n\n\n\n\nTrue\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\nTrue\nFalse\nFalse\nTrue\nTrue\nFalse\n\n\nFalse\nTrue\nTrue\nTrue\nTrue\nFalse\n\n\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\n\n\n\nFor example, “and” or conjunction over two atomic propositions is equivalent to the negation or “not” of the “or” or disjunction over the negation or “not” of the two atomic propositions."
  },
  {
    "objectID": "logics.html#next-and-until-1",
    "href": "logics.html#next-and-until-1",
    "title": "Logics",
    "section": "Next and Until",
    "text": "Next and Until\nX a\n\n* → a → * → …\n\na U b\n\na∧¬_b_ → b → * → …\na∧¬_b_ → a∧¬_b_ → b → * → …"
  },
  {
    "objectID": "logics.html#linear-temporal-logic-composition",
    "href": "logics.html#linear-temporal-logic-composition",
    "title": "Logics",
    "section": "Linear Temporal Logic Composition",
    "text": "Linear Temporal Logic Composition\nName\nUsage\nMeaning\nEquivalencies\nneXt\nX p\np holds in the next time\nX p\nFuture\nF p\np holds in some future time\nTrueU_p_\nGlobal(ly)\nG p\np holds in all future times\n¬(TrueU¬_p_)\nUntil\np U q\np holds unless q, and q must hold at some point in the future\np U q\nRelease\np R q\nq holds up to and including when p holds\n¬(¬_p_ U ¬_q_)\nWeak until\np W q\np holds up to when q holds\n(p U q) ∨ G p\nMighty release\np M q\nq holds up to and including when p holds, and p must hold at some point in the future\nq U (p ∨_q_)"
  },
  {
    "objectID": "logics.html#linear-temporal-logic-exercise",
    "href": "logics.html#linear-temporal-logic-exercise",
    "title": "Logics",
    "section": "Linear Temporal Logic Exercise",
    "text": "Linear Temporal Logic Exercise\nPopulate this table in groups of n. Likely 15-20 minutes.\nOperator\nTrace 1\nTrace 2\nX p\n* → p → * → …\nF p\n?\n?\nG p\n?\np U q\np∧¬_q_ → p∧¬_q_ → q → * → …\np R q\n?\n?\np W q\n?\n?\np M q\n?"
  },
  {
    "objectID": "logics.html#linear-temporal-logic-traces",
    "href": "logics.html#linear-temporal-logic-traces",
    "title": "Logics",
    "section": "Linear Temporal Logic Traces",
    "text": "Linear Temporal Logic Traces\nOperator\nTrace 1\nTrace 2\nX p\n* → p → * → …\nF p\n* → p → * → …\n* → * → p → * → …\nG p\np → p → p → …\np U q\np∧¬_q_ → p∧¬_q_ → q → * → …\np R q\nq → q → p ∧ q → * → …\nq → q → q → …\np W q\np → p → q → * → …\np → p → p → …\np M q\nq → q → p ∧ q → * → …"
  },
  {
    "objectID": "logics.html#shorthand",
    "href": "logics.html#shorthand",
    "title": "Logics",
    "section": "Shorthand",
    "text": "Shorthand\nLet’s introduce a wrinkle.\nThe LTL operator neXt denotes that some atomic proposition should hold true in the next time point. We can generalize this to some fixed future timepoint but using more than one next. For example, the expression:\nXXXX_p_∧¬_q_\nholds over the following trace:\n{p,q}, {q  }, {p,q}, {q  }, {p  }, {p  }, {p  }, ...\nWe extend neXt to reference a fixed future timepoint using a superscript:\nX4_p_∧¬_q_\nI term this “multinext”."
  },
  {
    "objectID": "logics.html#review-question-3",
    "href": "logics.html#review-question-3",
    "title": "Logics",
    "section": "Review Question 3",
    "text": "Review Question 3\nConsider the following trace:\n{p,q}, {q  }, {p,q}, {q  }, {p  }, {p  }, {p  }, ...\nWhich of the following LTL expressions would describe this trace?\n\n¬X1_q_\n¬X2_q_\n¬X3_q_\n¬X4_q_"
  },
  {
    "objectID": "logics.html#review-question-4",
    "href": "logics.html#review-question-4",
    "title": "Logics",
    "section": "Review Question 4",
    "text": "Review Question 4\nConsider the following trace:\n{p,q}, {q  }, {p,q}, {q  }, {p  }, {p  }, {p  }, ...\nWhich of the following LTL expressions would describe this trace?\n\nq U G_p_\nq R G_p_\nq W G_p_\nq M G_p_\n\nCheck your notes or the slides!"
  },
  {
    "objectID": "logics.html#review-question-5",
    "href": "logics.html#review-question-5",
    "title": "Logics",
    "section": "Review Question 5",
    "text": "Review Question 5\nConsider the following Kripke Structure:\n\nWhich of the following LTL expressions would describe this structure?\n\nq U G_p_\nq R G_p_\nq W G_p_\nq M G_p_"
  },
  {
    "objectID": "logics.html#review-question-6",
    "href": "logics.html#review-question-6",
    "title": "Logics",
    "section": "Review Question 6",
    "text": "Review Question 6\nConsider the following Kripke Structure:\n\nWhich of the following LTL expressions would would describe this structure?\n\nX1_q_\nX2_q_\nX3_q_\nX4_q_"
  },
  {
    "objectID": "logics.html#review-question-7",
    "href": "logics.html#review-question-7",
    "title": "Logics",
    "section": "Review Question 7",
    "text": "Review Question 7\nConsider the following Kripke Structure:\n\n10-15 min: In small groups, define an equivalent LTL expression to this structure."
  },
  {
    "objectID": "logics.html#properties-3",
    "href": "logics.html#properties-3",
    "title": "Logics",
    "section": "Properties",
    "text": "Properties\n“I want to be able to access my savings but no one else.”\n\nSafety properties are about bad things not happening:\n\nG¬_bad_\nThese are undefined transitions in Büchi automata\n“No one else may access my savings”\n\nLiveness properties are about good things happening eventually:\n\nF_good_\nThese are accepting states in Büchi automata\n“I want to be able to access my savings”"
  },
  {
    "objectID": "logics.html#büchi-automata",
    "href": "logics.html#büchi-automata",
    "title": "Logics",
    "section": "Büchi Automata",
    "text": "Büchi Automata\n\nLogicians use Büchi Automata to define safety and liveness more formally.\nBüchi Automata are more expressive than Kripke Structures\nDeterministic Büchi Automata are equivalent to LTL\n\nWhat would it mean for a Kripke Structure to be deterministic?\nWhat would it mean for LTL not to be deterministic?"
  },
  {
    "objectID": "logics.html#büchi-automata-1",
    "href": "logics.html#büchi-automata-1",
    "title": "Logics",
    "section": "Büchi Automata",
    "text": "Büchi Automata\nA deterministic Büchi Automaton either accepts or rejects infinite inputs (traces)."
  },
  {
    "objectID": "logics.html#büchi-automata-2",
    "href": "logics.html#büchi-automata-2",
    "title": "Logics",
    "section": "Büchi Automata",
    "text": "Büchi Automata\nA deterministic Büchi Automaton A is a tuple {Q, …} that accepts traces.\n\nQ is a finite set.\n\nWe term the elements of Q to be the states of A\nThe states of A may be distinct from the unique states found within a trace.\nTraces of infinite length can be considered.\n\nQ is circles in our diagram."
  },
  {
    "objectID": "logics.html#büchi-automata-3",
    "href": "logics.html#büchi-automata-3",
    "title": "Logics",
    "section": "Büchi Automata",
    "text": "Büchi Automata\nA deterministic Büchi Automaton A is a tuple {Q, Σ,…} that accepts traces.\n\nΣ (sigma) is a finite set.\n\nWe term Σ the alphabet of A\nΣ is the unique states found within a trace.\nWe use Σ ω (upper case sigma raised to lower case omega) to denote infinite traces\nThese are the possible states of a trace; I term them letters."
  },
  {
    "objectID": "logics.html#büchi-automata-4",
    "href": "logics.html#büchi-automata-4",
    "title": "Logics",
    "section": "Büchi Automata",
    "text": "Büchi Automata\nA deterministic Büchi Automaton A is a tuple {Q, Σ,…} that accepts traces Σ ω.\n\nQ is a finite set: the states of A.\nΣ is a finite set: the alphabet of A.\n\nWe studied example traces earlier, for these:\nΣ = { {'p', 'q'}, {'p'}, {'q'} }\nWe cannot yet generate something that looks like Q, but it is similar to\nQ ≈ {'s_1', 's_2', 's_3'}"
  },
  {
    "objectID": "logics.html#büchi-automata-5",
    "href": "logics.html#büchi-automata-5",
    "title": "Logics",
    "section": "Büchi Automata",
    "text": "Büchi Automata\nA deterministic Büchi Automaton A is a tuple {Q, Σ, δ, …} that accepts traces Σ ω.\n\nδ is a function.\n\nWe term δ (lower case delta) the transition function of A.\nδ maps combinations of states and letters to other states.\nδ : Q × Σ → Q, or\nδ ⊆ (Q × Σ ) × Q\n\nδ is like Kripke R except that it has to check both Q (model) and Σ (trace).\nδ takes a circle in the diagram and an observation and tells you the new circle in the diagram.\nΣ labels arrows between circles in the diagram."
  },
  {
    "objectID": "logics.html#büchi-automata-6",
    "href": "logics.html#büchi-automata-6",
    "title": "Logics",
    "section": "Büchi Automata",
    "text": "Büchi Automata\nA deterministic Büchi Automaton A is a tuple {Q, Σ, δ,…} that accepts traces.\n\nQ is a finite set: the states of A.\nΣ is a finite set: the alphabet of A.\nδ : Q × Σ → Q is a function: the transition function of A."
  },
  {
    "objectID": "logics.html#büchi-automata-7",
    "href": "logics.html#büchi-automata-7",
    "title": "Logics",
    "section": "Büchi Automata",
    "text": "Büchi Automata\nA deterministic Büchi Automaton A is a tuple {Q, Σ, δ, q0,…} that accepts traces Σ ω.\n\nq0 ∈ Q (say: q-naut is an element of the seq Q)\n\nWe term q0 the initial state of A.\nq0 is like I but Büchi Automata have only a single starting state.\n\nThis is because Büchi Automata have no atomic proposition labels on states, only on transitions."
  },
  {
    "objectID": "logics.html#büchi-automata-8",
    "href": "logics.html#büchi-automata-8",
    "title": "Logics",
    "section": "Büchi Automata",
    "text": "Büchi Automata\nA deterministic Büchi Automaton A is a tuple {Q, Σ, δ, q0,…} that accepts traces Σ ω.\n\nQ is a finite set: the states of A.\nΣ is a finite set: the alphabet of A.\nδ : Q × Σ → Q is a function: the transition function of A.\nq0 ∈ Q: is a state: the initial state of A"
  },
  {
    "objectID": "logics.html#büchi-automata-9",
    "href": "logics.html#büchi-automata-9",
    "title": "Logics",
    "section": "Büchi Automata",
    "text": "Büchi Automata\nA deterministic Büchi Automaton A is a tuple {Q, Σ, δ, q0, F } that accepts traces Σ ω.\n\nF ⊆ Q is a non-strict subset.\n\nWe term F the acceptance condition.\nThis one looks a bit odd on slides, it looks clearer standard formatting.\n\nF is bolded\nQ is italicized\nF ⊆ Q|\n\nAn infinite trace must visit states in F an infinite number of times to be accepted.\nWe can think of finite traces as infinitely repeated their last state, which must be in F."
  },
  {
    "objectID": "logics.html#büchi-automata-10",
    "href": "logics.html#büchi-automata-10",
    "title": "Logics",
    "section": "Büchi Automata",
    "text": "Büchi Automata\nA deterministic Büchi Automaton A is a tuple {Q, Σ, δ, q0, F } that accepts traces Σ ω.\n\nQ is a finite set: the states of A.\nΣ is a finite set: the alphabet of A.\nδ : Q × Σ → Q is a function: the transition function of A.\nq0 ∈ Q: is a state: the initial state of A\nF ⊆ Q is a non-strict subset: the acceptance condition"
  },
  {
    "objectID": "logics.html#diagrams-6",
    "href": "logics.html#diagrams-6",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nA ≔ {Q, Σ, δ, q0, F }\n\nQ = { q0, q1, q2} in cyan\nΣ = {red, green, yellow} in magenta\nδ : Q × Σ → Q in blue\n\nTake ((q0, red), q0) as 0R0\nδ ={0R0,0G1,1G1,1Y2,2Y2,2R0}\n\nq0 ∈ Q : the initial state of A\nF ⊆ Q : the acceptance condition\n\nTraffic Light"
  },
  {
    "objectID": "logics.html#diagrams-7",
    "href": "logics.html#diagrams-7",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nA ≔ {Q, Σ, δ, q0, F }\n\nQ = {0, 1, 2 } in cyan\nΣ = {R, G, Y } in magenta\nδ = {R0G1,G1Y2,Y2R0} in blue\nq0 or 0 : in orange\nF ⊆ Q : the acceptance condition\n\nTraffic Light"
  },
  {
    "objectID": "logics.html#diagrams-8",
    "href": "logics.html#diagrams-8",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nA ≔ {Q, Σ, δ, q0, F }\n\nQ = {0, 1, 2 } in cyan\nΣ = {R, G, Y } in magenta\nδ = {R0G1,G1Y2,Y2R0} in blue\nq0 or 0 in orange\nF = {q0} or {0} in black\n\nTraffic Light"
  },
  {
    "objectID": "logics.html#diagrams-9",
    "href": "logics.html#diagrams-9",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nA ≔ {Q, Σ, δ, q0, F }\n\nQ = {0, 1, 2 } in cyan\nΣ = {R, G, Y } in magenta\nδ = {R0G1,G1Y2,Y2R0} in blue\nq0 or 0 in orange\nF = {q0} or {0} in black\n\nTraffic Light"
  },
  {
    "objectID": "logics.html#diagrams-10",
    "href": "logics.html#diagrams-10",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nA ≔ {Q, Σ, δ, q0, F }\n\nQ = {0, 1, 2 } in cyan\nΣ = {R, G, Y } in magenta\nδ = {R0G1,G1Y2,Y2R0} in blue\nq0 or 0 : in orange\nF ⊆ Q : the acceptance condition\n\nTraffic Light"
  },
  {
    "objectID": "logics.html#diagrams-11",
    "href": "logics.html#diagrams-11",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nA ≔ {Q, Σ, δ, q0, F }\n\nQ = {0, 1, 2 } in cyan\nΣ = {R, G, Y } in magenta\nδ = {R0G1,G1Y2,Y2R0} in blue\nq0 or 0 in orange\nF = {q0} or {0} in black\n\nTraffic Light"
  },
  {
    "objectID": "logics.html#diagrams-12",
    "href": "logics.html#diagrams-12",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nA ≔ {Q, Σ, δ, q0, F }\n\nQ = {0, 1, 2 } in cyan\nΣ = {R, G, Y } in magenta\nδ = {R0G1,G1Y2,Y2R0} in blue\nq0 or 0 in orange\nF = {q0} or {0} in black\n\nTraffic Light"
  },
  {
    "objectID": "logics.html#safety-and-liveness",
    "href": "logics.html#safety-and-liveness",
    "title": "Logics",
    "section": "Safety and Liveness",
    "text": "Safety and Liveness\nSafety\n\nLiveness"
  },
  {
    "objectID": "logics.html#safety",
    "href": "logics.html#safety",
    "title": "Logics",
    "section": "Safety",
    "text": "Safety\n\nSome security properties are about bad things not happening:\n\nG¬_bad_\nTerm this “safety”\n\nIf a Büchi Automata is a safety property…\n\nIf the bad things happens, the system is unrecoverable.\nTherefore, any failures result from “falling off” the diagram.\nTherefore, all states are accepting states (no failures based on ending).\n\n\nSafety"
  },
  {
    "objectID": "logics.html#safety-1",
    "href": "logics.html#safety-1",
    "title": "Logics",
    "section": "Safety",
    "text": "Safety\nThe closure of Büchi Automaton given by A ≔ {Q, Σ, δ, q0, F } is cl(A) ≔ {Q, Σ, δ, q0, Q }.\nThat is, cl(A) is equivalent to A if the set of accepting states F is expanded to include all of the states of A\n&lt;\nA safety property is a property given by a Büchi Automaton A ≔ {Q, Σ, δ, q0, F } such that all traces accepted by A are also accepted by its cl(A) ≔ {Q, Σ, δ, q0, Q }.\nSafety"
  },
  {
    "objectID": "logics.html#safety-2",
    "href": "logics.html#safety-2",
    "title": "Logics",
    "section": "Safety",
    "text": "Safety\nThe closure of Büchi Automaton given by A ≔ {Q, Σ, δ, q0, F } is cl(A) ≔ {Q, Σ, δ, q0, Q }.\nThat is, cl(A) is equivalent to A if the set of accepting states F is expanded to include all of the states of A\n&lt;\nA safety property is a property given by a Büchi Automaton A ≔ {Q, Σ, δ, q0, F } such that all traces accepted by A are also accepted by its cl(A) ≔ {Q, Σ, δ, q0, Q }.\nSafety"
  },
  {
    "objectID": "logics.html#safety-3",
    "href": "logics.html#safety-3",
    "title": "Logics",
    "section": "Safety",
    "text": "Safety\n\nThis means, we can develop safety properties from arrows (edges), or from δ\n\nWe see that yellow is always preceded by green or yellow.\nYellow is never preceded by red.\nSo we can say that the bad thing is red with yellow next\nG¬(red∧X_yellow_ )\nG¬(green∧X_red_ )\nG¬(yellow∧X_green_ )\n\n\nSafety"
  },
  {
    "objectID": "logics.html#liveness",
    "href": "logics.html#liveness",
    "title": "Logics",
    "section": "Liveness",
    "text": "Liveness\n\nSome security properties are about good things happening someday:\n\nF_good_\nTerm this “liveness”\n\nIf a Büchi Automata is a liveness property…\n\nNo matter what happens, the system is recoverable.\nTherefore, any failures result from not reaching accepting states.\nTherefore, all states should have outgoing edges covering all letters of the trace alphabet.\n\n\nLiveness"
  },
  {
    "objectID": "logics.html#liveness-1",
    "href": "logics.html#liveness-1",
    "title": "Logics",
    "section": "Liveness",
    "text": "Liveness\nThe closure of Büchi Automaton given by A ≔ {Q, Σ, δ, q0, F } is cl(A) ≔ {Q, Σ, δ, q0, Q }.\nThat is, cl(A) is equivalent to A if the set of accepting states F is expanded to include all of the states of A\n&lt;\nA liveness property is a property given by a Büchi Automaton A ≔ {Q, Σ, δ, q0, F } such that cl(A) ≔ {Q, Σ, δ, q0, Q } accepts all possible traces in Σ ω.\nLiveness"
  },
  {
    "objectID": "logics.html#liveness-2",
    "href": "logics.html#liveness-2",
    "title": "Logics",
    "section": "Liveness",
    "text": "Liveness\nThe closure of Büchi Automaton given by A ≔ {Q, Σ, δ, q0, F } is cl(A) ≔ {Q, Σ, δ, q0, Q }.\nThat is, cl(A) is equivalent to A if the set of accepting states F is expanded to include all of the states of A\n&lt;\nA liveness property is a property given by a Büchi Automaton A ≔ {Q, Σ, δ, q0, F } such that cl(A) ≔ {Q, Σ, δ, q0, Q } accepts all possible traces in Σ ω.\nLiveness"
  },
  {
    "objectID": "logics.html#liveness-3",
    "href": "logics.html#liveness-3",
    "title": "Logics",
    "section": "Liveness",
    "text": "Liveness\n\nThis means, we can study liveness properties by adding a self-loop with negation of all other outgoing edges to each automaton state.\n\nWe see that q1 has an outgoing edge labelled “yellow”.\nWe add an edge from q1 to itself that is labelled “not yellow”.\n\nAs a convenience, we say the “good thing” is the light turning green\n\nWe mark q1 as the accepting state, since it is reached when the light turns green.\n\n\nLiveness"
  },
  {
    "objectID": "logics.html#properties-4",
    "href": "logics.html#properties-4",
    "title": "Logics",
    "section": "Properties",
    "text": "Properties\n“I want to be able to access my savings but no one else.”\n\nSafety properties are about bad things not happening:\n\nG¬_bad_\nThese are undefined transitions in Büchi automata\n“No one else may access my savings”\n\nLiveness properties are about good things happening eventually:\n\nF_good_\nThese are accepting states in Büchi automata\n“I want to be able to access my savings”"
  },
  {
    "objectID": "logics.html#diagrams-13",
    "href": "logics.html#diagrams-13",
    "title": "Logics",
    "section": "Diagrams",
    "text": "Diagrams\nA ≔ {Q, Σ, δ, q0, F }\n\nQ = {0, 1, 2 } in cyan\nΣ = {R, G, Y } in magenta\nδ = {R0G1,G1Y2,Y2R0} in blue\nq0 or 0 in orange\nF = {q0} or {0} in black\n\nTraffic Light"
  },
  {
    "objectID": "logics.html#safe-and-live",
    "href": "logics.html#safe-and-live",
    "title": "Logics",
    "section": "Safe() and Live()",
    "text": "Safe() and Live()\nWe now define Safe():\nSafe(m) excludes the “bad thing” for a Buchi automaton, which is attempting an undefined transition, because if such a “bad thing” happens at any point in the trace, the Buchi automaton will not accept that trace.\n… and Live():\nLive(m) requires the “good thing” for a Buchi automaton, which is entering an accepting state infinitely often, because we require this “good thing” to happen for trace to be accepted."
  },
  {
    "objectID": "logics.html#intersection",
    "href": "logics.html#intersection",
    "title": "Logics",
    "section": "Intersection",
    "text": "Intersection\nWe recall set theoretic intersection…\nIn set theory, the intersection of two sets A and B, denoted by A ∩_B_ is the set containing all elements of A that also belong to B\n… and we recall what properties are:\nA trace property is a set of traces.\nAnd now we make our claim:\n“Given a Buchi automaton m, it is not difficult to construct Buchi automata Safe(m) and Live(m) such that Safe(m) specifies a safety property, Live(m) specifies a liveness property, and the prop- erty specified by m is the intersection of those specified by Safe(m) and Live(m).”"
  },
  {
    "objectID": "logics.html#example-1",
    "href": "logics.html#example-1",
    "title": "Logics",
    "section": "Example",
    "text": "Example\nConsider the following Büchi automata over the alphabet of lower case letters:\n\nSafety means G_a_ ∨ b\nSafe(m) = {\"a\", \"b\", \"aa\", \"ab\", \"ba\", \"bb\", \"aaa\", \"aab\", ... }\nLiveness means GF_a_\nLive(m) = {\"a\", \"aa\", \"ba\", \"ca\", \"da\", \"ea\", \"fa\", \"ga\", ... }\nThe intersection represents elements in both Safe(m) and Live(m)…"
  },
  {
    "objectID": "logics.html#example-2",
    "href": "logics.html#example-2",
    "title": "Logics",
    "section": "Example",
    "text": "Example\nSafety means G_a_ ∨ b\nSafe(m) = {\"a\", \"b\", \"aa\", \"ab\", \"ba\", \"bb\", \"aaa\", \"aab\", ... }\nLiveness means GF_a_\nLive(m) = {\"a\", \"aa\", \"ba\", \"ca\", \"da\", \"ea\", \"fa\", \"ga\", ... }\nThe intersection represents elements in both Safe(m) and Live(m)…\nm = {\"a\", \"b\", \"aa\", \"ba\", \"aaa\", \"aba\", \"baa\", \"bba\", ... }\nTo continue to advance our understanding of the distinction, we explore how to generate Safe(m) and Live(m)."
  },
  {
    "objectID": "logics.html#safe",
    "href": "logics.html#safe",
    "title": "Logics",
    "section": "Safe()",
    "text": "Safe()\nWe recall the definition of safety.\nSafe(m) excludes the “bad thing” for a Buchi automaton, which is attempting an undefined transition, because if such a “bad thing” happens at any point in the trace, the Buchi automaton will not accept that trace.\nWe recall the definition of closure.\nThe closure of Büchi Automaton given by A ≔ {Q, Σ, δ, q0, F } is cl(A) ≔ {Q, Σ, δ, q0, Q }.\nSo_cl(A)_ is equivalent to A if the set of accepting states F is expanded to include all of the states of A.\nA core “nicety” of Büchi Automata is that the safety property is the closure."
  },
  {
    "objectID": "logics.html#safe-1",
    "href": "logics.html#safe-1",
    "title": "Logics",
    "section": "Safe()",
    "text": "Safe()\nA core “nicety” of Büchi Automata is that the safety property is the closure.\nSafe(m) = cl(m)\nThat is, for m ≔ {Q, Σ, δ, q0, F } is cl(m) ≔ {Q, Σ, δ, q0, Q }\nThe closure simply allows any trace without an undefined transition (or “bad thing”) to be accepted."
  },
  {
    "objectID": "logics.html#live",
    "href": "logics.html#live",
    "title": "Logics",
    "section": "Live()",
    "text": "Live()\nWe recall the definition of liveness.\nLive(m) requires the “good thing” for a Buchi automaton, which is entering an accepting state infinitely often, because we require this “good thing” to happen for trace to be accepted.\nThink back to our example (emphasis added):\n“Consider the following Büchi automata over the alphabet of lower case letters”\n\nWhile safety is mostly about F, the accepting states or the double circles, liveness is mostly about Σ = {a, b, ?}, the alphabet or the possible states of the trace (NOT the states of the automata) that form the labels on arrows."
  },
  {
    "objectID": "logics.html#live-1",
    "href": "logics.html#live-1",
    "title": "Logics",
    "section": "Live()",
    "text": "Live()\nSo we define liveness relative to Σ. There most be no undefined transitions (that would be safety) so we require that any letter in Σ has a defined transition at any point in time."
  },
  {
    "objectID": "logics.html#live-2",
    "href": "logics.html#live-2",
    "title": "Logics",
    "section": "Live()",
    "text": "Live()\nSo we define liveness relative to Σ. There most be no undefined transitions (that would be safety) so we require that any letter in Σ has a defined transition at any point in time."
  },
  {
    "objectID": "logics.html#live-3",
    "href": "logics.html#live-3",
    "title": "Logics",
    "section": "Live()",
    "text": "Live()\nWith the traffic light, we ensured there were no undefined transitions using logical not “¬”\nBut what does this logical not really do with respect to the alphabet?\nLiveness"
  },
  {
    "objectID": "logics.html#before-live",
    "href": "logics.html#before-live",
    "title": "Logics",
    "section": "Before Live()",
    "text": "Before Live()\n\nTransition Letter\nR\nG\nY\nInitial State\nNext State\nq0\nq0\nq1\nUNDEFINED\nq1\nUNDEFINED\nq1\nq2\nq2\nq0\nUNDEFINED\nq2"
  },
  {
    "objectID": "logics.html#with-live",
    "href": "logics.html#with-live",
    "title": "Logics",
    "section": "With Live()",
    "text": "With Live()\n\nTransition Letter\nR\nG\nY\nInitial State\nNext State\nq0\nq0\nq1\nq0\nq1\nq1\nq1\nq2\nq2\nq0\nq2\nq2"
  },
  {
    "objectID": "logics.html#problem",
    "href": "logics.html#problem",
    "title": "Logics",
    "section": "Problem",
    "text": "Problem\nThis δ doesn’t define a traffic light!\n\nδlive(m) =\n{0R0,0G1,\n 1G1,1Y2,\n 2Y2,2R0,\n 0Y0,1R1,2G2}\nΣ = {R, G, Y}\n\nWe need a way to preserve existing state transitions, while eliminating undefined transitions.\nLiveness"
  },
  {
    "objectID": "logics.html#trap-state",
    "href": "logics.html#trap-state",
    "title": "Logics",
    "section": "Trap State",
    "text": "Trap State\nIntroduce new state qtrap or qt\n\nδlive(m) =\n{0R0,0G1,\n 1G1,1Y2,\n 2Y2,2R0,\n 0Yt,1Rt,2Gt}\nΣ = {R, G, Y }\nQ = {0, 1, 2, t }\n\nWe need a way to preserve existing state transitions, while eliminating undefined transitions.\nLiveness"
  },
  {
    "objectID": "logics.html#trap-state-1",
    "href": "logics.html#trap-state-1",
    "title": "Logics",
    "section": "Trap State",
    "text": "Trap State\nBut how does Σ = {R, G, Y } figure in?\nA flashing red F or out light O can still be green in the future!\nThe trap transition aren’t fixed letters - they are the the rest of the alphabet!\n\nδlive(m) =\n{0R0,0G1,\n 1G1,1Y2,\n 2Y2,2R0,\n 0*t,1*t,2*t}\nΣ = {R, G, Y, F, O, … }\n\nLiveness"
  },
  {
    "objectID": "logics.html#trap-state-2",
    "href": "logics.html#trap-state-2",
    "title": "Logics",
    "section": "Trap State",
    "text": "Trap State\nTransition\nLetter\n{R}\n{G}\n{Y}\nΣ/{R, G, Y }\nInitial State\nNext State\nq0\nq0\nq1\nqt\nqt\nq1\nqt\nq1\nq2\nqt\nq2\nq0\nqt\nq2\nqt"
  },
  {
    "objectID": "logics.html#live-4",
    "href": "logics.html#live-4",
    "title": "Logics",
    "section": "Live()",
    "text": "Live()\nLet’s look back at our original δ and Σ.\n\nδ ={0R0,0G1,1G1,1Y2,2Y2,2R0}\nΣ = {R, G, Y }\n\nTo make a liveness property, we made sure that each of {R, G, Y } had a defined place to go from each automata state. We added:\n\nδlive(m) ={0Y0,1R1,2G2}\n\nBut this is ugly, let’s look at a table\nLiveness"
  },
  {
    "objectID": "logics.html#overall",
    "href": "logics.html#overall",
    "title": "Logics",
    "section": "Overall",
    "text": "Overall\nMost Simple\n\nMost Correct"
  },
  {
    "objectID": "logics.html#why-trap-states",
    "href": "logics.html#why-trap-states",
    "title": "Logics",
    "section": "Why trap states",
    "text": "Why trap states\nIn defense of the most correct version with trap.\n\nThis trap state captures all safety failures.\nAnything going to trap is not in Safe()\nLikewise, anything in Safe() that is accepted, is “green eventually”.\n\nThis gives “safe and green or unsafe”.\nMost Correct"
  },
  {
    "objectID": "logics.html#why-trap-states-1",
    "href": "logics.html#why-trap-states-1",
    "title": "Logics",
    "section": "Why trap states",
    "text": "Why trap states\nThis gives “safe and green or unsafe”.\n\nThat is, it gives m and also something else - all unsafe traces.\nRecall: We use Σ ω (upper case sigma raised to lower case omega) to denote infinite traces.\nSo Live(m) = m ∪ Σ ω / Safe(m)\nSay “the liveness property is everything that is both safe and live, and everything that isn’t safe.”\n\nMost Correct"
  },
  {
    "objectID": "logics.html#intersection-1",
    "href": "logics.html#intersection-1",
    "title": "Logics",
    "section": "Intersection",
    "text": "Intersection\nSafe()\n\ncl(m)\nLive()\n\nm ∪ Σω / cl(m)"
  },
  {
    "objectID": "logics.html#intersection-2",
    "href": "logics.html#intersection-2",
    "title": "Logics",
    "section": "Intersection",
    "text": "Intersection\nWe take the intersection of these two sets (of traces).\n\nLive(m)∩Safe(m), that is\ncl(m)∩m∪_Σω_/ cl(m)\n\nWe consider:\n\nEverything in m is in cl(m), that is, m⊂cl(m)\nEverything in cl(m) is in Σω, that is, cl(m)⊂_Σω_\nNothing in m is in Σω/ cl(m), that is, m∩_Σω_/ cl(m)=∅\n\nLet’s take a look."
  },
  {
    "objectID": "logics.html#intersection-3",
    "href": "logics.html#intersection-3",
    "title": "Logics",
    "section": "Intersection",
    "text": "Intersection\n\nEverything in m is in cl(m), that is, m⊂cl(m)\nEverything in cl(m) is in Σω, that is, cl(m)⊂_Σω_"
  },
  {
    "objectID": "logics.html#intersection-4",
    "href": "logics.html#intersection-4",
    "title": "Logics",
    "section": "Intersection",
    "text": "Intersection\n\nEverything in m is in cl(m), that is, m⊂cl(m)\nNothing in m is in Σω/ cl(m), that is, m∩_Σω_/cl(m)=∅"
  },
  {
    "objectID": "logics.html#intersection-5",
    "href": "logics.html#intersection-5",
    "title": "Logics",
    "section": "Intersection",
    "text": "Intersection\n\nEverything in m is in cl(m)\nEverything in m is in m∪_Σω_/ cl(m)"
  },
  {
    "objectID": "logics.html#intersection-6",
    "href": "logics.html#intersection-6",
    "title": "Logics",
    "section": "Intersection",
    "text": "Intersection\nNothing in cl(m) is in m∪_Σω_/ cl(m) without being in m\n\nEverything in m is in m∪_Σω_/ cl(m) and in cl(m)"
  },
  {
    "objectID": "logics.html#intersection-7",
    "href": "logics.html#intersection-7",
    "title": "Logics",
    "section": "Intersection",
    "text": "Intersection\nSafe lights are yellow before red.\nLive lights are either (1) green someday, or (2) don’t use yellow.\nSafe, live lights are (1) green someday, and (2) use yellow."
  },
  {
    "objectID": "logics.html#work-time",
    "href": "logics.html#work-time",
    "title": "Logics",
    "section": "Work time",
    "text": "Work time\nSafe()\n\ncl(m)\nLive()\n\nm ∪ Σω / cl(m)"
  },
  {
    "objectID": "logics.html#announcements-1",
    "href": "logics.html#announcements-1",
    "title": "Logics",
    "section": "Announcements",
    "text": "Announcements\n\nWelcome to DATA-599: Cybersecurity!\nThere was no homework but is a lingering in-class exercise.\n\nNot to worry! I have something for next week.\n\nLet’s talk about how to specify properties."
  },
  {
    "objectID": "logics.html#traffic-light-1",
    "href": "logics.html#traffic-light-1",
    "title": "Logics",
    "section": "Traffic Light",
    "text": "Traffic Light\n\nThink of a traffic light.\n\nIn what states may a traffic light be?\nIn what sequence may these states occur?\nDoes a traffic light implement a security policy\nDo traffic lights change over time?"
  },
  {
    "objectID": "logics.html#example-3",
    "href": "logics.html#example-3",
    "title": "Logics",
    "section": "Example",
    "text": "Example\nSafety means G_a_ ∨ b\nSafe(m) = {\"a\", \"b\", \"aa\", \"ab\", \"ba\", \"bb\", \"aaa\", \"aab\", ... }\nLiveness means GF_a_\nLive(m) = {\"a\", \"aa\", \"ba\", \"ca\", \"da\", \"ea\", \"fa\", \"ga\", ... }\nThe intersection represents elements in both Safe(m) and Live(m)…\nm = {\"a\", \"b\", \"aa\", \"ba\", \"aaa\", \"aba\", \"baa\", \"bba\", ... }\nTo continue to advance our understanding of the distinction, we explore how to generate Safe(m) and Live(m)."
  },
  {
    "objectID": "logics.html#definition",
    "href": "logics.html#definition",
    "title": "Logics",
    "section": "Definition",
    "text": "Definition\n\n\n\nTerm this \\(M_1\\):\n\nStates \\[\n   q_n\n   \\]\nTransitions \\[\n  \\overset{\\{1\\}}{\\longrightarrow}\n  \\]\nStart state \\(q_1\\)\nAccept state \\(q_3\\)\n\n\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nq0\n\n\n\n\nq1\n\nq\n1\n\n\n\nq0-&gt;q1\n\n\n\n\n\nq1-&gt;q1\n\n\n{0}\n\n\n\nq2\n\nq\n2\n\n\n\nq1-&gt;q2\n\n\n{1}\n\n\n\nq2-&gt;q1\n\n\n{0}\n\n\n\nq3\n\n\nq\n3\n\n\n\nq2-&gt;q3\n\n\n{1}\n\n\n\nq3-&gt;q3\n\n\n{0,1}"
  },
  {
    "objectID": "logics.html#section-1",
    "href": "logics.html#section-1",
    "title": "Logics",
    "section": "’’",
    "text": "’’\n\nThe inital state is \\(q_1\\).\n\n[] # We'll use a Python list to represent the input.\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nq0\n\n\n\n\nq1\n\nq\n1\n\n\n\nq0-&gt;q1\n\n\n\n\n\nq1-&gt;q1\n\n\n{0}\n\n\n\nq2\n\nq\n2\n\n\n\nq1-&gt;q2\n\n\n{1}\n\n\n\nq2-&gt;q1\n\n\n{0}\n\n\n\nq3\n\n\nq\n3\n\n\n\nq2-&gt;q3\n\n\n{1}\n\n\n\nq3-&gt;q3\n\n\n{0,1}"
  },
  {
    "objectID": "logics.html#section-2",
    "href": "logics.html#section-2",
    "title": "Logics",
    "section": "‘0’",
    "text": "‘0’\n\nFind label containing 0 out of \\(q_1\\).\n\n[0] # We'll use a Python list to represent the input.\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nq0\n\n\n\n\nq1\n\nq\n1\n\n\n\nq0-&gt;q1\n\n\n\n\n\nq1-&gt;q1\n\n\n{0}\n\n\n\nq2\n\nq\n2\n\n\n\nq1-&gt;q2\n\n\n{1}\n\n\n\nq2-&gt;q1\n\n\n{0}\n\n\n\nq3\n\n\nq\n3\n\n\n\nq2-&gt;q3\n\n\n{1}\n\n\n\nq3-&gt;q3\n\n\n{0,1}"
  },
  {
    "objectID": "logics.html#section-3",
    "href": "logics.html#section-3",
    "title": "Logics",
    "section": "‘01’",
    "text": "‘01’\n\nFind label containing 1 out of \\(q_1\\).\n\n[0, 1] # We'll use a Python list to represent the input.\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nq0\n\n\n\n\nq1\n\nq\n1\n\n\n\nq0-&gt;q1\n\n\n\n\n\nq1-&gt;q1\n\n\n{0}\n\n\n\nq2\n\nq\n2\n\n\n\nq1-&gt;q2\n\n\n{1}\n\n\n\nq2-&gt;q1\n\n\n{0}\n\n\n\nq3\n\n\nq\n3\n\n\n\nq2-&gt;q3\n\n\n{1}\n\n\n\nq3-&gt;q3\n\n\n{0,1}"
  },
  {
    "objectID": "logics.html#section-4",
    "href": "logics.html#section-4",
    "title": "Logics",
    "section": "‘011’",
    "text": "‘011’\n\nFind label containing 1 out of \\(q_2\\).\n\n[0, 1, 1] # We'll use a Python list to represent the input.\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nq0\n\n\n\n\nq1\n\nq\n1\n\n\n\nq0-&gt;q1\n\n\n\n\n\nq1-&gt;q1\n\n\n{0}\n\n\n\nq2\n\nq\n2\n\n\n\nq1-&gt;q2\n\n\n{1}\n\n\n\nq2-&gt;q1\n\n\n{0}\n\n\n\nq3\n\n\nq\n3\n\n\n\nq2-&gt;q3\n\n\n{1}\n\n\n\nq3-&gt;q3\n\n\n{0,1}"
  },
  {
    "objectID": "logics.html#section-5",
    "href": "logics.html#section-5",
    "title": "Logics",
    "section": "‘0110’",
    "text": "‘0110’\n\nFind label containing 0 out of \\(q_3\\).\n\n[0, 1, 1, 0] # We'll use a Python list to represent the input.\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nq0\n\n\n\n\nq1\n\nq\n1\n\n\n\nq0-&gt;q1\n\n\n\n\n\nq1-&gt;q1\n\n\n{0}\n\n\n\nq2\n\nq\n2\n\n\n\nq1-&gt;q2\n\n\n{1}\n\n\n\nq2-&gt;q1\n\n\n{0}\n\n\n\nq3\n\n\nq\n3\n\n\n\nq2-&gt;q3\n\n\n{1}\n\n\n\nq3-&gt;q3\n\n\n{0,1}"
  },
  {
    "objectID": "logics.html#section-6",
    "href": "logics.html#section-6",
    "title": "Logics",
    "section": "‘01101’",
    "text": "‘01101’\n\nFind label containing 1 out of \\(q_3\\).\n\n[0, 1, 1, 0, 1] # We'll use a Python list to represent the input.\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nq0\n\n\n\n\nq1\n\nq\n1\n\n\n\nq0-&gt;q1\n\n\n\n\n\nq1-&gt;q1\n\n\n{0}\n\n\n\nq2\n\nq\n2\n\n\n\nq1-&gt;q2\n\n\n{1}\n\n\n\nq2-&gt;q1\n\n\n{0}\n\n\n\nq3\n\n\nq\n3\n\n\n\nq2-&gt;q3\n\n\n{1}\n\n\n\nq3-&gt;q3\n\n\n{0,1}"
  },
  {
    "objectID": "logics.html#section-7",
    "href": "logics.html#section-7",
    "title": "Logics",
    "section": "‘01101’",
    "text": "‘01101’\n\n\\(M_1\\) accepts [0, 1, 1, 0, 1] by ending in \\(q_3\\)\n\nassert(M_1([0, 1, 1, 0, 1]) # M_1 as a function from bit strings to booleans.\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nq0\n\n\n\n\nq1\n\nq\n1\n\n\n\nq0-&gt;q1\n\n\n\n\n\nq1-&gt;q1\n\n\n{0}\n\n\n\nq2\n\nq\n2\n\n\n\nq1-&gt;q2\n\n\n{1}\n\n\n\nq2-&gt;q1\n\n\n{0}\n\n\n\nq3\n\n\nq\n3\n\n\n\nq2-&gt;q3\n\n\n{1}\n\n\n\nq3-&gt;q3\n\n\n{0,1}"
  },
  {
    "objectID": "logics.html#exercise",
    "href": "logics.html#exercise",
    "title": "Logics",
    "section": "Exercise",
    "text": "Exercise\n\nDoes \\(M_1\\) accept [0, 0, 1, 0, 1]?\n\n[0, 0, 1, 0, 1] # M_1 as a function from bit strings to booleans.\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nq0\n\n\n\n\nq1\n\nq\n1\n\n\n\nq0-&gt;q1\n\n\n\n\n\nq1-&gt;q1\n\n\n{0}\n\n\n\nq2\n\nq\n2\n\n\n\nq1-&gt;q2\n\n\n{1}\n\n\n\nq2-&gt;q1\n\n\n{0}\n\n\n\nq3\n\n\nq\n3\n\n\n\nq2-&gt;q3\n\n\n{1}\n\n\n\nq3-&gt;q3\n\n\n{0,1}"
  },
  {
    "objectID": "logics.html#terminology",
    "href": "logics.html#terminology",
    "title": "Logics",
    "section": "Terminology",
    "text": "Terminology\n\nWe say that:\n\n\\(A\\) is the language of \\(M_1\\).\n\\(M_1\\) recognizes \\(A\\)\n\\(A = L(M_1)\\)\n\nWe note: \\[\nw \\in A \\implies \\exists i &lt; |w| - 1 : w_i = 1 \\land w_{i+1} = 1\n\\]\n\n\nw = '01101' # for example\nassert('11' in w)"
  },
  {
    "objectID": "logics.html#finite-automaton",
    "href": "logics.html#finite-automaton",
    "title": "Logics",
    "section": "Finite Automaton",
    "text": "Finite Automaton\n\nA finite automaton (FA), also known as a finite state machine (FSM), is a mathematical model of computation used to recognize patterns in a sequence of symbols."
  },
  {
    "objectID": "logics.html#finite-automaton-1",
    "href": "logics.html#finite-automaton-1",
    "title": "Logics",
    "section": "Finite Automaton",
    "text": "Finite Automaton\n\nIn class: “finite automaton”\nReal life: mostly say “state machine”\nI used the notation *FA to denote these are not a specific kind of FA"
  },
  {
    "objectID": "logics.html#formal-definition-1",
    "href": "logics.html#formal-definition-1",
    "title": "Logics",
    "section": "Formal Definition",
    "text": "Formal Definition\nA finite automaton is formally defined as a 5-tuple:\n\n\\(Q\\) A finite, non-empty set of states.\n\\(\\Sigma\\): A finite, non-empty set of input symbols called the alphabet.\n\\(\\delta\\): The transition function, a mapping\n\n\\(\\delta : Q \\times \\sigma \\rightarrow Q\\)\n\n\\(q_0\\): The initial state, where \\(q_0 \\in Q\\).\n\\(F\\): A set of accepting states (or final states), where \\(F \\subset Q\\)."
  },
  {
    "objectID": "logics.html#explanation",
    "href": "logics.html#explanation",
    "title": "Logics",
    "section": "Explanation:",
    "text": "Explanation:\n\nStates (\\(Q\\)): Possible internal configurations - like computer memory.\nAlphabet (\\(\\Sigma\\)): Possible inputs - machine binary or computer I/O.\nTransition Function (\\(\\delta\\)): How the FA’s state is updated on read.\nInitial State (\\(q_0\\)): This is the state where the automaton begins its operation.\nAccepting States (\\(F\\)): These determine if the FA outputs \\(0\\) or \\(1\\)."
  },
  {
    "objectID": "logics.html#our-example",
    "href": "logics.html#our-example",
    "title": "Logics",
    "section": "Our Example",
    "text": "Our Example\n\n\\(M_1 = (Q, \\Sigma, \\delta, q_1, \\{q_3\\})\\)\n\n\\(Q = \\{q_1, q_2, q_3\\}\\)\n\\(\\Sigma = \\{0, 1\\}\\)\n\nHow to express \\(\\delta\\)?\n\n\n\n\n\n\\(\\delta=\\)\n\\(0\\)\n\\(1\\)\n\n\n\n\n\\(q_1\\)|\n\\(q_1\\)\n\\(q_2\\)\n\n\n\\(q_2\\)|\n\\(q_1\\)\n\\(q_3\\)\n\n\n\\(q_3\\)|\n\\(q_3\\)\n\\(q_3\\)"
  },
  {
    "objectID": "logics.html#python",
    "href": "logics.html#python",
    "title": "Logics",
    "section": "Python",
    "text": "Python\n# define q_n as a convenience\nq_1, q_2, q_3 = \"q_1\", \"q_2\", \"q_3\"\n# define M_1\nQ = {q_1, q_2, q_3}\nS = {0, 1}\nd = {\n    q_1 : { 0:q_1, 1:q_2 },\n    q_2 : { 0:q_1, 1:q_3 },\n    q_3 : { 0:q_3, 1:q_3 }\n}\nM_1 = (Q,S,d,q_1,{q_3})"
  },
  {
    "objectID": "logics.html#stringslanguages",
    "href": "logics.html#stringslanguages",
    "title": "Logics",
    "section": "Strings/Languages",
    "text": "Strings/Languages\n\nA string is a sequence of letters \\(\\Sigma^n\\)\nA language is a set of strings.\nThe empty string is zero length \\(\\Sigma^0\\)\nThe empty language is the empty set \\(\\varnothing\\) We previously used the term “trace” the way DFAs use “string”.\n\n\nWe note that the empty string is not in any way related to the empty language"
  },
  {
    "objectID": "logics.html#acceptance-3",
    "href": "logics.html#acceptance-3",
    "title": "Logics",
    "section": "Acceptance",
    "text": "Acceptance\n\n\\(M\\) accepts string \\(w = w_1w_2\\ldots w_n\\) if:\n\n\n\\[\n\\forall w_i \\in \\Sigma : \\exists r_0r_1\\ldots r_n :\n\\]\n\n\n\\[\nr_0 = q_0 \\land\n\\]\n\n\n\\[\nr_n \\in F \\land\n\\]\n\n\n\\[\n\\forall i : r_i = \\delta(r_{i-1},w_i)\n\\]"
  },
  {
    "objectID": "logics.html#formal-definition",
    "href": "logics.html#formal-definition",
    "title": "Logics",
    "section": "Formal Definition",
    "text": "Formal Definition\nA finite automaton is formally defined as a 5-tuple:\n\n\\(Q\\) A finite, non-empty set of states.\n\\(\\Sigma\\): A finite, non-empty set of input symbols called the alphabet.\n\\(\\delta\\): The transition function, a mapping\n\n\\(\\delta : Q \\times \\sigma \\rightarrow Q\\)\n\n\\(q_0\\): The initial state, where \\(q_0 \\in Q\\).\n\\(F\\): A set of accepting states (or final states), where \\(F \\subset Q\\)."
  },
  {
    "objectID": "logics.html#safety-4",
    "href": "logics.html#safety-4",
    "title": "Logics",
    "section": "Safety",
    "text": "Safety\nCould we argue that only G¬(green∧X_red_ ) is a safety property?\n15-20 min: In small groups, define the Büchi Automaton that captures *only* this safety property.\nA diagram is sufficient, but think about A ≔ {Q, Σ, δ, q0, F }\nBe prepared to demonstrate that you have created a safety property!\nSafety"
  },
  {
    "objectID": "logics.html#trap-state-3",
    "href": "logics.html#trap-state-3",
    "title": "Logics",
    "section": "Trap State",
    "text": "Trap State\nTransition\nLetter\n{R}\n{G}\n{Y}\nΣ/{R, G, Y }\nInitial State\nNext State\nq0\nq0\nq1\nqt\nqt\nq1\nqt\nq1\nq2\nqt\nq2\nq0\nqt\nq2\nqt"
  },
  {
    "objectID": "logics.html#liveness-4",
    "href": "logics.html#liveness-4",
    "title": "Logics",
    "section": "Liveness",
    "text": "Liveness\n\nThis means, we can study liveness properties by adding a self-loop with negation of all other outgoing edges to each automaton state.\n\nWe see that q1 has an outgoing edge labelled “yellow”.\nWe add an edge from q1 to itself that is labelled “not yellow”.\n\nAs a convenience, we say the “good thing” is the light turning green\n\nWe mark q1 as the accepting state, since it is reached when the light turns green.\n\n\nLiveness"
  },
  {
    "objectID": "logics.html#liveness-5",
    "href": "logics.html#liveness-5",
    "title": "Logics",
    "section": "Liveness",
    "text": "Liveness\nCould we argue that only F_green_ is a Liveness property?\n10-15 min: In small groups, define the Büchi Automaton that captures *only* this liveness property.\nA diagram is sufficient, but think about A ≔ {Q, Σ, δ, q0, F }\nBe prepared to demonstrate that you have created a safety property!\nLiveness"
  },
  {
    "objectID": "logics.html#live-5",
    "href": "logics.html#live-5",
    "title": "Logics",
    "section": "Live()",
    "text": "Live()\nWe recall the definition of safety.\nLive(m) requires the “good thing” for a Buchi automaton, which is entering an accepting state infinitely often, because we require this “good thing” to happen for trace to be accepted.\nSo in practice, we have\nLive(m) is m augmented by an accepting trap state qt and new transition function δlive(m) which is the transition function δ extended so that it causes every undefined transition of m to put Live(m) in qt"
  }
]