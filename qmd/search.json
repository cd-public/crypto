[
  {
    "objectID": "sha256.html#announcements",
    "href": "sha256.html#announcements",
    "title": "SHA256",
    "section": "Announcements",
    "text": "Announcements\n\nWelcome to variously CS 276/CS 540\nAction Items:\n\nHow was Macros?\nNext homework coming out now - SHAinC"
  },
  {
    "objectID": "sha256.html#today",
    "href": "sha256.html#today",
    "title": "SHA256",
    "section": "Today",
    "text": "Today\n\nSHA256\n\nWhy?\nWhat?\nHow?"
  },
  {
    "objectID": "sha256.html#slide-credit",
    "href": "sha256.html#slide-credit",
    "title": "SHA256",
    "section": "Slide Credit",
    "text": "Slide Credit\n\nSaravanan Vijayakumaran\nsarva@ee.iitb.ac.in\n\nDepartment of Electrical Engineering\n\nIndian Institute of Technology Bombay"
  },
  {
    "objectID": "sha256.html#hash-functions",
    "href": "sha256.html#hash-functions",
    "title": "SHA256",
    "section": "Hash Functions",
    "text": "Hash Functions\n\nMethods for deterministically compress a long input string to a shorter output called a digest\n\nAlso called “signature”\nCan hash anything stored in computer\n\nThese are also called “compression” or “one-way” hash functions."
  },
  {
    "objectID": "sha256.html#hash-merits",
    "href": "sha256.html#hash-merits",
    "title": "SHA256",
    "section": "Hash Merits",
    "text": "Hash Merits\n\nPrimary requirement is that it should be infeasible to find collisions,\n\ni.e. no two inputs have same digest.\nIf I download Ubuntu and check the signature, I should know it’s Ubuntu.\nIf Ubuntu and a malware package have the same signature, useless."
  },
  {
    "objectID": "sha256.html#non-cryptographic",
    "href": "sha256.html#non-cryptographic",
    "title": "SHA256",
    "section": "Non-Cryptographic",
    "text": "Non-Cryptographic\n\nUsed to build hash tables\n\nKey-value stores with \\(\\mathcal{O}(1)\\) lookup time.\nMy hashtable/hashmap slides\n\nExample: Python hash\n\n\nprint(\"\\n\".join([f\"{hash(a):+d}\" for a in \"ABCDE\"]))\n\n+307432586377922195\n+8720052512513840967\n+7066593843844395842\n-6025104745690603236\n-9067290596465053571"
  },
  {
    "objectID": "sha256.html#example.tex",
    "href": "sha256.html#example.tex",
    "title": "SHA256",
    "section": "Example.tex",
    "text": "Example.tex\n\nLet \\(M\\) be the size of some hash table\nTake \\(a \\in \\mathbb{N} : a &lt; M \\land \\gcd(a, M) = 1\\)\n\nThat is, two positive coprime integers.\n\nAny integer value \\(x\\) can be mapped into \\(\\mathbb{N}/(M) = \\{0,1,\\ldots, M-1\\}\\)\n\nh_a(x) = a x \\pmod{M}\n\\[\nh_a(x) = a x \\pmod{M}\n\\]"
  },
  {
    "objectID": "sha256.html#example.py",
    "href": "sha256.html#example.py",
    "title": "SHA256",
    "section": "Example.py",
    "text": "Example.py\n\nWe can express in a programming language.\nWe note that 257 == 0x101 is prime.\n\nAnd therefore \\(\\forall M : \\gcd(257,M) = 1\\)\n\n\n\nimport math\nh = lambda x, a, M : (a * x) % M\na, M = 0x05, 1 &lt;&lt; 0x08\nassert(all((not math.gcd(a, M) == 1) or h(x, a, M) in range(M) for x in range(M)))\nprint('h'+str((0xDA7A,a,M)), '=', h(0xDA7A,a,M))\n\nh(55930, 5, 256) = 98"
  },
  {
    "objectID": "sha256.html#example.c",
    "href": "sha256.html#example.c",
    "title": "SHA256",
    "section": "Example.c",
    "text": "Example.c\n\nWe note a high performance special case.\nLet \\(w\\) be the bit size used to store numbers\n\nLikely 32 == 0x20 for C unsigned\n\\(W\\) stands for word size\n\nTake \\(W = 2^w\\) and \\(M = 2^m\\)\n\nunsigned int h(unsigned int x, unsigned int a, unsigned int m) {\n    return (a * x) &gt;&gt; (sizeof(unsigned int) * 0x10 - m); \n}"
  },
  {
    "objectID": "sha256.html#collisions",
    "href": "sha256.html#collisions",
    "title": "SHA256",
    "section": "Collisions",
    "text": "Collisions\n\nA collision occurs if \\[\n\\exists x, x' : x \\neq x' \\land h(x) = h(x')\n\\]\nThat is, this assertion fails:\n\nx_0, x_1 = 1,2\nassert(((x_0 != x_1) and (h(x_0, a, M) == h(x_1, a, M))))\n\nGoal: minimize:non-crypto::avoid:crypto collisions.\n\nAchieve this via a large codomain for \\(h\\)"
  },
  {
    "objectID": "sha256.html#codomain",
    "href": "sha256.html#codomain",
    "title": "SHA256",
    "section": "Codomain:",
    "text": "Codomain:\n\n“In mathematics, a codomain or set of destination of a function is a set into which all of the output of the function is constrained to fall. It is the set \\(Y\\) in the notation \\(f: X → Y\\). The term range is sometimes ambiguously used to refer to either the codomain or the image of a function.”"
  },
  {
    "objectID": "sha256.html#test-it",
    "href": "sha256.html#test-it",
    "title": "SHA256",
    "section": "Test it:",
    "text": "Test it:\n\nh = lambda x, a, M : (a * x) % M\na, M = 0x05, 1 &lt;&lt; 0x08\nassert(set(h(x, a, M) for x in range(M)) == set(range(M)))\n\n\nAs a rule we shouldn’t try to write proofs/definitions in Python, but…\nSmall \\(M = 2^{0x08} = 256\\) means our computer can handle all possibilities."
  },
  {
    "objectID": "sha256.html#visualize",
    "href": "sha256.html#visualize",
    "title": "SHA256",
    "section": "Visualize:",
    "text": "Visualize:"
  },
  {
    "objectID": "sha256.html#cryptographic",
    "href": "sha256.html#cryptographic",
    "title": "SHA256",
    "section": "Cryptographic",
    "text": "Cryptographic\n\nBegin with SHA-2 (Secure Hash Algorithm 2).\n\nA family of cryptographic hash functions.\nBy the U.S. National Security Agency (NSA)\n\nPublished by the U.S. National Institute of Standards and Technology (NIST) in 2001."
  },
  {
    "objectID": "sha256.html#context",
    "href": "sha256.html#context",
    "title": "SHA256",
    "section": "Context",
    "text": "Context\n\nSHA-1, released in 1995, found to have significant vulnerabilities.\nGrowing concerns about the security of SHA-1 led to the development of SHA-2.\n\nSHA-3 released in 2015, not in wide use.\nFor if weakness in SHA-2 discovered.\nSHA-2 regarded as secure in 2025."
  },
  {
    "objectID": "sha256.html#family",
    "href": "sha256.html#family",
    "title": "SHA256",
    "section": "Family",
    "text": "Family\n\nSix hash functions release August 2001:\n\nSHA-224\nSHA-256\nSHA-384\nSHA-512\nSHA-512/224\nSHA-512/256"
  },
  {
    "objectID": "sha256.html#adoption-and-usage",
    "href": "sha256.html#adoption-and-usage",
    "title": "SHA256",
    "section": "Adoption and Usage",
    "text": "Adoption and Usage\n\nSHA-2 has been widely adopted in\n\nDigital signatures\nCertificate validation\nFile integrity verification.\nBlockchain:\n\n1 of ~2 core technologies of Bitcoin\nSHA-256 specifically"
  },
  {
    "objectID": "sha256.html#sha-2-pledge",
    "href": "sha256.html#sha-2-pledge",
    "title": "SHA256",
    "section": "SHA-2 Pledge",
    "text": "SHA-2 Pledge\n\nI need a verbal confirmation:\n\nEven though we will implement cryptography…\nWe assume their insecurity as we learn to:\n\nTest our code\nWrite proofs\nUse compilers\n\nWe don’t know what side channel attacks are.\n\nI say: out-of-scope."
  },
  {
    "objectID": "sha256.html#sha-256-overview",
    "href": "sha256.html#sha-256-overview",
    "title": "SHA256",
    "section": "SHA-256 Overview",
    "text": "SHA-256 Overview\n\nSHA-2 with a 256-bit output length\nAccepts bit strings of length up to \\(2^{64} - 1\\)\n\n~20 quintillion bits\n~17 million terabytes"
  },
  {
    "objectID": "sha256.html#two-stages",
    "href": "sha256.html#two-stages",
    "title": "SHA256",
    "section": "Two Stages",
    "text": "Two Stages\n\nOutput calculation has two stages:\n\nPreprocessing\nHash Computation"
  },
  {
    "objectID": "sha256.html#preprocessing",
    "href": "sha256.html#preprocessing",
    "title": "SHA256",
    "section": "Preprocessing",
    "text": "Preprocessing\n\nA 256-bit state variable \\(H^{(0)}\\) is initialized:\n\n\\[\\begin{align*}\n\\begin{split}\n   H_0^{(0)} = \\texttt{0x6A09E667}, \\quad H_1^{(0)} = \\texttt{0xBB67AE85},\\\\\n   H_2^{(0)} = \\texttt{0x3C6EF372}, \\quad H_3^{(0)} = \\texttt{0xA54FF53A},\\\\\n   H_4^{(0)} = \\texttt{0x510E527F}, \\quad H_5^{(0)} = \\texttt{0x9B05688C},\\\\\n   H_6^{(0)} = \\texttt{0x1F83D9AB}, \\quad H_7^{(0)} = \\texttt{0x5BE0CD19}.\n\\end{split}\n   \\end{align*}\\]\n\n“Fractional parts of square roots of first primes”"
  },
  {
    "objectID": "sha256.html#input-padding",
    "href": "sha256.html#input-padding",
    "title": "SHA256",
    "section": "Input Padding",
    "text": "Input Padding\n\nThe input \\(M\\) is padded to a length that is a multiple of 512.\nLet \\(M\\) be \\(l\\)-bits long.\nFind the smallest non-negative \\(k\\) such that: \\[\nk + l + 65 \\equiv 0 \\pmod{512}\n\\]"
  },
  {
    "objectID": "sha256.html#padding-content",
    "href": "sha256.html#padding-content",
    "title": "SHA256",
    "section": "Padding Content",
    "text": "Padding Content\n\nAppend \\(k + 65\\) bits to \\(M\\):\n\nA single one (1), followed by\n\\(k\\) zeros (0), followed by\nThe 64-bit representation of \\(l\\). \\[\n\\begin{align*}\n1\\underbrace{000 \\cdots 000}_{k \\textrm{ zeros}}\\underbrace{l}_{\\textrm{ 64 bits}} \\\\\n\\end{align*}\n\\]"
  },
  {
    "objectID": "sha256.html#example.py-1",
    "href": "sha256.html#example.py-1",
    "title": "SHA256",
    "section": "Example.py",
    "text": "Example.py\n\nWe can solve numerically in Python, but…\nPerhaps easier to show with strings.\n\n\nM = \"Hello there I am a message.  \" * 15\nl = len(M.encode('utf-8')) * 8\nk = 512 - (l + 65) % 512\n\"l=\", l, \"k=\", k, \"pad=\", \"0x1\" + \"0\" * (k//4) + f\"{l:016x}\" ## 64 // 4 == 16\n\n('l=', 3480, 'k=', 39, 'pad=', '0x10000000000000000000000d98')\n\n\n\nThe arithmetic form is left an exercise for the interested student.\n\nMy solution was 10-20 characters of code."
  },
  {
    "objectID": "sha256.html#hash-computation",
    "href": "sha256.html#hash-computation",
    "title": "SHA256",
    "section": "Hash Computation",
    "text": "Hash Computation\n\nPadded input is split into \\(N\\) 512-bit blocks:\n\nWe note this is 1-indexed, by convention. \\[\nM^{(1)}, M^{(2)}, \\ldots, M^{(N)}\n\\]\n\nWhen testing, expect to have only \\(M^{(1)}\\)\n\n512 is a lot of bytes to e.g. type in.\nTest more once it works."
  },
  {
    "objectID": "sha256.html#hash-type",
    "href": "sha256.html#hash-type",
    "title": "SHA256",
    "section": "Hash Type",
    "text": "Hash Type\n\nThe hash function has the following type: \\[\nf: M:\\{0,1\\}^{512} \\times H:\\{0,1\\}^{256} \\rightarrow H':\\{0,1\\}^{256}\n\\]\nGiven \\(H^{(i-1)}\\), calculate \\(H^{(i)}\\) using: \\[\nH^{(i)} = f(M^{(i)}, H^{(i-1)}), \\quad 1 \\leq i \\leq N.\n\\]\n\n1-indexed"
  },
  {
    "objectID": "sha256.html#words",
    "href": "sha256.html#words",
    "title": "SHA256",
    "section": "Words",
    "text": "Words\n\nWe specify bitwise operations over exactly 32 bit words.\nThe industry standard is to use stdint\n\n#include &lt;stdint.h&gt;\n\n/* uint32_t is \"unsigned integer of size 32 type\" */\nuint32_t rotate(uint32_t a, uint32_t b) {\n    asm(\"rorl %%cl, %0\" : \"+r\" (a) : \"c\" (b));\n    return a;\n}"
  },
  {
    "objectID": "sha256.html#operations",
    "href": "sha256.html#operations",
    "title": "SHA256",
    "section": "Operations",
    "text": "Operations\n\nBitwise logical operations\n\nUnary,\nBinary, and\nTernary, and\n\nShift/rotate operations\n\nSimple, and\nComposite"
  },
  {
    "objectID": "sha256.html#words-1",
    "href": "sha256.html#words-1",
    "title": "SHA256",
    "section": "Words",
    "text": "Words\n\nBitwise logical operations accept 1, 2, or 3 words of size 32 (uint32_t) and produce one word.\n\nTerm these words \\(U\\), \\(V\\), \\(W\\)\n\nShift/rotate operations additionally accept one natural number \\(n\\) &lt; 32.\n\nTerm this \\(n\\)"
  },
  {
    "objectID": "sha256.html#unary-bitwise",
    "href": "sha256.html#unary-bitwise",
    "title": "SHA256",
    "section": "Unary Bitwise",
    "text": "Unary Bitwise\n\nThere is only one:\n‘bitwise complement’/‘bitwise logical not’: \\[\n\\lnot U\n\\]\nExpressible with uint32_t in C:\n\n/* 32 bit bitwise complement, exact */\nuint32_t complement(uint32_t u) {\n    return ~u;\n}"
  },
  {
    "objectID": "sha256.html#binary-bitwise",
    "href": "sha256.html#binary-bitwise",
    "title": "SHA256",
    "section": "Binary Bitwise",
    "text": "Binary Bitwise\n\n\\(U \\land V\\), \\(U \\lor V\\), \\(U \\oplus V\\): AND, OR, XOR\nAs from printb/macros.\n\nuint32_t and(uint32_t u, uint32_t v) { /* bitwise and */\n    return u & v;\n}\n\nuint32_t ior(uint32_t u, uint32_t v) { /* inclusive or */\n    return u | v;\n}\n\nuint32_t xor(uint32_t u, uint32_t v) { /* exclusive or */\n    return u ^ v;\n}"
  },
  {
    "objectID": "sha256.html#addition",
    "href": "sha256.html#addition",
    "title": "SHA256",
    "section": "Addition",
    "text": "Addition\n\nC addition is a binary bitwise operation:\nEquivalent to integer sum module \\(2^{32}\\)\n\n\nfrom ctypes import c_uint ## this won't work in pypy\ndef addition(u:c_uint, v:c_uint) -&gt; c_uint:\n    return c_uint(u + v)\n\naddition(4000000000, 4000000000) , addition(4, 4)\n\n(c_ulong(3705032704), c_ulong(8))\n\n\n\nFor me, Python coerces c_uint to c_ulong.\n\nGood reason to use C"
  },
  {
    "objectID": "sha256.html#c-math",
    "href": "sha256.html#c-math",
    "title": "SHA256",
    "section": "C Math",
    "text": "C Math\n\nC addition on uint32_t is already modulo \\(2^{32}\\)\n\nWhat else would it be?\nFinite number of bits means finite values.\n\n\n\n\nbitops.c\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n\nint main() {\n    uint32_t u = 4000000000;\n    printf(\"%u + %u = %u\\n\", u, u, u+u);\n    u = 4;\n    printf(\"%u + %u = %u\\n\", u, u, u+u);\n    return 0;\n}"
  },
  {
    "objectID": "sha256.html#c-math-1",
    "href": "sha256.html#c-math-1",
    "title": "SHA256",
    "section": "C Math",
    "text": "C Math\n\nWe get the same values as the Python c_uint\nPython is written in C:\n\n\n\n/bin/sh\n\n$ gcc bitops.c --std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -o bitops\n$ ./bitops\n4000000000 + 4000000000 = 3705032704\n4 + 4 = 8\n$"
  },
  {
    "objectID": "sha256.html#ternary-bitwise",
    "href": "sha256.html#ternary-bitwise",
    "title": "SHA256",
    "section": "Ternary Bitwise",
    "text": "Ternary Bitwise\n\nCHOICE and MEDIAN, expressed logically: \\[\n\\text{CHOICE}(U, V, W) = (U \\land V) \\oplus (\\lnot U \\land W)\n\\] \\[\n\\text{MEDIAN}(U, V, W) = (U \\land V) \\oplus (U \\land W) \\oplus (V \\land W)\n\\]\nThere exist numerous formulations of median.\n\nThis one lifted from GitHub user B-Con"
  },
  {
    "objectID": "sha256.html#shiftsrotates",
    "href": "sha256.html#shiftsrotates",
    "title": "SHA256",
    "section": "Shifts/Rotates",
    "text": "Shifts/Rotates\n\nCompared to bitwise, they:\n\nStill work on a 32 bit word, but\nAlso work on a value \\(n : 0 \\leq n \\leq 31\\)\nOr,\n\nassert(n in range(32))"
  },
  {
    "objectID": "sha256.html#simple-shiftrotate",
    "href": "sha256.html#simple-shiftrotate",
    "title": "SHA256",
    "section": "Simple Shift/Rotate",
    "text": "Simple Shift/Rotate\n\nBitwise shift right &gt;&gt; / x86 shrl \\[\n\\textsf{SHR}^n(U) = \\underbrace{000 \\cdots 000}_{n \\textrm{ zeros}} u_0 u_1 \\cdots u_{30-n} u_{31-n}\n\\]\nThe ROTATE macro / x86 rorl \\[\n\\textsf{ROTR}^n(U) =  \\underbrace{u_{32-n} u_{33-n} \\cdots u_{30} u_{31}}_{n \\textrm{ bits}} u_0 u_1 \\cdots u_{30-n} u_{31-n}\n\\]"
  },
  {
    "objectID": "sha256.html#composites",
    "href": "sha256.html#composites",
    "title": "SHA256",
    "section": "Composites",
    "text": "Composites\n\nWhile not required…\n…easier to understand SHA256 with composites: \\[\n\\begin{align*}\n\\Sigma_0(U)&= \\textsf{ROTR}^{02}(U) \\oplus \\textsf{ROTR}^{13}(U) \\oplus \\textsf{ROTR}^{22}(U) \\\\\n\\Sigma_1(U)&= \\textsf{ROTR}^{06}(U) \\oplus \\textsf{ROTR}^{11}(U) \\oplus \\textsf{ROTR}^{25}(U) \\\\\n\\sigma_0(U)&= \\textsf{ROTR}^{07}(U) \\oplus \\textsf{ROTR}^{18}(U) \\oplus \\textsf{SHR}^{03}(U) \\\\\n\\sigma_1(U)&= \\textsf{ROTR}^{17}(U) \\oplus \\textsf{ROTR}^{19}(U) \\oplus \\textsf{SHR}^{10}(U)\n\\end{align*}\n\\]\nMacros and helper functions both work well here."
  },
  {
    "objectID": "sha256.html#hash-computation-1",
    "href": "sha256.html#hash-computation-1",
    "title": "SHA256",
    "section": "Hash Computation",
    "text": "Hash Computation\n\n4 steps for each 512 bit chunk.\nFirst chunk, also use pre-computed \\(H\\) values.\n\nCalled, say “initial hash values”\nSuccessive chunks use previous chunk’s hash\n\nAll chunks share pre-computed \\(K\\) values.\n\nCalled, say “round contants”\n“Fractional parts of cube roots of first primes”"
  },
  {
    "objectID": "sha256.html#parts",
    "href": "sha256.html#parts",
    "title": "SHA256",
    "section": "Parts",
    "text": "Parts\n\nPreprocess\nSet Message Schedule Array\n\n64 word array\n\nSet Working Variables\n\n8 word sized variables\n\nMain Loop\n\nWord level operations\n\nUpdate hash value"
  },
  {
    "objectID": "sha256.html#set-message-schedule-array",
    "href": "sha256.html#set-message-schedule-array",
    "title": "SHA256",
    "section": "1. Set Message Schedule Array",
    "text": "1. Set Message Schedule Array\n\n\\(M^{(i)}_j\\) is the \\(j\\)-th 0-indexed 32 bit word of the \\(i\\)-th 1-indexed 512 bit chunk of message \\(M\\)\n\nA word is 4 letters\nA chunk is short tweet (64 chars)\n\\(M\\) can be, e.g., Linux, the Iliad\n\n\n\\[\nW_j =\n\\begin{cases}\nM^{(i)}_j & 0 \\leq j \\leq 15 \\\\\n\\sigma_1(W_{j-2}) + W_{j-7} + \\sigma_0(W_{j-15}) + W_{j-16} & 16 \\leq j \\leq 63\n\\end{cases}\n\\]"
  },
  {
    "objectID": "sha256.html#set-working-variables",
    "href": "sha256.html#set-working-variables",
    "title": "SHA256",
    "section": "2. Set Working Variables",
    "text": "2. Set Working Variables\n\nInitialize eight 32-bit words based on the prior hash. \\[\n(A, B, C, D, E, F, G, H) = (H^{(i-1)}_0, \\ldots, H^{(i-1)}_7).\n\\]"
  },
  {
    "objectID": "sha256.html#main-loop",
    "href": "sha256.html#main-loop",
    "title": "SHA256",
    "section": "3. Main Loop",
    "text": "3. Main Loop\n\nIterate \\(j = 0\\) to \\(63\\):\n\nfor j in range(64):\n\nPrecompute two temporary values (or not) \\[\n\\begin{align}\n\\begin{split}\n& T_1  = H + \\Sigma_1(E) + \\textsf{CHOICE}(E,F,G) + K_j + W_j \\\\\n& T_2  = \\Sigma_0(A) + \\textsf{MEDIAN}(A,B,C) \\\\\n\\end{split}\n\\end{align}\n\\]\nUpdate the working variables \\[\n(A,B,C,D,E,F,G,H)  = (T_1+T_2, A, B, C, D+T_1, E, F, G)\n\\]"
  },
  {
    "objectID": "sha256.html#update-hash-value",
    "href": "sha256.html#update-hash-value",
    "title": "SHA256",
    "section": "4. Update hash value",
    "text": "4. Update hash value\n\nConclude the work on \\(M^{(i)}\\) by finding \\(H^{(i)}\\)\n\n\\[\nH^{(i)}_j = A + H^{(i-1)}_j, \\quad j = 0, \\ldots, 7\n\\]"
  },
  {
    "objectID": "printb.html",
    "href": "printb.html",
    "title": "Printb",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- for\n- bits\n\n\n- C types\n- bytes\n\n\n- booleans\n- operators\n\n\n\n\nIn addition to large amounts of contextual and background material, there are three main exercises for this lab:\n\nScript\nPrintb\nit/ool"
  },
  {
    "objectID": "printb.html#section",
    "href": "printb.html#section",
    "title": "Printb",
    "section": "==",
    "text": "==\n\nTo begin, we recall Enigma:\n\nUnlike Python booleans, C has no boolean type.\n\nRather it has truthiness, akin to Python if statements with numerical conditions.\nThe numerical value zero is false.\nAll other numerical values are true.\n\n\nThe simplest way for me to understand bools is via equality testing\n\nFirst, Python\n\n\n\nVerify install\n\nBefore anything else, I verify I have an install of Python3.\n\npython3 --version\n\nI found I had 3.12.3 - not great, not terrible.\n\n\n\nPython -c\n\nWe can evaluate a single Python expression - a single line of code - via -c\n\npython3 -c \"print(1 == 1)\"\n\nAs expected, this prints True - capital “T”, lowercase “rue”.\n\nWe’ve seen this before.\n\n\n\n\nFormat print\n\nHowever, this isn’t exactly true-to-form\nPython print is not a format print by default.\nFor equivalence, we must use a format print.\nWe can naively use a format without specifying a type…\n\npython3 -c 'print(f\"{1==1}\")' \n\nThis still gives True, but also has no C equivalent!\n\nWe have to provide some letter to determine how a value is printed\n\n\n\n\n2 %b | ! 2 %b\n\nJava\n\nThere is a language called Java, technically.\n\n&lt;loud grumbling&gt;\n\nIt has a format print, and uses %b for booleans, I hear.\n\nCredit Stack Overflow\n\nYou can test if you want:\n\nYoink a Java container.\n\npodman run -it openjdk\n\nIt will drop you into something called jshell\nWe can do a quick Java printf\n\nSystem.out.printf(\"1 == 1 is %b\\n\",1 == 1);\n\nI got this output, which I don’t understand at all\n\n1 == 1 is true\n$1 ==&gt; java.io.PrintStream@34c45dca\n\nIt does say “true” though, that’s fun!\nApparently you can use the following to leave jshell\n\n/ex\n\nI cleaned the Java off my system with\n\npodman system prune\n\nI made sure it was gone with\n\npodman images\n\n\n\nPythonic b\n\nAfter that digression, let’s try b in Python\n\npython3 -c 'print(f\"{(1==1):b}\")' \n\nIt prints, of all things:\n\n1\n\nWell, that’s interesting.\n\nIf you want some fun first\n\npython3 -c 'print(f\"{2:b} or not {2:b}\")'"
  },
  {
    "objectID": "ops_ui.html",
    "href": "ops_ui.html",
    "title": "Ops_ui",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- bigint/4096_t\n- headers\n\n\n- extended GCD\n- high order functions\n\n\n- headers\n\n\n\n\n\nThere are no required exercises of this lab.\nIt is supplementary material to the BigRSA homework.\n\nSpecifically, it provides helper functions for BigRSA"
  },
  {
    "objectID": "ops_ui.html#the-.h-file",
    "href": "ops_ui.html#the-.h-file",
    "title": "Ops_ui",
    "section": "The .h file",
    "text": "The .h file\n\nThere are two main types of C files.\n\nThe .c files we have been working with.\nThe .h files we have incorporated via #include"
  },
  {
    "objectID": "ops_ui.html#ops_ui.h",
    "href": "ops_ui.html#ops_ui.h",
    "title": "Ops_ui",
    "section": "ops_ui.h",
    "text": "ops_ui.h\n\nCreate two new files.\n\nops_ui.c, and\nops_ui.h\n\nWe will work within both.\n\nYou may, perhaps, which to keep both open in separate vim windows, or\nImplement completely in 4096_t.c then split latter.\n\nWe will want to be able to #include this work into BigRSA.c next week.\n\n\nDouble Inclusion\n\nBy convention, there is a double inclusion guard\n\n\n\n\n\nops_ui.h\n\n/* ops_ui.h */\n\n#ifndef _ops_ui_H\n#define _ops_ui_H\n\n/* We will put stuff here soon */\n\n#endif /* _ops_u_H */\n\n\n\n\nops_ui.c\n\n/* ops_ui.c */\n\n\n/* We will put stuff here soon */\n\n\n\n\n\nOther headers\n\nVs. 4096_t.h, I implemented ops_ui.h on top of 4096_t.h.\n\nSo no system header files - like stdio\nBut included 4096_t.h.\nBut that file is in another directory!\n\nMy file system looked something like this:\n\n.\n├── 4096_t\n│   ├── 4096_t.c\n│   ├── 4096_t.h\n│   └── biggmp.c\n└── ops_ui\n    ├── ops_ui.c\n    └── ops_ui.h\n\nIt actually had way more stuff, but I cut out everything that isn’t relevant.\n\n\nRelative paths\n\n4096_t is in another directory so I can simply write:\n\n#include \"4096_t.h\"\n\nRather, I must give the relative path - how to navigate from ops_ui.h to 4096_t.h\n\nIf I wanted to navigate through the filesystem, I may do something like the following:\n\n$ pwd\n/home/user/dev/crypto/ops_ui\n$ cd ..\n$ pwd\n/home/user/dev/crypto\n$ cd 4096_t\n$ pwd         \n/home/user/dev/crypto/4096_t\n$ head -1 4096_t.h\n/* 4096_t.h */\n\nOr I may do something much shorter:\n\n$ pwd\n/home/user/dev/crypto/ops_ui\n$ head -1 ../4096_t/4096_t.h\n/* 4096_t.h */\n\nI can refer to to files the same way from within C:\n\n#include \"../4096_t/4096_t.h\"\n\nNote - this will only work if you have a setup with a similar file structure!\n\n\n\n\n\nFunctions\n\nI noticed when working on BigRSA I often:\n\nHad a big 4096-bit integer\nThat I wanted to add 1 or 6 to\nOr compare to 0\n\nThis is a common problem, and reolved in our reference implementation (LibGMP) using the _ui suffix.\nQuoth LibGMP\n\nFunction: void mpz_add (mpz_t rop, const mpz_t op1, const mpz_t op2)\nFunction: void mpz_add_ui (mpz_t rop, const mpz_t op1, unsigned long int op2) \n\nBoth add together a big number named op1\n\nThat is, mpz_add adds it to a big number op2\nAnd mpz_add_ui adds it to an unsigned long int op2\n\nBoth store the sum in the big number rop\nI recommend implementing each of the following.\n\nNote that I place the return value last not first\n\n\n\n\nops_ui.h\n\nuint64_t add_ui(uint64_t *big, uint64_t lil, uint64_t *out);\nuint64_t sub_ui(uint64_t *big, uint64_t lil, uint64_t *out);\nuint64_t mul_ui(uint64_t *big, uint64_t lil, uint64_t *out);\nuint64_t quo_ui(uint64_t *big, uint64_t lil, uint64_t *out);\nuint64_t rem_ui(uint64_t *big, uint64_t lil, uint64_t *out);\n\n\nBefore you start implementing these operations, read the lambda heading."
  },
  {
    "objectID": "ops_ui.html#higher-order-functions",
    "href": "ops_ui.html#higher-order-functions",
    "title": "Ops_ui",
    "section": "Higher Order Functions",
    "text": "Higher Order Functions\n\nDespite my best efforts, there is no graceful way to implement within C functions which return other functions.\n\nI did not say no way! I said no graceful way.\nUsing C++ is not graceful!\n\nThere is, I think, an extraordinarily graceful to implement functions which accept as a parameter/argument some other function(s).\n\nWe simply specify that an argument has some function type.\n\nWe begin with a minimal example.\n\n\nctype.h\n\nOne common application for functions is to check if a character is a printing character:\n\nA number, like 0 or i?\nA letter, like O or i?\nA control character, like \\0 or \\n\nA digit, like 0 or 1\nA space, like  or \\n\n\nctypes.h provides functions to test each of these.\n\n/* For some reason this is int -&gt; int *?\nint isalnum( int ch );\n\nLet’s make a table.\n\nIn the leftmost column, we will print each of the first 127 characters\nThen we we will have a column for each of the ctypes\nWe will specify T or F for “True” or “False” membership in the ctype.\nSo we need a way to go from character-to-character with a bunch of int-to-int functions.\n\nHere are some functions to use:\n\nisalnum\nisalpha\nisdigit\nislower\nisprint\nispunct\nisspace\nisupper\n\nWe can use them as follows:\n\n\n\ntedious.c\n\n#include &lt;stdio.h&gt;\n#include &lt;ctype.h&gt;\n\nint main() {\n    char buf[8] = \"aA1. _\\t\";\n    if (isalnum(buf[0])) {\n        printf(\"T\");\n    } else {\n        printf(\"F\");\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\n\nIt would be tedious to write a wrapper function for each of these.\n\nWe treat them as a lambda function, a function for which we neither know nor care the name, and know only the type.\n\nLet’s examine more closely these lines:\n\n    if (isalnum(buf[0])) {\n        printf(\"T\");\n    } else {\n        printf(\"F\");\n    }\n\nWe:\n\nTake a function name\nTake an array name\nTake an array index\nApply the function name to index element of the array.\nPrint based on the result.\n\nLet’s write a function.\n\nIt doesn’t return anything, it just prints.\nIt takes a function… somehow.\nIt takes a character pointer for an array.\nIt takes a numberical value for an array index.\n\nchar_to_bool(function, array, index)\nThis is not well-formed C - let’s add types.\n\nvoid char_to_bool(function, char *array, int index) # should be size_t, but.\n\nisalnum also has a type - the type int -&gt; int in Python, but in C?\n\nvoid char_to_bool(int (function)(int), char *array, int index).\n- We say `function` is a type that given some `int` returns some `int`\n\nHow do we use it?\n\nThe same way we would any other function for which we know a name or alias!\n\nvoid char_to_bool(int (function)(int), char *array, int index) {\n  if (function(array[index])) {\n      printf(\"T\");\n  } else {\n      printf(\"F\");\n  }\n  return;\n}\nPut it altogether\n\n\n\ngoated.c\n\n#include &lt;stdio.h&gt;\n#include &lt;ctype.h&gt;\n\nvoid char_to_bool(int (function)(int), char *array, int index) {\n    if (function(array[index])) {\n        printf(\"T\");\n    } else {\n        printf(\"F\");\n    }\n    return;\n}\n\nint main() {\n    char buf[8] = \"aA1. _\\t\";\n    char_to_bool(isalnum, buf, 0);\n    printf(\"\\n\");\n    return 0;\n}\n\n\n\nLonger arrays\n\nWhy not examine the char in multiple ways?\n\nWe\n\n\n\n\ngoated.c\n\n#include &lt;stdio.h&gt;\n#include &lt;ctype.h&gt;\n\nvoid char_to_bool(int (function)(int), char *array, int index) {\n    if (function(array[index])) {\n        printf(\"T\");\n    } else {\n        printf(\"F\");\n    }\n    return;\n}\n\nvoid char_to_bools(char *array, int index) {\n    int (*functions[8])(int) = {\n        isalnum,\n        isalpha,\n        isdigit,\n        islower,\n        isprint,\n        ispunct,\n        isspace,\n        isupper\n    }, i;\n    for (i = 0 ; i &lt; 8 ; i++) {\n        char_to_bool(functions[i], array, index);\n    }\n    return;\n}\n\nint main() {\n    char buf[8] = \"aA1. _\\t\";\n    char_to_bools(buf, 0);\n    printf(\"\\n\");\n    return 0;\n}\n\n\nWe can see the output:\n\n{.email}} TTFTTFFF\n\n\nClosing thoughts\n\nAn astute will have noticed that:\n\nAll of the “big” operations have the same function type.\nAll of the “_ui” operations have the same function type.\nAll of the “_ui” operations can utilize the underlying “big” operation.\n\nThis is not efficient for computing performance, but is efficient from code reuse."
  },
  {
    "objectID": "ops_ui.html#autograder",
    "href": "ops_ui.html#autograder",
    "title": "Ops_ui",
    "section": "Autograder",
    "text": "Autograder\n\nThe interface implemented by the autograder may be informative here.\n\nIt uses a Python script.\nIt uses a dedicated .c file with a main function.\nIt differents from the 4096_t grader:\n\nIt uses gcc ../4096_t/4096_t.c ops_ui.c tester.c\nIt can use gcc ../4096_t/biggmp.c ops_ui.c tester.c -lgmp\nYou can change this if you use a different directory structure.\nThere is a better way to write these gcc commands that we will cover after midterm.\n\nIt uses Python subprocess to examine the results.\n\nI was unable to achieve a bugfree multiply absent this interface, but was able to progress rapidly once I developed it.\n\ntester.py\ntester.c"
  },
  {
    "objectID": "ops_ui.html#bigmax",
    "href": "ops_ui.html#bigmax",
    "title": "Ops_ui",
    "section": "BigMax",
    "text": "BigMax\n\nI needed a way to see if things were bigger than other things.\nMy subtraction only worked if the initial argument, the minuend, was larger than the final argument, the subtrahend.\nAdditionally, computing extended gcd’s generally involves finding a maximal and minimal value.\nI just returned a 0 or a 1 depending on whether the initial argument was the max."
  },
  {
    "objectID": "ops_ui.html#bigmid-mid_ui",
    "href": "ops_ui.html#bigmid-mid_ui",
    "title": "Ops_ui",
    "section": "BigMid, mid_ui",
    "text": "BigMid, mid_ui\n\nIn LaTeX I am accustomed to denoted “\\(a\\) is divisible by \\(b\\)” or “\\(b\\) divides \\(a\\)” as follows: \\[\na \\mid b\n\\]\nThis uses the LaTeX \\mid command.\nIt is the same idea as a % b == 0\nI wanted to call this div but that was already used for division.\nI mostly used this for prime generation."
  },
  {
    "objectID": "list_t.html",
    "href": "list_t.html",
    "title": "list_t",
    "section": "",
    "text": "This is the first of two “data structures” assignments, implementing the “chain” of blockchain.\nThe data stored by the structure is simply a void * which could be:\n\nA pointer to a block, or\nFor the test, a numerical value cast to void *\n\nIt is split over 3 files:\n\ntester.c which is an example of how some client could use list_t\nlist_t.h which the public API you will implement, as with 4096_t\n\nChange only the typedef line.\n\nlist_t.c which you may implement in any way you like.\nAdditionally, a Makefile is provided."
  },
  {
    "objectID": "list_t.html#option-0x0-linked-list-lisp-list",
    "href": "list_t.html#option-0x0-linked-list-lisp-list",
    "title": "list_t",
    "section": "Option 0x0: Linked List (“LISP list”)",
    "text": "Option 0x0: Linked List (“LISP list”)\n\nOne obvious way to implement list_t is as a linked list.\n\nA list is a void ** of length 2.\nThe first element is the data element.\nThe second element is a pointer to another list or NULL in the case of no other elements.\nEvery add/remove requires a corresponding malloc/free.\n\n\n\n\nlist_t.h\n\ntypedef void **list_t;"
  },
  {
    "objectID": "list_t.html#option-0x1-a-null-terminated-vector-c-vector",
    "href": "list_t.html#option-0x1-a-null-terminated-vector-c-vector",
    "title": "list_t",
    "section": "Option 0x1: A null-terminated vector (“C vector”)",
    "text": "Option 0x1: A null-terminated vector (“C vector”)\n\nOne obvious way to implement `list_t is as a null-terminated array, buffer, or vector.\n\nA list is a void ** of unspecified length, one greater than the number of elements.\nEvery void * is some data element, except,\nSome final terminating element is NULL\nEither:\n\nThe entire structure is malloced/freed for any change or,\nSomehow mallocs and frees occur only occasionally.\n\nMost obviously by manually calculating size and only resizing when increasing past some power of two in size.\n\n\n\n\n\n\nlist_t.h\n\ntypedef void **list_t;"
  },
  {
    "objectID": "list_t.html#option-0x2-a-length-prefixed-vector-pascal-vector",
    "href": "list_t.html#option-0x2-a-length-prefixed-vector-pascal-vector",
    "title": "list_t",
    "section": "Option 0x2: A length-prefixed vector (“Pascal vector”)",
    "text": "Option 0x2: A length-prefixed vector (“Pascal vector”)\n\nOne obvious way to implement `list_t is as a length-prefixed array, buffer, or vector.\n\nA list is a void ** of specified length, one greater than the number of elements.\nThe first element is a size_t cast to a void * representing the length.\n\nRecall, void * and size_t must be the same size, as they both describe the size of the computer’s memory.\nYou may manage “off-by-one” in any way you like here.\n\nEvery successive element is a data element.\nEither:\n\nThe entire structure is malloced/freed for any change or,\nSomehow mallocs and frees occur only occasionally.\n\nMost obviously by manually calculating size and only resizing when increasing past some power of two in size.\n\n\n\n\n\n\nlist_t.h\n\ntypedef void **list_t;"
  },
  {
    "objectID": "list_t.html#other-options",
    "href": "list_t.html#other-options",
    "title": "list_t",
    "section": "Other options",
    "text": "Other options\n\nAn astute student may realize that:\n\nIt is trivial to both length-prefix and null-terminate\nIt is trivial for an element of a linked list to be a vector of some length, say 16.\n\nAn astute student may wish to implement a doubly-linked list or a binary tree that exposes a list interface.\nAdvanced students should implement an XOR list, which is left as an exercise to the interested student.\n\nAdvanced students should consider how valgrind would regard an XOR list."
  },
  {
    "objectID": "list_t.html#novel-header",
    "href": "list_t.html#novel-header",
    "title": "list_t",
    "section": "Novel Header",
    "text": "Novel Header\n\nAlongside the tester, the expected behavior of the list_t type is defined by the comments and function type specified in list_t.h."
  },
  {
    "objectID": "list_t.html#novel-tester",
    "href": "list_t.html#novel-tester",
    "title": "list_t",
    "section": "Novel Tester",
    "text": "Novel Tester\n\nVersus other testers this term, I wanted to provide a more concrete file that actually used the list_t, performed operations, and issued outputs as print statements.\nI hope that tester is self-documenting, but would love to hear your questions!"
  },
  {
    "objectID": "heap_t.html",
    "href": "heap_t.html",
    "title": "heap_t",
    "section": "",
    "text": "On Due Dates\n\n\n\n\nI am not allowed to make assignments due during finals.\nHowever, I am supportive of “no excuse” late turn-ins up until the final project is due.\n\n\n\n\nThis is the first of two “data structures” assignments, implementing the “Merkle tree” of blockchain.\nThe data stored by the structure is untyped and the heap is provided only with its size.\n\nThe same is true of the provided comparison function.\n\nIt is split over 3 files:\n\ntester.c which is an example of how some client could use heap_t\nheap_t.h which the public API you will implement, as with list_t\n\nYou may not change any lines and must use the array implementation.\nThis is learning objective of the assignment.\n\nheap_t.c where you have some freedom but will be implementing known algorithms.\nAdditionally, a Makefile is provided."
  },
  {
    "objectID": "heap_t.html#initialize-or-construct-a-new-heap.",
    "href": "heap_t.html#initialize-or-construct-a-new-heap.",
    "title": "heap_t",
    "section": "Initialize or construct a new heap.",
    "text": "Initialize or construct a new heap.\n\nYou may not change the type but may change the names.\nImplement a max heap, wherein the maximum element per the comparison function called gt below is in the initial position.\nYou may 1-index or 0-index.\n\nheap_t heap(size_t ele_size, bool (*gt)(void *, void *));\n\nI stack allocated my heap, which are welcome but not required to do.\nMy initial heap explicitly contained zero elements."
  },
  {
    "objectID": "heap_t.html#the-heap-struct",
    "href": "heap_t.html#the-heap-struct",
    "title": "heap_t",
    "section": "The Heap Struct",
    "text": "The Heap Struct\n\nI am requiring the usage of a single internal array, a function pointer, and something to track the size of elements in the array.\nYou do not have to maintain capacity and there is no graceful way to avoiding maintaining num_eles (though non-graceful is fine) but it is probably easier to view them as required.\n\n#include &lt;stdbool.h&gt;\n\ntypedef struct heap_struct {\n    /* These may be changed, but probably are okay */\n    size_t ele_size; /* size of element */\n    size_t num_eles; /* number of elements */\n    size_t capacity; /* current capacity of the heap */\n    bool (*gt)(void *, void *); /* for \"greater than\" */\n    /* You must store all data elements s.t. reachable from 1 pointer */\n    void *eles;\n} heap_t;"
  },
  {
    "objectID": "heap_t.html#explanation",
    "href": "heap_t.html#explanation",
    "title": "heap_t",
    "section": "Explanation",
    "text": "Explanation\n\nele_size\n\nThis heap implementation allows storage of elements of any size_t specifiable size.\nFor example, it could store hash digests, 4096_t, fixed length strengths, or uint24_t’s.\nThis is a helpful exercise in reflecting on types and sizes.\n\nnum_eles\n\nA heap must track its size to know where to place the next element on an insert operation.\n\ncapacity\n\nYou are not required to keep an internal array precisely large enough to store all elements.\nI only change the size of my internal array by doubling, a common rule of thumb.\nYou can change the size of an array with novel malloc, a memcpy, and a free, or\nYou can change the size of an array with realloc, which is preferred but was not covered in lecture.\nYou are not required to have a distinct num_eles and capacity, but are sufficiently encouraged to do so I made both fields mandatory.\n\ngt\n\nThis is just the comparison function, without which the sorting regime of the heap is unclear and should be maintained within the data structure.\nI separately wanted you to see a struct with a function in it!\n\neles\n\nThis is the entries of the heap.\nIt must satisfy the heap property of the element at the initial location being the maximum.\nAll elements must be stored linearly in a single contigious memory block.\nYou may index to zero 0 or one 1 at your discretion, I used zero indexing which seemed unexpectedly easier when writing the code."
  },
  {
    "objectID": "heap_t.html#insert-an-element",
    "href": "heap_t.html#insert-an-element",
    "title": "heap_t",
    "section": "Insert an element",
    "text": "Insert an element\nvoid insert(heap_t *heap, void *ele_ptr);\n\nGiven the pointer to some element of appropriate size to be stored in the heap, place it in the first available location in the heap array then perform the heapify operation.\nConsult the slides if you are unclear on what heapify is."
  },
  {
    "objectID": "heap_t.html#pop-the-maximal-element",
    "href": "heap_t.html#pop-the-maximal-element",
    "title": "heap_t",
    "section": "Pop the maximal element",
    "text": "Pop the maximal element\nvoid *maxpop(heap_t *heap);\n\nThis returns a heap allocated copy of the former maximum value in the heap.\nSeparately, these element is removed from the heap.\nFinally, the heap is rearranged to maintain the heap property using a “SiftDown” operation."
  },
  {
    "objectID": "heap_t.html#sift-down",
    "href": "heap_t.html#sift-down",
    "title": "heap_t",
    "section": "Sift Down",
    "text": "Sift Down\n\nAfter a maxpop, the initial index - zero or one - is vacant.\nOverwrite this value at this location with the last element in the heap array - the rightmost leaf in the last layer.\nCompare this value, now at the initial position, which each of its children.\nSwap it with the greatest of its children.\nContinue to swap, or “sift down”, this value until it is either in a leaf position or is greater than both of its children."
  },
  {
    "objectID": "heap_t.html#visual-demo",
    "href": "heap_t.html#visual-demo",
    "title": "heap_t",
    "section": "Visual Demo",
    "text": "Visual Demo\n\nBegin with the default heap.\n\n{224, 160, 192, 64, 96, 128}\n\n\n\n\n\n\n\nfinite_automata\n\n\n1\n\n224\n\n\n\n2\n\n160\n\n\n\n1-&gt;2\n\n\n\n\n\n3\n\n192\n\n\n\n1-&gt;3\n\n\n\n\n\n4\n\n064\n\n\n\n2-&gt;4\n\n\n\n\n\n5\n\n096\n\n\n\n2-&gt;5\n\n\n\n\n\n6\n\n128\n\n\n\n3-&gt;6\n\n\n\n\n\n\n\n\n\n\n\nHeap allocate a space for 224 to be returned to the client (and freed by the client).\nOverwrite 224 with the rightmost leaf of the final layer.\n\nIn this case, I also just leave this value in the array (why not?)\nI just won’t look at it due to it being outside of the number of elements, and it will be freed eventually.\n\n\n{128, 160, 192, 64, 96}\n\n\n\n\n\n\n\nfinite_automata\n\n\n1\n\n128\n\n\n\n2\n\n160\n\n\n\n1-&gt;2\n\n\n\n\n\n3\n\n192\n\n\n\n1-&gt;3\n\n\n\n\n\n4\n\n064\n\n\n\n2-&gt;4\n\n\n\n\n\n5\n\n096\n\n\n\n2-&gt;5\n\n\n\n\n\n\n\n\n\n\n\nI check both of 128s children, find the maximum, and compare that to 128\n\nThe maximum is 192\nThat is greater than 128\nSo, swap.\n\n\n{192, 160, 128, 64, 96}\n\n\n\n\n\n\n\nfinite_automata\n\n\n1\n\n192\n\n\n\n2\n\n160\n\n\n\n1-&gt;2\n\n\n\n\n\n3\n\n128\n\n\n\n1-&gt;3\n\n\n\n\n\n4\n\n064\n\n\n\n2-&gt;4\n\n\n\n\n\n5\n\n096\n\n\n\n2-&gt;5\n\n\n\n\n\n\n\n\n\n\n\nIf 128 had child nodes, I would recurse, but in the case the process terminates here as the 128 is a leaf.\nWe notice that the heap property is satisfied - all parent nodes are greater than all of their child nodes."
  },
  {
    "objectID": "heap_t.html#novel-tester",
    "href": "heap_t.html#novel-tester",
    "title": "heap_t",
    "section": "Novel Tester",
    "text": "Novel Tester\n\nVersus other testers this term, I wanted to provide a more concrete file that actually used the list_t, performed operations, and issued outputs as print statements.\nI hope that tester is self-documenting, but would love to hear your questions!\n\n\n\n\nFor reference, here is heap_t.h"
  },
  {
    "objectID": "endian.html",
    "href": "endian.html",
    "title": "Endian",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- SHA\n- stdint\n\n\n- Bits\n- fileio\n\n\n- Arrays\n- htonll\n\n\n- Printb\n- memset\n\n\n\n\nThere are no required exercises of this lab.\nIt is supplementary material to the SHAinC homework.\nOption and htonll are the major optional exercises that support SHAinC.\n\nThey are what I regard as likely to be the optimal solutions to problems I expect you to encounter.\n\n‘Memset’ might, or might not, help a lot (depending on how you think).\nArrays will help you at high probability if you encounter a segmentation fault."
  },
  {
    "objectID": "endian.html#stdint.h",
    "href": "endian.html#stdint.h",
    "title": "Endian",
    "section": "stdint.h",
    "text": "stdint.h\n\nBefore doing anything else, we should get 32 bit words.\nI use stdint.h.\nChange last weeks homework to:\n\nAdd an include and\nRemove unsigned by converting to\nuint32_t\n\nSay I had this (incorrect) code:\n\n\n\nmacros.c\n\n#define CHOICE(e,f,g) ((e)?(f):(g))\n#define MEDIAN(e,f,g) ((!!(e) + !!(f) + !!(g)) &gt; 1)\n#define ROTATE(a,n) ((a) &gt;&gt; (n))\n\nint main() {\n    unsigned e = 0xAA, f = 0x55, g = 0x66;\n    CHOICE(e,g,g);\n    MEDIAN(e,f,g);\n    ROTATE(e,f);\n    return 0;\n}\n\n\nInclude stdint and update type names:\n\n\n\nmacros.c\n\n#include &lt;stdint.h&gt; / * !!! NEW */\n\n#define CHOICE(e,f,g) ((e)?(f):(g))\n#define MEDIAN(e,f,g) ((!!(e) + !!(f) + !!(g)) &gt; 1)\n#define ROTATE(a,n) ((a) &gt;&gt; (n))\n\nint main() {\n    uint32_t e = 0xAA, f = 0x55, g = 0x66; /* !!! NEW */\n    CHOICE(e,g,g);\n    MEDIAN(e,f,g);\n    ROTATE(e,f);\n    return 0;\n}\n\n\n\n\n\n\n\nNote\n\n\n\nAn astute student may note that one obvious way to make such change is to:\n\nOpen Python\nRead in macros.c via open into a string variable.\nClose the file descriptor to macros.c\nPerform a replace from unsigned touint32_t`.\nWrite the file to macros.c\n\nWhile in this case we are performing a single string substitutions, and Python is hardly the best choice for so simple a transform, it is always appropriate to use scripts, rather than manual methods, write and edit code.\n\n\n\nYou also need to use exactly one 64 bit numerical value, l\n\nThe message length in bits.\nWe recall the SHA-2 standard caps messages at length 2 ** 62 - 1\nUsually (almost always) a multiple of 8.\nRarely needs all 64 bits, but is required to have them for the standard.\n\nOther values - hash values, messages chunks, etc, are 32 bit.\n\n\n\nmacros.c\n\n#include &lt;stdint.h&gt; / * !!! NEW */\n\nint main() {\n    uint32_t h_i[0x08];  /* 256 bit hash */\n    uint32_t m_i[0x10];  /* 512 bit message chunk */\n    uint64_t l;        /* 64 bit message length */\n    /* Etc, etc. */\n    return 0;\n}\n\n\nWe will use these variables to read information from a file."
  },
  {
    "objectID": "endian.html#file-io",
    "href": "endian.html#file-io",
    "title": "Endian",
    "section": "File I/O",
    "text": "File I/O\n\nWe uphold the following exemplar of SHA256: sha256sum\n\n$ echo \"15 characters.\" &gt; 15char.txt\n$ wc 15char.txt\n 1  2 15 15char.txt\n$ cat 15char.txt\n15 characters.\n$ sha256sum 15char.txt\n5794032f0c0c7ec2c1f43ac9500f65076ad65ec45b8f76e7e2e4cf882b55c3bb  15char.txt\n\nIt computes an SHA-256 hash based on a filename.\nWe introduce file input (not really output) for equivalence.\n\nfopen()\nfread()\nfprintf()\nfclose()\n\n\n\nfopen()\n\nC fopen is almost identical to Python open\n\nTake a filename, and\nA mode, and\nReturn a “file pointer”\n\nIn Python, an _io.TextIOWrapper\n\n&gt;&gt;&gt; open(\"lipsum.txt\", \"r\")\n&lt;_io.TextIOWrapper name='lipsum.txt' mode='r' encoding='cp1252'&gt;\n\nIn C, a FILE *\n\nFILE *fopen(const char *pathname, const char *mode);\nWe capture the return value in a variable for use with other functions.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAn astute student may note that while the Python script can be run directly, testing a line of C code requires additional supporting lines-of-code (LoC) in a complete .c file with:\n\nAn #include preprocessor directive to incorporate the stdio library\nA main function, likely with a return 0;\n\nWhile in this case we are not using this line of code to do anything, versus single lines of Python, single lines of C code are not necessarily independently interpretable or testable.\n\n\n\nNull Checking\n\nIn C, and perhaps in Python, it is common to check if a fopen call is successful.\n\nfopen is something called a “system call” like printf, and should be “null checked”.\nWe:\n\nCapture the return value in a variable, and\nCompare the return value to NULL (that is, zero), and\nIf the return value is NULL, exit with an error code.\n\nUsually in C this is exit(1).\nIncluded in “stdlib.h”\n\n\n\nHere is an example:\n\nWe note that “f_name” is of type char * and includes the file extension.\n\n#include &lt;stdlib.h&gt; /* exit */\nint main() {}\n  char *f_name = \"my_file.txt\";\n  FILE *fp = fopen(f_name, \"r\"); /* read mode */\n  if (fp == NULL) {\n      exit(1);\n  }\n  return 0;\n}\nYou are under no real obligation to null check but…\n\nWithout null checks, very bad times at low probability.\nGround truth for return values is from the “man pages”\nOr use ‘man fopen’ in a non-minimized (not podman) Linux system.\n\n\n\n\n\nfread()\n\nOnce you have opened a file and null checked, it may be read.\nAs a rule, read files into character arrays.\n\nNot quite strings, but not quite not strings.\n\nFor SHA-256, read 512 bits at a time.\n\nThat is 64 characters/bytes/uint8t_ts\n\nuint8_t bytes[64];\nC fread is quite distinct from Python .read()\n\nPython .read is object oriented (not C-like)\n\nfread takes four arguments:\n\nsize_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)\n\nA memory location ptr into which to read bytes.\n\nCall it the “dst” or “destination”, perhaps.\n\nA size_t “size”, how big each thing to read is.\n\nsize_t is usually a uint64_t, but doesn’t have to be.\nWould be of size 1 for char\nWould be of size 8 for uint64_t\nWould be of size sizeof(int) for the default int type.\n\nA size_t ‘nmemb’ for “\\(n\\) members”\n\nThe number of things of ‘size’ to read.\n\nA FILE * ‘stream’ from which to read.\nfread will read ‘size’ * ‘nmemb’ bytes from ‘stream’ into ‘ptr’.\n\n#include &lt;stdlib.h&gt; /* exit */\nint main() {}\n    uint8_t bytes[64];\n    /* Unsafe - needs nullchecks */\n    FILE *fp = fopen(\"my_file.txt\", \"r\"); /* read mode */\n    fread(bytes, 1, 64, fp); /* read up to 64 * 8 -&gt; 512 bits */\n    return 0;\n}\n\n~Null checking\n\nfread has a variety of interesting return values.\n\nIt will return the number of members read…\nNot necessarily the number of bytes (if ‘size’ is non-one)\n\nReturns zero on error, but also…\nNot all files are as large as the read buffer.\n\nIn the above example, bytes is the buffer into which we read - the read buffer.\n\nOn SHA-256, you will have to read files of arbitrary size.\n\nThey will not all be multiples of 512.\nYou will have to follow the padding algorithm.\nChecking the return value of fread will be necessary to determine l.\nMake sure you check sizeof(size_t)!\n\n\nsize_t l = 0; /* SHA-256 length variable 'l' */\nl += fread(bytes, 1, 64, fp) &gt;&gt; 3; /* 2^3 bits per byte */\n\n\n\nfprintf\n\nfprintf is like printf, but the leading f allows directing output somewhere other than standard output stdout.\nI use it here to direct error messages to a special place, stderr\n\nstderr is easier to work with in a variety of complicated ways, but…\nIt is “unbuffered”, so print statements will be output to stderr immediately.\nSometimes, printf statements are lost if errors occur in immediately successive lines of code.\nWe can also capture stderr output specifically with shell commands:\n\n$ ./endian 2&gt; /dev/null\n\nThis suppresses all error messages.\n\nI use fprintf to write error messages within null checks.\nHere is one example, from my sha256 reference solution:\n\nFILE *fp = fopen(f_name, \"r\"); /* read mode */\n\nif (fp == NULL) {\n    fprintf(stderr, \"fopen fails on f_name \\\"%s\\\", exiting...\\n\", f_name);\n    exit(1);\n}\n\nHigh reward and no risk.\nI will use 2&gt; /dev/null in autograders for your convenience.\n\n\n\nfclose\n\nI am contractually obligated to tell you to close files.\nThe interesting bit here is the special EOF character.\nRead more.\n\nI refer to EOF a lot in my theory courses, as a “special character” that comes up a lot in automata and computability theory.\n\nSample code:\n\nif (fclose(fp) == EOF) {\n    fprintf(stderr, \"fclose fails on f_name \\\"%s\\\", exiting...\\n\", f_name);\n    exit(1);\n}"
  },
  {
    "objectID": "endian.html#optional-exercise",
    "href": "endian.html#optional-exercise",
    "title": "Endian",
    "section": "Optional Exercise",
    "text": "Optional Exercise\n\nWrite a C language executable that\n\nGiven a file name at command line…\nPrints out the contents of the file…\nIn hexadecimal…\nIn chunks of size 512 bytes.\n\nSample input:\n\n\n\nlipsum.txt\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n\nSample command:\n\n./fileio lipsum.txt\n\nSample output:\n\n4c6f7265 6d206970 73756d20 646f6c6f \n72207369 7420616d 65742c20 636f6e73 \n65637465 74757220 61646970 69736369 \n6e672065 6c69742c 20736564 20646f20\n\n65697573 6d6f6420 74656d70 6f722069 \n6e636964 6964756e 74207574 206c6162 \n6f726520 65742064 6f6c6f72 65206d61 \n676e6120 616c6971 75612e20 55742065\n\n6e696d20 6164206d 696e696d 2076656e \n69616d2c 20717569 73206e6f 73747275 \n64206578 65726369 74617469 6f6e2075 \n6c6c616d 636f206c 61626f72 6973206e\n\n69736920 75742061 6c697175 69702065 \n78206561 20636f6d 6d6f646f 20636f6e \n73657175 61742e20 44756973 20617574 \n65206972 75726520 646f6c6f 7220696e\n\n20726570 72656865 6e646572 69742069 \n6e20766f 6c757074 61746520 76656c69 \n74206573 73652063 696c6c75 6d20646f \n6c6f7265 20657520 66756769 6174206e\n\n756c6c61 20706172 69617475 722e2045 \n78636570 74657572 2073696e 74206f63 \n63616563 61742063 75706964 61746174 \n206e6f6e 2070726f 6964656e 742c2073\n\n756e7420 696e2063 756c7061 20717569 \n206f6666 69636961 20646573 6572756e \n74206d6f 6c6c6974 20616e69 6d206964 \n20657374 206c6162 6f72756d 2e0a\n\nIt is a simply matter to verify correctness.\n\nTake the first hexadecimal character - 0x4c.\nUse e.g. Python chr.\nGet the letter L.\n\nchr(0x4c)\nSpoilers Solution:\n\n\n\nfileio.c\n\n/* \n * fileio.c \n *\n * Write a C language executable that given a file name \n * prints out the contents of the file in hexadecimal \n * in chunks of size 512 bytes.\n */\n\n/*\ngcc fileio.c --std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -o fileio\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n\n    size_t i, l = 0;\n    uint8_t m[64];\n    FILE *fp; \n\n    if (!(argc &gt; 1)) {\n        fprintf(stderr, \"No filename argument provided, exiting...\\n\");\n        exit(1);\n    }\n\n    fp = fopen(argv[1], \"r\"); /* read mode */\n\n    if (fp == NULL) {\n        fprintf(stderr, \"fopen fails on argv[1] \\\"%s\\\", exiting...\\n\", argv[1]);\n        exit(1);\n    }\n\n    do {\n        l = fread(m, 1, 64, fp);\n        for (i = 0; i &lt; l; i++) {\n            if (i % 4 == 0 && i &gt; 0) {\n                printf(\" \");\n            }\n            if (i % 16 == 0 && i &gt; 0) {\n                printf(\"\\n\");\n            }\n            printf(\"%02x\", m[i]);\n        }\n        printf(\"\\n\\n\");\n    } while (l == 64);\n\n    if (fclose(fp) == EOF) {\n        fprintf(stderr, \"fclose fails on argv[1] \\\"%s\\\", exiting...\\n\", argv[1]);\n        exit(1);\n    }\n\n    return 0;\n}\n\n\n\n\n\n\n\nNote\n\n\n\nAn astute student may note that the “do… while” formulation is unusual.\n\nIn this, we will always print something.\nThe empty file (a file of size zero) and no file (the absence of a file of a given name) are distinct.\nTherefore, we always read from the file at least once after null-checking.\nHowever, we only read again if at least 512 bytes were read…\nOtherwise we read all the content of the file.\n\nThe “do… while” formulation is uncommon, but makes this specific use case much easier. Where else might you use a “do… while”? Why?"
  },
  {
    "objectID": "endian.html#optional-utility",
    "href": "endian.html#optional-utility",
    "title": "Endian",
    "section": "Optional Utility",
    "text": "Optional Utility\n\nYou may find keeping your C code formatted in vim frustrating.\nSimply exit vim and invoke astyle.\n\nastyle fileio.c\n\nIt is likely not on your system by default.\n\nAdd to the Containerfile and rebuild, or\n\napt install astyle # this assumes ubuntu, not alpine\nThere are other such utilities, but this one is quick and nice.\nIf you are using a build script, you can simply add astyle."
  },
  {
    "objectID": "endian.html#endianness",
    "href": "endian.html#endianness",
    "title": "Endian",
    "section": "Endianness",
    "text": "Endianness\n\nFor an out-of-scope reason, most computers store bits differently than most networks.\nSHA-256 analyzes bits on a computer that are slated to go out on a network.\nThis topic is called “Endianness”\nWe go live to a lightly-formatted LLM generated .md write-up:\n\n\nLLMs on Endianess\n\nEndianness refers to the byte order used to store multi-byte data types.\nLike int, unigned, and size_t in memory.\nThere are two main types:\n\nLittle-Endian\n\n\nDefinition: The least significant byte (LSB) is stored at the lowest memory address.\nExample: The number 0x1234ABCD is stored in memory as:\n\n1234ABCD\n\nEditors Note: This is very hard to check, I might add.\n\n\nBig-Endian\n\n\nDefinition: The most significant byte (MSB) is stored at the lowest memory address.\nExample: The number 0x1234ABCD is stored in memory as:\n\nCDAB3412\n\n\n\n\n\n\n\nNote\n\n\n\nAn astute student may note that CDAB3412 does not appear to be the reversal of 1234ABCD\n\nEndianness reverses specifically bytes, 8 bits of information.\nHexadecimal notation expresses specifically nibs or half-bytes, 4 bits of information.\nD is a nib and CD is a byte.\n‘1234’ in reverse byte order is 3412 and is !!!NOT!!! 4321\n4321 would constitute a nib or half-byte reversal.\n\nI recommend thinking of every pair of hexadecimal characters as digit in base 0x100 or base 256 expression of some numerical value.\n\n\n\nWhy Endianness Matters\n\nData Interoperability: Different systems may use different endianness, causing issues when sharing binary data.\nNetworking: The Internet Protocol (IP) uses big-endian (network byte order).\nEditors Note: SHA-256 in practice uses big-endian.\n\nDetecting Endianness in C\n\nYou can determine the endianness of your system using the following code:\n\n\n\n\nchecke.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n  unsigned int x = 1;\n  char *c = (char *)&x;\n  if (*c) {\n      printf(\"Little-Endian\\n\");\n  } else {\n      printf(\"Big-Endian\\n\");\n  }\n  return 0;\n}\n\n\n\nWhy it matters\n\nTo my knowledge, all reference SHA-256 solutions use big endian.\nMy physical device uses little endian, and I suspect yours does too.\n\n\n\narpa/inet.h\n\nThis was a big problem in the early internet days.\nARPA, now DARPA, more or less launched the modern internet.\nThey are responsible for the C89 eligible header arpa/inet.h\n\nIt contains e.g. htonl\n\n“Host to network long”\nIn 1989, uint32_t was commonly called a (unsigned) long.\nEndianness and signedness are non-interactive.\n\nRecall the Encode lecture on signedness.\n\n\nIn 2024, often use htobe32\n\n“Host to big endian 32bit”\nFrom C99 endian.h\nAs with %b, you may use to debug but not to solve your homework.\n\nThat said, it is better to turn in a solution using endian.h than no solution.\nThis is an exception to the typical “no partial credit” policy.\n\n\n\n\n\n\nendian.c\n\n/* endian.c - &exists; C99+ &lt;endian.h&gt; be advised */\n\n/*\ngcc endian.c -O2 -o endian\n*/\n\n#include &lt;stdio.h&gt;  /* fileio   */\n#include &lt;stdint.h&gt; /* uint32_t */\n\n/* Optionally - endianness compatability.  */\n#include &lt;arpa/inet.h&gt; /* htonl */\n#include &lt;endian.h&gt; /* htobe32 */\n\nuint32_t my_htonl(uint32_t n) {\n    return n;\n}\n\nint main() {\n    uint32_t test = 0x1234ABCD;\n    printf(\"%08X\\n%08X\\n%08X\\n\",\n           test,\n           htonl(test),\n           htobe32(test),\n           my_htonl(test)\n          );\n    return 0;\n}\n\n\nWe will now step through an example solution to my_htonl.\nWe will leave as an exercise htonll - the 64 bit variant.\nYou can compare against the htobe64 from endian.h\n\nNot using htobe64 is not just a learning goal.\nRemoving endian.h from my code sped it up 5x in testing.\n\nI note I will assume the “host” is litte endian.\n\nIt is trivial to check, and you may do so, or use a #define\n\n\n\n\nMemory\n\nThe core insight of endianness is that it refers to bits in memory.\nRecall we have used the notion of memory a few times:\n\nStrings in C are characters in adjacent memory locations.\nBitwise operations act on bits in adjacent memory locations.\nThe star * operator and array notation [n] are similar.\n\nWe will rearrange bits using a novel operator - &, which negates *.\n\nWe note that unary prefix & is a memory operator, distinct from\nBinary infix & which is a bitwise operator.\n\n\n\n\nInitial State\n\nWe begin with the indentity operation on uint32_t.\n\nuint32_t my_htonl(uint32_t n) {\n    return n;\n}\n\n\nVariables\n\nIn C89 style, we first declare variables.\nFirst is an alias for n.\n\nWe will treat the 32 bit int as an array of 8 bit ints.\nAn 8 bit int is of type uint8_t\nAn array is of type *\n\nWe initialize it to no value, for now.\n\nuint32_t my_htonl(uint32_t n) {\n    uint8_t *alias;\n    return n;\n}\n\nWe will also be swapping bits around.\nIn Python we can use multiple assignment\n\nx, y = y, x\n\nThis only works with key-value pairs, not arrays.\nWe use a swapping variable, a la\n\nt : int\nt = x\nx = y\ny = t\ndel t\n\nIn C:\n\nuint32_t my_htonl(uint32_t n) {\n    uint8_t swap, *alias;\n    return n;\n}\n\nWe will be looping over something that is quite like an array, so we need an index variable.\n\nI create this variable of type size_t because:\n\nWe will compare it to a sizeof\nWe will use it as an array index to denote memory locations.\nSo the C implementation will guarantee size_t is appropriate for array indices.\nYou can determine what a size_t is using the usual methods for examining C code.\n\n\n\nuint32_t my_htonl(uint32_t n) {\n    uint8_t swap, *alias;\n    size_t index;\n    return n;\n}\n\n\nAmpersand\n\nWe will now use the ampersand & operator.\n\nWe want the uint8_t * array alias to refer to the same bits and the uint32_t numerical value n.\nThe location of the bits that constitute n in memory is given by &n.\nSo we set the alias equal to that location.\n\nuint32_t my_htonl(uint32_t n) {\n  uint8_t swap, *alias = &n;\n  size_t index;\n  return n;\n}\nIf you are confused at all, you should stop and print out, minimally:\n\nThe values of the star, amperand, and unmodified alias and n variables.\nAnything else you think of.\nYou should do these all in different lines in case you get an error.\nYou should think of the &n as the key of n in the key-value memory storage of the system.\n\n\n\n\nCasting\n\nWhen I run this code, I get this warning:\n\nendian.c: In function ‘my_htonl’:\nendian.c:15:26: warning: initialization of ‘uint8_t *’ {aka ‘unsigned char *’} from incompatible pointer type ‘uint32_t *’ {aka ‘unsigned int *’} [-Wincompatible-pointer-types]\n   15 |     uint8_t swap, *arr = &n;\n      |        \n\nThat’s a good warning, I am doing something extremely sketchy.\n\nAfter all, I told gcc that n was a 32 bit integer.\nThen I told it that the the location n was in held an array of 8 bit integers.\nThose things can’t both be true.\n\nWe assure gcc that we know what we are doing with a cast\n\nWe apply a cast to a value, like the value of the memory location of n\nA cast is a type name in parenthesis as a prefix.\nA cast assures the compiler of the intentionality of this mapping of bits to variable names.\nWe are claiming we want to regard n as an array of 8 bit integers, as a uint8_t *.\n\nSo:\n\nuint32_t my_htonl(uint32_t n) {\n    uint8_t swap, *alias = (uint8_t *)&n;\n    size_t index;\n    return n;\n}\n\nThis silenced all my gcc warnings and errors.\n\n\n\nMain loop\n\nIt now suffices to rearrange the bits within 32 bit integer n\nHelpfully, we can refer to these bits using the aliasing 8 bit integer array alias.\n\nuint32_t my_htonl(uint32_t n) {\n    uint8_t swap, *alias = (uint8_t *)&n;\n    size_t index;\n    swap = alias[0];\n    alias[0] = alias[3];\n    alias[3] = swap;\n    swap = alias[1];\n    alias[1] = alias[2];\n    alias[2] = swap;\n    return n;\n}\n\nYou will note this contains repeated code, and is therefore de facto wrong, though it runs correctly."
  },
  {
    "objectID": "endian.html#htonll",
    "href": "endian.html#htonll",
    "title": "Endian",
    "section": "htonll",
    "text": "htonll\n\nWrite a 64 bit endianness inverter.\nYou should start with your my_htonl code if you are stuck.\n\nRefactor the internals into a loop\nUse sizeof for the loop termination.\n\nAdvanced students may wish to write a size agnostic HTON macro.\n\nThis is non-trivial but probably possible (I didn’t check)."
  },
  {
    "objectID": "endian.html#memset",
    "href": "endian.html#memset",
    "title": "Endian",
    "section": "memset",
    "text": "memset\n\nThe C89 “string.h” library contains a helpful function memset.\n\nNAME\n       memset - fill memory with a constant byte\n\nSYNOPSIS\n       #include &lt;string.h&gt;\n\n       void *memset(void *s, int c, size_t n);\n\nDESCRIPTION\n       The memset() function fills the first n bytes of the\n       memory area pointed to by s with the  constant  byte\n       c.\n\nRETURN VALUE\n       The  memset() function returns a pointer to the mem‐\n       ory area s.\n\nI use memset to zero out all my arrays before I use them.\nThis usually doesn’t matter but is very nice with string data."
  },
  {
    "objectID": "endian.html#memcpy",
    "href": "endian.html#memcpy",
    "title": "Endian",
    "section": "memcpy",
    "text": "memcpy\n\nThe C89 “string.h” library contains a helpful function memcpy.\n\nI have never once in my life remembered destination is first, not source.\nI spent an hour trying to figure out a bug caused by that.\n\n\nNAME\n       memcpy - copy memory area\n\nSYNOPSIS\n       #include &lt;string.h&gt;\n\n       void *memcpy(void *dest, const void *src, size_t n);\n\nDESCRIPTION\n       The memcpy() function copies n bytes from memory area src to memory area dest.  The memory\n       areas must not overlap.  Use memmove(3) if the memory areas do overlap.\n\nRETURN VALUE\n       The memcpy() function returns a pointer to dest.\n\nATTRIBUTES\n       For an explanation of the terms used in this section, see attributes(7).\n\nI use memcpy to move data into and out of SHA internal state:\n\nThe working variables.\nThe current \\(H_i\\) hash value.\nThe current \\(M_i\\) message data."
  },
  {
    "objectID": "endian.html#arrays",
    "href": "endian.html#arrays",
    "title": "Endian",
    "section": "Arrays",
    "text": "Arrays\n\nYou will be tempted to write functions of this form:\n\n/* Take two arrays and a return a new array */\nchar *new_hash(uint32_t *m_i, uint32_t *h_i) {\n    uint32_t h_i_1[8];\n    /* some operations */\n    return h_i_1;\n}\n\nThis will cause a segmentation fault for the following reason.\n\nh_i_1 refers to a memory location.\nThat memory location is a local variable of the new_hash function\nWhen new_hash returns, it no longer manages it’s local variables.\nTherefore, it is no longer safe to access that memory location.\n\nIt is, essentially, reclaimed by the operating system.\nThis occurs probabilitistically, but at high probability.\n\nSo the next effort to access a value in h_i_1 will trigger the OS to terminate your program.\n\nHere is the C alternative:\n\n/* Take two arrays as arguments and update the second */\nvoid new_hash(uint32_t *m_i, uint32_t *h_i) {\n    uint32_t h_i_1[8];\n    /* some operations */\n    memcpy(h_i, h_i_1, sizeof(h_i_1));\n    return;\n}\n\nh_i is safe because it is managed by some other function.\n\nLikely main or some other function that called new_hash.\n\nTherefore, it will not be reclaimed by the OS on return from new_hash."
  },
  {
    "objectID": "endian.html#take-aways",
    "href": "endian.html#take-aways",
    "title": "Endian",
    "section": "Take-aways",
    "text": "Take-aways\n\nDon’t return arrays.\nProvide arrays as arguments and update the provided arrays.\nThere are other ways to do this that we will learn in time.\n\nBut they are unhelpful on SHA-256, and would enable low quality solutions."
  },
  {
    "objectID": "bigrsa.html",
    "href": "bigrsa.html",
    "title": "BigRSA",
    "section": "",
    "text": "This is cumulative homework assignment across 4096_t and RSAinC\nImplement 4096 bit RSA.\nThis is an extended homework of more than week, due after break. I recommend:\n\n\n\n\nWeek:\nTasks:\n\n\n\n\n10 Mar\n2048 bit prime generation\n\n\n17 Mar\nUnsigned big extended GCD\n\n\n24 Mar\nFinish Key Generation and File I/O\n\n\n31 Mar\nImplement BigRSA\n\n\n\n\nYou will also probably need to manage a file structure wherein 4096_t and ops_ui are includeded into your BigRSA.\nUse header files and examples from the labs."
  },
  {
    "objectID": "bigrsa.html#implement-big-primality-testing",
    "href": "bigrsa.html#implement-big-primality-testing",
    "title": "BigRSA",
    "section": "Implement Big Primality Testing",
    "text": "Implement Big Primality Testing\n\nIt turns out this is impossible. Nevertheless, we have a plan.\n\n\nImplement randomization via /dev/random\n\n/dev/random and the more prefered but less established /dev/urandom are file-like random number generations that could plausibly be cryptographically secure on your system.\nWe will not be able to implement cryptographically secure RSA, but we should follow the random number generation convention.\nBasically, we read from /dev/random as we would any other file, here is an example of reading and printing 4096 “random” bits.\n\nS is a constant defined in 4096_t\n\n\n\n\nBigRNG.c\n\n#include \"4096_t.h\"\n\nint main() {\n        uint64_t bignum[S];\n        FILE *fp = fopen(\"/dev/random\", \"r\");\n        fread(bignum, sizeof(uint64_t), S, fp);\n        fclose(fp);\n        seebig(bignum);\n        return 0;\n}\n\n\nYou will need to use randomization to select your primes.\n\n\n\nImplement Big Prime Generation\n\nUse:\n\nlibgmp\n/dev/random\n\nBasically, get this to work.\n\nIt seemed fine for me.\n-lgmp\n\n\n\n\nBigRNG.c\n\nvoid prigmp(uint64_t *big, uint8_t words) {\n    /* populate from buffer */\n    mpz_t m;\n    FILE *fp = fopen(\"/dev/random\", \"r\");\n    memset(big, 0, BYTES);\n    fread(big, sizeof(uint64_t), words, fp);\n    fclose(fp);\n    mpz_init(m);\n    mpz_import(m, S, -1, sizeof(uint64_t), 0, 0, big);\n    mpz_nextprime(m, m);\n    mpz_export(big, NULL, -1, sizeof(uint64_t), 0, 0, m);\n    mpz_clear(m);\n    return;\n}"
  },
  {
    "objectID": "bigrsa.html#implement-biggcd",
    "href": "bigrsa.html#implement-biggcd",
    "title": "BigRSA",
    "section": "Implement BigGCD",
    "text": "Implement BigGCD\n\nModifying the extended Euclidean algorithm / extended gcd for use with the 4096_t ints.\nI had to do the following:\n\nChange all arithmetic operations from using infix operators like \\(+\\) or \\(/\\).\nModifying the Euclidean algorithm to use only positive values.\nTest extensively.\n\nYou can also implement 4096_t to accomodate negative values (which I did not do).\n\nI instead created different local values with my EEA function that tracked whether everything was positive or negative.\nThen wrote wrapper functions around the “big” operations that tracked the sign values."
  },
  {
    "objectID": "bigrsa.html#generate-keys",
    "href": "bigrsa.html#generate-keys",
    "title": "BigRSA",
    "section": "Generate Keys",
    "text": "Generate Keys\n\nWrite a 4096 bit .bad and .pub file.\nImplement in a .c file called “bigkey.c”\n\nIt should behave identically to “keygen.c”, but generate 4096 bit keys.\nThe 4096 bit refers to how large the \\(n\\) value should be\nE.g. the \\(e\\) value may still be (decimal) 65537\n\nThe KeyGen description from “RSAinC” in provided below, as reference:\n\n\nA Private Key in 3 Parts\n\nWe recall that the private key minimally contains:\n\nn, a modular base\ne, an encryptor, and\nd, a descryptor.\n\nBased on the KeyGen lab, it should be uncomplicated to calculate these values for 64 bit keys.\nWe will use .bad instead of .pem and insecurely store these values in plaintext.\nWe will then make executables to generate .bad and encrypt content provided a .bad\n\nWe name a .bad so helpfully we don’t use it by accident.\n\nWe will naively print 3 lines of hexademical values, n, e, then d.\nWe will write them to a 5-line file as follows:\n\nThe first line is the precise header text.\nThe second line is the n value in hexadecimal.\nThe third line is the e value, which is 10001.\nThe fourth line is the d value, which should be kept secret.\nThe fifth and final line is the precise footer text.\n\n\n\n\nunsafe.bad\n\n-----BEGIN UNSAFE PRIVATE KEY-----\n95a61f99198bd8e9\n10001\nfbea5e6a3ed31e8f\n-----END UNSAFE PRIVATE KEY-----\n\n\n\nA Public Key in 2 Parts\n\nWe recall that the public key contains, and should only contain:\n\nn, a modular base, and\ne, an encryptor\n\nBased on the KeyGen lab, we already have the ability to write these values to file.\nWe will use .pub instead of .pem or .bad\n\nNot a huge deal how these are stored, actually.\nThe key itself though, is still unsafe to use.\n\nWe will naively print 2 lines of hexademical values, n, then e.\nWe will right them to a file prefixed and suffixed as follows:\n\n\n\nunsafe.pub\n\n-----BEGIN UNSAFE PUBLIC KEY-----\n95a61f99198bd8e9\n10001\n-----END UNSAFE PUBLIC KEY-----"
  },
  {
    "objectID": "bigrsa.html#implement-end-to-end-4096-bit-rsa",
    "href": "bigrsa.html#implement-end-to-end-4096-bit-rsa",
    "title": "BigRSA",
    "section": "Implement End-to-end 4096 bit RSA",
    "text": "Implement End-to-end 4096 bit RSA\n\nDo so in a novel file, bigrsa.c, which should:\n\nAccept 3 command line arguments:\n\nA flag -d or -e for decrypt or encrypt\nThe file name of an input file.\nThe file name of an output file.\n\nIt should:\n\nRead the content of the input file.\nEncrypt or decrypt, as specified, the file contents.\n\nIt should read n and d from “unsafe.bad” to decrypt.\nIt should read n and e from “unsafe.pub” to encrypt.\n\nWrite the encrypted or decrypted content to the output file.\n\n\nYour BigRSA should function over either “keygen.c” 32 bit keys or “bigkey.c” 4096 bit keys."
  },
  {
    "objectID": "bigrsa.html#a-note",
    "href": "bigrsa.html#a-note",
    "title": "BigRSA",
    "section": "A Note",
    "text": "A Note\n\nBe advised that the square of a 4096 bit value requires 8198 bits to specify.\nIt is reasonable to test of 512 (openssl minimum) or 1024 (ssh-keygen minumum size)"
  },
  {
    "objectID": "bigrsa.html#tester",
    "href": "bigrsa.html#tester",
    "title": "BigRSA",
    "section": "“Tester”",
    "text": "“Tester”\n\nRather than provide an end-to-end containerized autograder, I am providing a Makefile.\n\nwget https://github.com/cd-c89/refrsa/raw/refs/heads/main/Makefile # curl was struggling\n\n\nMakefile\n\nCC = gcc # or clang\nCFLAGS = -std=c89 -Wall -Wextra -Werror -Wpedantic -O2\nCLIBS = -lgmp # for biggmp and primes\nBIGNUM = biggmp.c # or use 4096_t.c\n\nall: bigrsa bigkey\n\nbigrsa: bigrsa.c $(BIGNUM) 4096_t.h\n    $(CC) bigrsa.c $(BIGNUM) $(CFLAGS) -o bigrsa $(CLIBS)\n    \nbigkey: bigkey.c $(BIGNUM) 4096_t.h\n    $(CC) bigkey.c $(BIGNUM) $(CFLAGS) -o bigkey $(CLIBS)\n\nclean:\n    rm -f bigrsa bigkey unsafe.* *.txt\n\ncheck: bigrsa bigkey\n    ./bigkey\n    echo \"Multiple of four chars.\" &gt; m.txt\n    ./bigrsa -e m.txt c.txt\n    ./bigrsa -d c.txt n.txt\n    diff m.txt n.txt\n\n\nI am also providing:\n\nA reference solution that uses this Makefile.\nA GitHub action that uses this Makefile:\n\n\n\n\nC89.yml\n\nname: C89 CI\n\non: push\n    \njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n    - run: make check\n\n\nRead more in “Solved”"
  },
  {
    "objectID": "bigrsa.html#solution",
    "href": "bigrsa.html#solution",
    "title": "BigRSA",
    "section": "Solution",
    "text": "Solution\n\nSpoiler alert: This section contains spoilers, including a working solution, to the BigRSA assignment.\n\n\n\n\n\n\n\nSpoiler Alert!\n\n\n\nThis section contains spoilers, including a working solution, to the BigRSA assignment."
  },
  {
    "objectID": "bigrsa.html#a-reference-solution",
    "href": "bigrsa.html#a-reference-solution",
    "title": "BigRSA",
    "section": "A Reference Solution",
    "text": "A Reference Solution\n\nAfter careful reflection, the weight and challenge of this assignment made a single, in-container script insufficient, in my view, for testing.\nIn lieu, I am providing a full reference implementation, with a few caveats:\n\nI have maintained 4096_t solutions as closed source.\n\nInstead, I have implemented an interface to libgmp mpz_t numbers in biggmp.c\nIf you are stuck on 4096_t, you should use this as well.\n\nI am trusting you to either look at, or not look at, my code, based on what works best for your learning.\n\nIt is provided as is, and likely has few bugs, but probably not that few.\n\nI am not requiring you to have any particular interfacing, though I am providing one as an example."
  },
  {
    "objectID": "bigrsa.html#a-perfect-system",
    "href": "bigrsa.html#a-perfect-system",
    "title": "BigRSA",
    "section": "A Perfect System",
    "text": "A Perfect System\n\nA perfect project will:\n\nUse a ‘bigkey’ executable once to perform key generation:\n\nWrite keys to two files, one public and one private.\n\nUse a ‘bigrsa’ executable twice to perform “round trip” encryption on a greater than 64 bit data file.\n\nWrite more than 64 bits to a data file.\n\nIt is easier to do a precise multiple of 64\n\nEncrypt this file and store the ciphertext as a new file.\nDecrypt the cipher text file.\nTake a diff of the input file and the decrypted file.\n\nIf the return code of diff $? is 0, the project is a success."
  },
  {
    "objectID": "bigrsa.html#an-explanation",
    "href": "bigrsa.html#an-explanation",
    "title": "BigRSA",
    "section": "An explanation",
    "text": "An explanation\n\nWhy this implementation?\n\nI could not find a way I liked to specify:\n\nStoring keys\nStory cipher texts\nSetting key lengths\n\nI felt any specification was unfairly restrictive."
  },
  {
    "objectID": "bigrsa.html#how-to-use-the-reference-repository",
    "href": "bigrsa.html#how-to-use-the-reference-repository",
    "title": "BigRSA",
    "section": "How to use the reference repository",
    "text": "How to use the reference repository\n\nEither clone the repository and include your own bigrsa and bigkey or,\nAdd the relevant files to your crypto repository.\nStudy the Makefile closely, and use this reference material or #help-line if you are confused.\n\nMy favorite Makefile tutorial\n\nYou are not required to use GitHub actions (or containers, conspiciously absent) but may wish to do so.\nYou don’t need to think about clang vs gcc, but I wanted to show you clang and Makefile variables."
  },
  {
    "objectID": "bigrsa.html#the-repository",
    "href": "bigrsa.html#the-repository",
    "title": "BigRSA",
    "section": "The Repository",
    "text": "The Repository\n\n\n\n\n\n\nExpand for Reference Solution\n\n\n\n\n\n\nThe repository is publicly visible at github.com/cd-c89/refrsa"
  },
  {
    "objectID": "bigadd.html",
    "href": "bigadd.html",
    "title": "BigAdd",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- stdint\n- headers\n\n\n- modulo\n\n\n\n- rings\n\n\n\n\n\nThere are no required exercises of this lab.\nIt is supplementary material to the 4096_t homework.\n\n4096_t requires add, sub, mul, div\nThis lab provides sub\nThis lab introduces add"
  },
  {
    "objectID": "bigadd.html#the-.h-file",
    "href": "bigadd.html#the-.h-file",
    "title": "BigAdd",
    "section": "The .h file",
    "text": "The .h file\n\nThere are two main types of C files.\n\nThe .c files we have been working with.\n\nThese tend to contain executable code.\nThey contain a main function.\nLarger projects may have multiple .c files for which only one has a main\n\nThe .h files we have incorporated via #include\n\nWe can (and should) write these ourselves.\nThis week we will write a library for a future task.\nWith the Macros assignment, we copy pasted code.\nThe code this week is far too large."
  },
  {
    "objectID": "bigadd.html#t.h",
    "href": "bigadd.html#t.h",
    "title": "BigAdd",
    "section": "4096_t.h",
    "text": "4096_t.h\n\nCreate two new files.\n\n4096_t.c, and\n4096_t.h\n\nWe will work within both.\n\nYou may, perhaps, which to keep both open in separate vim windows, or\nImplement completely in 4096_t.c then split latter.\n\nWe will want to be able to #include this work into rsainc.c next week.\n\n\nDouble Inclusion\n\nBy convention, there is a double inclusion guard\n\nDon’t want to include one function with the same name twice.\nSo we define a variable in the preprocess, like a constant.\nWe check to see if it’s defined.\nWe write all header code within the #ifndef\n\n\n\n\n\n\n4096_t.h\n\n/* 4096_t.h */\n\n#ifndef _4096_T_H\n#define _4096_T_H\n\n/* We will put stuff here soon */\n\n#endif /* _4096_T_H */\n\n\n\n\n4096_t.c\n\n/* 4096_t.c */\n\n/*\ngcc 4096_t.c --std=c89 -Wall -Wextra -Werror -Wpedantic\n*/\n\nint main() {\n  /* Perhaps test some big operations */\n  return 0;\n}\n\n\n\n\n\nOther headers\n\nBy convention, includes are made within a .h file\n\nI will use, say, string for memcpy and stdint for uint64_t\n\n\n\n\n\n\n4096_t.h\n\n/* 4096_t.h */\n\n#ifndef _4096_T_H\n#define _4096_T_H\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#endif /* _4096_T_H */\n\n\n\n\n4096_t.c\n\n/* 4096_t.c */\n\n/*\ngcc 4096_t.c --std=c89 -Wall -Wextra -Werror -Wpedantic\n*/\n\nint main() {\n  /* Perhaps test some big operations */\n  return 0;\n}\n\n\n\n\n\nConstants\n\nI intended this library specifically for use with 4096 bit values.\nSpecify that in the header.\n\nBy convention, constants are defined in the .h file.\nConstants in the header are visible when the header is included.\nWe can keep secret (like private fields in Python) values just within the .c file, if needed.\nThat is pretty out-of-scope.\n\nAt this time, I also add the #include to the .c file.\n\nNote I use double quotes \" rather than the &lt;&gt;\nThis is convention for user-defined headers.\n\nWe could argue using uint64_t is an implementation detail not needed for broad distribution.\n\nHowever, this detail will be exposed by our function declarations latter.\nUsers of 4096_t will need to be able to use S to determine how large to make arrays.\nWe’ll come back to this!\n\n\n\n\n\n\n4096_t.h\n\n/* 4096_t.h */\n\n#ifndef _4096_T_H\n#define _4096_T_H\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define BYTES 4096 / 8 \n#define S BYTES / sizeof(uint64_t)\n\n#endif /* _4096_T_H */\n\n\n\n\n4096_t.c\n\n/* 4096_t.c */\n\n/*\ngcc 4096_t.c --std=c89 -Wall -Wextra -Werror -Wpedantic\n*/\n\n#include \"4096_t.h\"\n\nint main() {\n  /* Perhaps test some big operations */\n  return 0;\n}\n\n\n\n\n\nFunctions\n\nAll functions used within another file are declared (but not defined) within the .h file.\n\nThey are defined within the .c file.\nSeparate declaration/definition is also necessary in C for mutually recursive functions.\nIn C, unlike Python, a function may not refer to a function latter in the file.\nHowever, it may refer to a declaration, much akin to a variable, that is latter defined.\nDeclarations are like definitions but instead of a code block are semicolon terminated.\n\nWe will use bigsub which I am providing for this assignment.\n\nI make no claims my bigsub is good or anything.\n\nIt does not handle negative results.\nI don’t know why it’d need to do that…\n\n\n\n\n\n\n\n4096_t.h\n\n/* 4096_t.h */\n\n#ifndef _4096_T_H\n#define _4096_T_H\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define BYTES 4096 / 8 \n#define S BYTES / sizeof(uint64_t)\n\n/* Given a\n * minuend    uint64_t min[S]\n * subtrahend uint64_t sub[S]\n * difference uint64_t dif[S]\n * 1. Populate dif with the difference between min and sub\n * 2. Return the \"carry bit\" capturing whether an overflow occured.\n  */\nuint64_t bigsub(uint64_t *min, uint64_t *sub, uint64_t *dif); \n\n#endif /* _4096_T_H */\n\n\n\n\n4096_t.c\n\n/* 4096_t.c */\n\n/*\ngcc 4096_t.c --std=c89 -Wall -Wextra -Werror -Wpedantic\n*/\n\n#include \"4096_t.h\"\n\nuint64_t bigsub(uint64_t *min, uint64_t *sub, uint64_t *dif) {\n      size_t i;\n      uint64_t carry = 0, tmp;\n      for (i = 0; i &lt; S; i++) {\n          tmp = min[i] - sub[i] - carry;\n          carry = min[i] &lt; sub[i];\n          dif[i] = tmp;\n    }\n    return carry;\n}\n\nint main() {\n  /* Perhaps test some big operations */\n  return 0;\n}\n\n\n\n\n\nTesting\n\nIt is nontrival to test this code.\n\nHow would we input a 4096_t?\n\nWrite some supporting testing and printing operations.\nI provide a (very) minimal example.\n\n\n\n4096_t.c\n\nint main() {\n    uint64_t min[S], sub[S], dif[S];\n    size_t i;\n    memset(min, 0, BYTES);\n    memset(sub, 0, BYTES);\n    for (i = 0; i &lt; S; i++) {\n        min[i] = i * 3;\n        sub[i] = i * 2;\n    }\n    bigsub(min, sub, dif);\n    for (i = 0; i &lt; S; i++) {\n        printf(\"dif[%02lx] = %02lx\\n\", i, dif[i]);\n    }\n    return 0;\n}\n\n\nWe note this testing can only work if S, BYTES, and memcpy are successfully included!\n\n\n\n4096_t.h\n\nThe 4096_t homework autograder will require code compliant with the following header file:\n\n\n\n4096_t.h\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define S (size_t)(4096 / 64)\n#define BYTES S * sizeof(uint64_t)\n\nuint64_t bigadd(uint64_t *in0, uint64_t *in1, uint64_t *sum); \nuint64_t bigsub(uint64_t *min, uint64_t *sub, uint64_t *dif); \nuint64_t bigmul(uint64_t *in0, uint64_t *in1, uint64_t *out); \nuint64_t bigquo(uint64_t *num, uint64_t *den, uint64_t *quo);\nuint64_t bigrem(uint64_t *num, uint64_t *den, uint64_t *rem);\n\n\nYou may use a different header file while you are working on your code, but:\n\nFor the homework, will need to implement these functions.\nFor SHA-256, will need to implement these functions."
  },
  {
    "objectID": "bigadd.html#section",
    "href": "bigadd.html#section",
    "title": "BigAdd",
    "section": "2 ⇒ 3",
    "text": "2 ⇒ 3\n\nPython 2 had maximum integer sizes, not unlike C\nPython 3 lacks such limitations.\n\nRead more\n\nWhile unsuitable for cryptographic applications for limitations including performance, it is suitable for testing.\nIt is a simple enough matter to translate the following into Python:\n\n\n\n4096_t.c\n\nint main() {\n    uint64_t min[S], sub[S], dif[S];\n    size_t i;\n    memset(min, 0, BYTES);\n    memset(sub, 0, BYTES);\n    for (i = 0; i &lt; S; i++) {\n        min[i] = i * 3;\n        sub[i] = i * 2;\n    }\n    bigsub(min, sub, dif);\n    for (i = 0; i &lt; S; i++) {\n        printf(\"dif[%02lx] = %02lx\\n\", i, dif[i]);\n    }\n    return 0;\n}\n\n\nSimply:\n\nCreate two accumulating variables.\nAdd in values multiplied by powers of two.\nPerform the built-in Python subtract\nPrint the output as a hex value, perhaps split onto multiple lines.\n\n\nS = 64\n\nmin, sub = 0, 0\n# Factor this, obviously.\n[min := min + 3 * n * (2 ** (n * 64)) for n in range(S)]\n[sub := sub + 2 * n * (2 ** (n * 64)) for n in range(S)]\nprint(hex(min-sub))"
  },
  {
    "objectID": "bigadd.html#recommendation",
    "href": "bigadd.html#recommendation",
    "title": "BigAdd",
    "section": "Recommendation",
    "text": "Recommendation\n\nIt is recommended but not required to develop an interface between Python and your 4096_t.\n\nI recommend passing numerical values as hexadecimal strings.\nGenerate values in Python, perform operations, and test results vs. 4096_t\n\nI found it difficult to debug bigadd and bigsub without constructing an interface.\nHere is an example of a function I used in testing:\n\n/* print the big value as a string */\nvoid seebig(uint64_t *a) {\n    size_t i;\n    for (i = S-1; i &lt; S ; i--) {\n        fprintf(stderr, \"%016lx \", a[i]); \n        if ((i % 8 == 0 && i)) {\n            fprintf(stderr, \"\\n\");\n        }       \n    }\n    fprintf(stderr, \"\\n\\n\");\n    return;\n}"
  },
  {
    "objectID": "bigadd.html#autograder",
    "href": "bigadd.html#autograder",
    "title": "BigAdd",
    "section": "Autograder",
    "text": "Autograder\n\nThe interface implemented by the autograder may be informative here.\n\nIt uses a Python script.\nIt uses a dedicated .c file with a main function.\nIt uses gcc 4096_t.c tester.c to compile the 4096_t code for use in the tester executable.\nIt uses Python subprocess to examine the results.\n\nI was unable to achieve a bugfree multiply absent this interface, but was able to progress rapidly once I developed it.\n\ntester.py\ntester.c"
  },
  {
    "objectID": "bigadd.html#big-addition",
    "href": "bigadd.html#big-addition",
    "title": "BigAdd",
    "section": "Big Addition",
    "text": "Big Addition\n\nUsing what you know so far, write bigadd.\n\nDeclare bigadd in the header file.\nDefine bigadd in the .c file.\nTest bigadd to ensure, mostly, you are handling carries correctly.\n\n\n\n\n4096_t.h\n\n/* 4096_t.h */\n\n#ifndef _4096_T_H\n#define _4096_T_H\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define BYTES 4096 / 8 \n#define S BYTES / sizeof(uint64_t)\n\n/* Given a\n * minuend    uint64_t min[S]\n * subtrahend uint64_t sub[S]\n * difference uint64_t dif[S]\n * 1. Populate dif with the difference between min and sub\n * 2. Return the \"carry bit\" capturing whether an overflow occured.\n  */\nuint64_t bigsub(uint64_t *min, uint64_t *sub, uint64_t *dif); \n\n/* Given a\n * addend_0     uint64_t in0[S]\n * addend_1     uint64_t in1[S]\n * sum          uint64_t sum[S]\n * 1. Populate sum with the sum over in0 and in1\n * 2. Return the \"carry bit\" capturing whether an overflow occured.\n  */\nuint64_t bigadd(uint64_t *in0, uint64_t *in1, uint64_t *sum); \n\n#endif /* _4096_T_H */\n\n\nIf you want different names for the inputs, use “augend” and “addend”.\nAddition is generally regarded associative (order doesn’t matter), but\nThere are times in computing that operand order matters.\n\nIn x86 assembly, add accepts two operands, storing the result in the first (augend) operand’s location.\n\nIt would be suitable to write all bigops in this format, if that is your perference!\n\nJust different."
  },
  {
    "objectID": "bigadd.html#testing-1",
    "href": "bigadd.html#testing-1",
    "title": "BigAdd",
    "section": "Testing",
    "text": "Testing\n\nYou should minimally be able to do the following, over arbitrary data.\n\nCheck the carries just in case, of course.\nOr use an e.g. biggte to determine which value is greater than or equal before subtracting.\n\n\n\n\n4096_t.c\n\nint main() {\n    uint64_t a[S], b[S], c[S], d[S];\n    size_t i;\n    memset(a, 0, BYTES);\n    memset(b, 0, BYTES);\n    for (i = 0; i &lt; S; i++) {\n        min[i] = i * 3;\n        sub[i] = i * 2;\n    }\n    bigsub(a, b, c);\n    bigadd(b, c, d);\n    /* You may have written `bigeqs` or */\n    for (i = 0; i &lt; S; i++) {\n        if (a[i] != d[i]) {\n            return 1;\n        }\n    }\n    return 0;\n}"
  },
  {
    "objectID": "alpine.html",
    "href": "alpine.html",
    "title": "Alpine",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- podman\n- Alpine\n\n\n- vim\n- Images\n\n\n- gcc\n- Copies\n\n\n- git\n\n\n\n\n\n\n\n\nYou should have Podman installed.\nIf you are on Windows, you should have WSL installed.\n\nI use it with Ubuntu but do what you like.\n\n\n\nTODO (windows only)\nwsl --install -d ubuntu"
  },
  {
    "objectID": "alpine.html#run",
    "href": "alpine.html#run",
    "title": "Alpine",
    "section": "Run",
    "text": "Run\n\nFirst thing we’ll do in Podman is podman run\n\n\nTODO\npodman run\n\nIt should look something like this:\nC:\\Users\\cd-desk&gt;podman run\nError: requires at least 1 arg(s), only received 0"
  },
  {
    "objectID": "alpine.html#images",
    "href": "alpine.html#images",
    "title": "Alpine",
    "section": "Images",
    "text": "Images\n\nThe thing we run is called an image\nWe’ll use a sample image named Python\n\nYou’ll never guess what it does (Python)\n\nStudents may wish to specify “python:alpine”\n\nThat is the python command in the alpine operating system.\nThis is a 20x smaller image, so 20x faster download\nIt is on a less common Linux OS (alpine) that may be harder to use.\n\n\n\nTODO\npodman run python:alpine\n\nIt should look something like this:\nC:\\Users\\cd-desk&gt;podman run python:alpine\nResolved \"python\" as an alias (/etc/containers/registries.conf.d/000-shortnames.conf)\nTrying to pull docker.io/library/python:latest...\nGetting image source signatures\nCopying blob sha256:abab87fa45d0b95db90eb47059d7e87f5a69281fe5d76fcdb7889ec5c310f44c\n...\nWriting manifest to image destination\n\nC:\\Users\\cd-desk&gt;"
  },
  {
    "objectID": "alpine.html#just-do--it",
    "href": "alpine.html#just-do--it",
    "title": "Alpine",
    "section": "Just do -it",
    "text": "Just do -it\n\nWe downloaded an image and ran it as a container but…\n\nWe didn’t ask the container to do anything\nSo it exits instantly\nOf note, we only have to download once (image) to run many times (container)\n\nTo work within the container run -it for “interactive terminal”\n\n\nTODO\npodman run -it python:alpine\n\nIt should look something like this:\nC:\\Users\\cd-desk&gt;podman run -it python\nPython 3.13.1 (main, Dec  4 2024, 20:40:27) [GCC 12.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;"
  },
  {
    "objectID": "alpine.html#containerfiles",
    "href": "alpine.html#containerfiles",
    "title": "Alpine",
    "section": "Containerfiles",
    "text": "Containerfiles\nThis section concerns something called variously “Containerfiles” or “Dockerfiles” - commonly referred to as “Dockerfiles”, though I believe this is changing over time. If you get stuck, it may be easier to look up “Dockerfiles” documentation - I’ve been looking at both.\n\nUsually when I’m using a container, I need something for which I can’t simply find a default image.\nIn my case, I specifically want a container with something called a “Containerfile”.\nHere is a minimal example:\n\n\n\nContainerfile\n\nFROM alpine\n\n\nI use Alpine as my base image\nIt’s a lightweight Linux operating system\nIt (tends to) have everything I need.\n\n\nTODO\necho \"FROM alpine\" &gt; Containerfile\n\n\nI would save “Containerfile” wherever I save classwork.\n\nFor me, a class-specific directory inside my home directory in the Linux filesystem\n\nincluding on Windows - I work within the WSL filesystem.\n\n\n\nUltimately for me, it looks something like this:\nuser@DESKTOP-THMS2PJ:~$ mkdir crypto\nuser@DESKTOP-THMS2PJ:~$ cd crypto/\nuser@DESKTOP-THMS2PJ:~/crypto$ echo \"FROM alpine\" &gt; Containerfile\nuser@DESKTOP-THMS2PJ:~/crypto$ pwd\n/home/user/crypto\nuser@DESKTOP-THMS2PJ:~/crypto$ ls\nContainerfile"
  },
  {
    "objectID": "alpine.html#build",
    "href": "alpine.html#build",
    "title": "Alpine",
    "section": "Build",
    "text": "Build\n\nWith a “Containerfile” written, we can use podman build.\n\n\nTODO\npodman build\n\nIt should look something like this:\nuser@DESKTOP-THMS2PJ:~/crypto$ podman build\nError: no context directory and no Containerfile specified"
  },
  {
    "objectID": "alpine.html#pale-blue-.",
    "href": "alpine.html#pale-blue-.",
    "title": "Alpine",
    "section": "Pale blue .",
    "text": "Pale blue .\n\nAs with podman run, with podman build we must specify what image to use\n\nBut now we can use an image described by a “Containerfile”!\n\nTo specify, we simply give the current directory ..\n\n\nTODO\npodman build .\n\nIt should look something like this:\nuser@DESKTOP-THMS2PJ:~/crypto$ podman build .\nSTEP 1/1: FROM alpine\nResolved \"alpine\" as an alias (/etc/containers/registries.conf.d/shortnames.conf)\nTrying to pull docker.io/library/alpine:latest...\nGetting image source signatures\nCopying blob 38a8310d387e done\nCopying config 4048db5d36 done\nWriting manifest to image destination\nStoring signatures\nCOMMIT\n--&gt; 4048db5d367\n4048db5d36726e313ab8f7ffccf2362a34cba69e4cdd49119713483a68641fce"
  },
  {
    "objectID": "alpine.html#we-love-the--t",
    "href": "alpine.html#we-love-the--t",
    "title": "Alpine",
    "section": "We love the -t",
    "text": "We love the -t\n\nThis creates a new image but we don’t know what to call it\n\nThe default name is that numerical value in the 2nd to last time above\n\nUse the -t option to podman build, to name the image.\n\nAs far as I can tell, it stands for “tag”\n\nWe can then use this image by name with other commands.\n\n\nTODO\npodman build -t crypto .\n\nIt should look something like this:\nuser@DESKTOP-THMS2PJ:~/crypto$ podman build -t crypto .\nSTEP 1/1: FROM alpine\nCOMMIT crypto\n--&gt; 4048db5d367\nSuccessfully tagged localhost/crypto:latest\nSuccessfully tagged docker.io/library/alpine:latest\n4048db5d36726e313ab8f7ffccf2362a34cba69e4cdd49119713483a68641fce"
  },
  {
    "objectID": "alpine.html#run-1",
    "href": "alpine.html#run-1",
    "title": "Alpine",
    "section": "Run",
    "text": "Run\n\nThe “crypto” image is now being maintained on your device by Podman.\nWe can use run as we did with any other image.\n\n\nTODO\npodman run -it crypto\n\nIt should look something like this:\nuser@DESKTOP-THMS2PJ:~/crypto$ podman run -it crypto\n/ #"
  },
  {
    "objectID": "alpine.html#vim",
    "href": "alpine.html#vim",
    "title": "Alpine",
    "section": "vim",
    "text": "vim\n\nFirst, we can see if we have, say vim. We do not:\n\n\nTODO\nvim\n\nIt should look something like this:\n/ # vim\n/bin/sh: vim: not found"
  },
  {
    "objectID": "alpine.html#apk",
    "href": "alpine.html#apk",
    "title": "Alpine",
    "section": "apk",
    "text": "apk\n\nTo add software to Alpine linux, we use apk - the Alpine Package Keeper.\n\n\nTODO\napk\n\nIt should look something like this:\n/ # apk\napk-tools 2.14.6, compiled for x86_64.\n\nusage: apk [&lt;OPTIONS&gt;...] COMMAND [&lt;ARGUMENTS&gt;...]\n\nPackage installation and removal:\n  add        Add or modify constraints in WORLD and commit changes"
  },
  {
    "objectID": "alpine.html#add",
    "href": "alpine.html#add",
    "title": "Alpine",
    "section": "add",
    "text": "add\n\nGenerally speaking, we can use add with the name of a command, and apk will find and install that command for us:\n\nvim\ngcc\npython\n\nprobably have to say python2 or python3\n\npodman\n\ncan probably run within a container, I didn’t check.\n\n\n\n\nTODO\napk add vim\n\nIt should look something like this:\n/ # apk add vim\n(1/5) Installing vim-common (9.1.0707-r0)\n(2/5) Installing xxd (9.1.0707-r0)\n(3/5) Installing ncurses-terminfo-base (6.5_p20241006-r3)\n(4/5) Installing libncursesw (6.5_p20241006-r3)\n(5/5) Installing vim (9.1.0707-r0)\nExecuting busybox-1.37.0-r8.trigger\nOK: 35 MiB in 20 packages\n\nTo install vim, apk had to install a few other things first…\n\nIncluding the legendary C library ncurses!\nUsed to make legendary game “Rogue”\nFun!\n\nBut ultimately, apk got vim working"
  },
  {
    "objectID": "alpine.html#vim-1",
    "href": "alpine.html#vim-1",
    "title": "Alpine",
    "section": "vim",
    "text": "vim\n\nTest it:\n\n\nTODO\nvim\n\nIt should look something like this:\n~               VIM - Vi IMproved\n~                  version 9.1\n~            by Bram Moolenaar et al.\n~   Vim is open source and freely distributable\n~\n~          Become a registered Vim user!\n~  type  :help register&lt;Enter&gt;   for information\n~\n~  type  :q&lt;Enter&gt;              to exit\n~  type  :help&lt;Enter&gt;  or  &lt;F1&gt; for on-line help\n~  type  :help version9&lt;Enter&gt;  for version info"
  },
  {
    "objectID": "alpine.html#quick-q",
    "href": "alpine.html#quick-q",
    "title": "Alpine",
    "section": "Quick :q",
    "text": "Quick :q\n\nThat is vim running in podman in a “crypto” folder in my home folder.\nLet’s get back to home, following back up:\n\n~ (Linux home)\n\n~/crypto (folder name)\n\npodman run -it crypto (crypto image run by podman executable)\n\nvim (vim executable run by crypto image)\n\n\n\n\nWe first leave vim\n\n\nTODO\n:q\n\nIt should look something like this, with whatever previous commands you used before vim present:\n/ # vim\n/bin/sh: vim: not found\n/ # apk add vim\n(1/5) Installing vim-common (9.1.0707-r0)\n(2/5) Installing xxd (9.1.0707-r0)\n(3/5) Installing ncurses-terminfo-base (6.5_p20241006-r3)\n(4/5) Installing libncursesw (6.5_p20241006-r3)\n(5/5) Installing vim (9.1.0707-r0)\nExecuting busybox-1.37.0-r8.trigger\nOK: 35 MiB in 20 packages\n/ # vim\n/ #"
  },
  {
    "objectID": "alpine.html#exit",
    "href": "alpine.html#exit",
    "title": "Alpine",
    "section": "Exit",
    "text": "Exit\n\nThat is vim running in podman in a “crypto” folder in my home folder.\nLet’s get back to home, following back up:\n\n~ (Linux home)\n\n~/crypto (folder name)\n\npodman run -it crypto (crypto image run by podman executable)\n\n\n\nWe then exit the container\n\n\nTODO\nexit\n\nIt should look something like this, with whatever previous commands you used before vim present:\n/ # vim\n/ # exit\nuser@DESKTOP-THMS2PJ:~/crypto$"
  },
  {
    "objectID": "alpine.html#exit-1",
    "href": "alpine.html#exit-1",
    "title": "Alpine",
    "section": "Exit",
    "text": "Exit\n\nWe entered a container via run and installed vim.\nIn theory this means we can\n\nrun, again, then\nuse vim without installing with apk\n\nTest it\n\n\nTODO\npodman run -it crypto\nvim\n\nIt should look like this::\nuser@DESKTOP-THMS2PJ:~/crypto$ podman run -it crypto\n/ # vim\n/bin/sh: vim: not found\n\nWe installed vim to a container.\nWe ran an image\nAn image is an instance of the container\n\nNothing done in a container persists post-exit\nIf we want to use vim immediately, we need to add it to the image\n\nWe’ll exit the container then solve this problem.\n\n\nTODO\nexit"
  },
  {
    "objectID": "alpine.html#note",
    "href": "alpine.html#note",
    "title": "Alpine",
    "section": "Note",
    "text": "Note\n\nThis section will be much less explicit and apply what you learned.\n\nIf you get stuck, check prior sections.\n\nIf you get stuck, move onto the next section “Git it” to save you work and finish up latter.\n\nIt contains the answer key"
  },
  {
    "objectID": "alpine.html#goal",
    "href": "alpine.html#goal",
    "title": "Alpine",
    "section": "Goal",
    "text": "Goal\n\nWe will:\n\nSet up the “crypto” image for C development\n\nWrite C code\nCompile C code\nRun C code\nCopy the C code back the host system"
  },
  {
    "objectID": "4096_t.html",
    "href": "4096_t.html",
    "title": "4096_t",
    "section": "",
    "text": "Review Show\n\n\nGoal: Implement 4096 bit integers\n\nMy responsibility\n\nI will provide 1 week of instruction on rings, number theory, and programming languages.\nI will provide an autograder Containerfile\n\nYour responsibility\n\nYou will implement a 4096 bit unsigned integer in C89 as:\n\n“4096_t.c” implementation file, and\n“4096_t.h” header file.\n\nYou will store your “4096_t” files in the “4096_t” folder on your “crypto” GitHub repository.\n\n\n\n\nTopic Areas\n\n\n\nReview:\nNewish:\n\n\n\n\n- Rings\n- \\(\\varnothing\\)\n\n\n\n\n\nResources\n\nThe BigAdd lab\n\nThe “Header” entry formed my starter code.\n\nMy Finite Slides\n\nContextual background\n\nMy BigNum Slides\n\nI used this, and its references. Try scroll mode (press ‘r’)\nI think my slides are suitable for multiplication.\nDivision is something of a challenge problem.\n\nI would begin with the following:\nWikipedia Division Algorithms\n\nI used this and Stack Overflow to implement division.\nI used a variety of bitshifts.\n\n\n\n\n\n\n\n\nBigMul Show\n\n\nI find the following bulletin summary the most helpful to making a bigmul implementation:\n\nI Made a pointer to a uint32_t\n`uint32_t *alias;\nSet it equal to the location of some array of uint64_t\n`uint32_t *alias = &array;\nCopied elements of the “alias” into 64 bit values.\nuint64_t tmp = alias[5];\nMultiplied, tracking significance.\n\nVersus in class, I will note I made uint32_t aliases for all operands.\nAdditional, I made a uint64_t twice as large as the input arrays, to hold intermediate results.\n\nuint64_t bigmul(uint64_t *in0, uint64_t *in1, uint64_t *out) {\n    size_t i, j;\n    uint64_t wrk[S*2 + 1];\n    uint32_t *al0 = (uint32_t *)in0, *al1 = (uint32_t *)in1 , *alw = (uint32_t *)wrk, *alo = (uint32_t *)out;\n\n\n\nBigDiv Show\n\nWhile I hope all students complete BigDiv, it is a de facto challenge problem - I found no “easy” solution, and understand it is a comparatively complex system.\n\nI implemented division as a recursive long division with considerable error handling.\nI began by aligning the most significant non-zero bit, which was non-trivial but simple enough.\nYou should write the following functions:\n\nuint64_t bigdiv(uint64_t *num, uint64_t *den, uint64_t *quo, uint64_t *rem) {\n    /* Your code here */\n    return 0;\n}\n\nuint64_t bigquo(uint64_t *num, uint64_t *den, uint64_t *quo) {\n    uint64_t rem[S];\n    bigdiv(num,den,quo,rem);\n    return 0;\n}\n\nuint64_t bigrem(uint64_t *num, uint64_t *den, uint64_t *rem) {\n    uint64_t quo[S];\n    bigdiv(num,den,quo,rem);\n    return 0;\n}\n\nI additionally wrote the following helper functions.\nThese are not all required, or even recommended, simply what I used.\nThey are not debugged - some errors are likely handled within my bigdiv\n\nI expect many off-by-one errors from the comments, which I added just for this document.\n\n\n/* Detemine the log of a 4096bit in base 2^64 */\nuint64_t biglog(uint64_t *in) {\n    uint64_t log = S;\n    while (log && !in[--log]) { }\n    return log;\n}\n\n/* Detemine the log of a 64bit in base 2 */\nuint64_t lillog(uint64_t in) {\n    uint64_t log = 0;\n    while ((in &gt;&gt; log++) && log &lt; 64) {}\n    return log;\n}\n\n/* Find the address of the most significant bit of a 4096bit integer */\nuint64_t getmsb(uint64_t *n) {\n    uint64_t b, l;\n    b = biglog(n);\n    l = lillog(n[b]);\n    return b * 64 + l;\n}\n\n/* Return 64 bits from a 4096 bit integer, begging at bit `ind` */\nuint64_t get_64(uint64_t *n, uint64_t ind) {\n    uint64_t b = ind / 64, l = ind % 64;\n    return (n[b] &lt;&lt; (64 - l)) + (b ? (n[b - 1] &gt;&gt; l) : 0);\n}\n\n\n\nTester Show\n\n\nI am providing the following Containerfile, which will serve as a minimal autograder\n\nI pivoted back to Alpine because Ubuntu was slow.\n\n\n\n\nContainerfile\n\nFROM alpine \n\nRUN apk add build-base gcc curl python3\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/4096_t/4096_t.h -o 4096_t.h\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/4096_t/tester.c -o tester.c\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/4096_t/tester.py -o tester.py\n\nCOPY 4096_t.c .\n\n\nAll three of the these files were previous introduced in the BigAdd lab.\n\n\nUsage\n\nI built my container via:\n\npodman build -t tester .\n\nI tested my code via:\n\npodman run tester python3 tester.py\n\nIf the above script returns the following you are done:\n\nUpload your code to your GitHub on which I am a collaborator.\n\nI will review the most recent version prior to the due date.\n\nADD passes.\nMUL passes.\nQUO passes.\nREM passes.\n\n\nTesting\n\nWhen the container is built, it copies in 4096_t.c\nWithin the container, tester.py:\n\nCompiles tester.c as C89 with appropriate gcc flags.\n\ntester.c is dependent on both your 4096_t.c and my 4096_t.h\n\nCreates two values of size less than 2048 bits.\nPerforms all relevant operations over these values, check the results."
  },
  {
    "objectID": "4bytes.html#basis",
    "href": "4bytes.html#basis",
    "title": "4bytes",
    "section": "Basis",
    "text": "Basis\n\nSo how does RSA work.\nWe recall: \\[\nm^{ed} \\equiv m \\pmod{n}\n\\]\nWhat operation do we use to raise numerical value “m”\n\n“You can represent any message with numerical value.”\nWell, any value that can be represented in a computer.\nWe cannot represent the numerical value of \\(pi\\) because it is transcendental.\nIt has no method for finite expression in any language suitable for usage within computational arithmetic as implement by sequential and combinational logic over resistors, inductors, transitors and capacitors.\n\nIn RSAinC what did we use instead of the integers?\n\nWe use a subset of the integer that ranges up to \\(2^64 - 1\\) from \\(0\\).\n\n\\(\\exists\\) finite encodings of messages.\n\\(\\exists\\) infinite many sentences in English.\n\nEnglish is a recursively enumerable language [Chomsky 1967]\n\nHow many unique sentence can be expressed with 64 bits?\n\nWe agree on some encoding, and then may express \\(~2^{64}\\) sentences."
  },
  {
    "objectID": "4bytes.html#under-congruence",
    "href": "4bytes.html#under-congruence",
    "title": "4bytes",
    "section": "Under Congruence",
    "text": "Under Congruence\n\nGiven some \\(n = p * q : p, q \\in \\mathbb{P}\\), taking \\(m^{ed} \\mod{n}\\) is at most \\(n\\) therefore there are at most \\(n\\) possible messages that may be encoded under this key."
  },
  {
    "objectID": "4bytes.html#separately",
    "href": "4bytes.html#separately",
    "title": "4bytes",
    "section": "Separately",
    "text": "Separately\n\nWe are not working solely with respect to \\(n\\).\nWe are also working within uint64_t\nWe cannot multiple together numbers larger than 1 &lt;&lt; 32 under uint64_t without incurring an overflow.\n\nThis overflow is predictable results in a loss of precise encryption.\n\n\n\n\n1bytes.c\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n\n\nint main() {\n        uint8_t a, b;\n        a = 20;\n        b = a * a;\n        printf(\"{a=%d}^2 -&gt; b=%d under uint8_t.\\n\", a, b);\n        a = 12;\n        b = a * a;\n        printf(\"{a=%d}^2 -&gt; b=%d under uint8_t.\\n\", a, b);\n        return 0;\n}\n\n\nWe see that:\n\n\\[\n20^2 \\equiv 12^2 \\pmod{2^8}\n\\]\n\nClosing thoughts\n\nWe recall the subject name “Computer Science”\n\\(\\exists\\) naturalistic causes for all results in computing (within reason)\n\nThese are frequently multiply specifiable in:\n\nFormal mathematics, e.g. LaTeX\nLinguistics, a field with which I am not familiar with notational conventions\nPhilosophy, using formal logic, using a whiteboard.\nProgramming != Computer Science, using programming languages such as Python.\n\n\n\n\nassert(12 ** 2 % 1 &lt;&lt; 8 == 20 ** 2 % 1 &lt;&lt; 8)\n\n\nWe use finite transitors storing electrons, which correspond to bits.\nThis corresponds to finite expressions in some language.\nWe also decode to the shortest expression which is equivalent under the modular squaring operation.\n\n\n\nFinal Thoughts\n\nWe cannot uniquely square values larger than 32 bits.\nWe cannot store more than 4 ascii/utf-8 chars in 32 bits.\nWe have a message length cap of the lesser of:\n\nThe log base 2 of \\(n\\), the product of primes.\n\n\\(\\log_2{n}\\), the bit length of \\(n\\).\n\n\\(2^{32}\\)"
  },
  {
    "objectID": "btcinc.html",
    "href": "btcinc.html",
    "title": "BTCinC",
    "section": "",
    "text": "BTCinC\n\nOnce you implement SHA, RSA, and data structures, implementation of Bitcoin is trivial.\nDo the following assignments:\n\nlist_t\nheap_t\n\nDue Friday, 8 August at midnight AOE."
  },
  {
    "objectID": "encode.html#announcements",
    "href": "encode.html#announcements",
    "title": "Encode",
    "section": "Announcements",
    "text": "Announcements\n\nWelcome to Computing Security\nAction Items:\n\nSHAinC assignment"
  },
  {
    "objectID": "encode.html#today",
    "href": "encode.html#today",
    "title": "Encode",
    "section": "Today",
    "text": "Today\n\nEncoding\n\nEndianness\nCasts\nTwo’s Complement"
  },
  {
    "objectID": "encode.html#good-at",
    "href": "encode.html#good-at",
    "title": "Encode",
    "section": "“Good at”",
    "text": "“Good at”\n\nComputers “are good at” storing numerical data.\n\nAt a high level numerical computing\n\nNumPy\nR\nJulia\nStata\nSAS"
  },
  {
    "objectID": "encode.html#why",
    "href": "encode.html#why",
    "title": "Encode",
    "section": "Why?",
    "text": "Why?\n\n\n\nImagine thinking in digits.\nTo store a ~3 digit number, need \\(3 \\times 10 = 30\\) “things” that can hold a number.\n\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n10^0\n\n10^1\n\n10^2\n\n\n\nstruct0\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\n\nstruct:0-&gt;struct0\n\n\n\n\n\nstruct1\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\n\nstruct:1-&gt;struct1\n\n\n\n\n\nstruct2\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n\n\nstruct:2-&gt;struct2"
  },
  {
    "objectID": "encode.html#binary",
    "href": "encode.html#binary",
    "title": "Encode",
    "section": "Binary",
    "text": "Binary\n\nWe are familiar with binary encoding.\nWe note: \\(\\log_2(999) \\lt 10\\)\nDecimal encoding squanders \\(\\dfrac{2}{3}\\) of it’s storage space.\nSo we store in binary.\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^0\n\n2^1\n\n2^2\n\n2^3\n\n2^4\n\n2^5\n\n2^6\n\n2^7\n\n2^8\n\n2^9\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1"
  },
  {
    "objectID": "encode.html#binary-1",
    "href": "encode.html#binary-1",
    "title": "Encode",
    "section": "Binary",
    "text": "Binary\n\nThe benefit here is that is sufficient to note the presence or absence of a digit (1)\nVersus the specific digit \\(\\in [1,9]\\) and presence of absense (0)\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^0\n\n2^1\n\n2^2\n\n2^3\n\n2^4\n\n2^5\n\n2^6\n\n2^7\n\n2^8\n\n2^9\n\n \n\n1\n\n \n\n \n\n1\n\n1\n\n \n\n \n\n1"
  },
  {
    "objectID": "encode.html#wait-a-minute.",
    "href": "encode.html#wait-a-minute.",
    "title": "Encode",
    "section": "Wait a minute.",
    "text": "Wait a minute.\n\n\n\nWhy is the ones digit (\\(n^0\\)) leftmost ?\n\nThe “least significant bit” or “lsb”\n\nIn e.g. English place the “lsb” last.\n\nCS 276 ⇒\n\n\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n10^0\n\n10^1\n\n10^2\n\n\n\nstruct0\n\n \n\n \n\n \n\n \n\n \n\n \n\n6\n\n \n\n \n\n \n\n\n\nstruct:0-&gt;struct0\n\n\n\n\n\nstruct1\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n7\n\n \n\n \n\n\n\nstruct:1-&gt;struct1\n\n\n\n\n\nstruct2\n\n \n\n \n\n2\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\nstruct:2-&gt;struct2"
  },
  {
    "objectID": "encode.html#languages",
    "href": "encode.html#languages",
    "title": "Encode",
    "section": "Languages",
    "text": "Languages\n\nIn e.g. spoken word, makes sense to lead with the biggest value.\n\n200 of something is closer to 299 of something than 0 of something is to 9 of something.\n\nIn e.g. programming, we often lead with lowest numerical index.\n\nWe look at the arr[0] or something before the arr[1] of something."
  },
  {
    "objectID": "encode.html#in-practice",
    "href": "encode.html#in-practice",
    "title": "Encode",
    "section": "In Practice",
    "text": "In Practice\n\nWe end up with\n\n\"276\"[0] == '2' and 276 % (10 ** 1) == 6\n\nConfusing!"
  },
  {
    "objectID": "encode.html#annoyance",
    "href": "encode.html#annoyance",
    "title": "Encode",
    "section": "Annoyance",
    "text": "Annoyance\n\nThis gets very annoy when trying to move numbers around that don’t quite fit in some number of bits.\n\nSay I have 123,456 followers on Instagram📷\nBoycott Meta etc etc.\nAnd/or follow me @calvinallegedly\n\nAlso imagine it is 1969 and you only have 8 bit integers."
  },
  {
    "objectID": "encode.html#scanf",
    "href": "encode.html#scanf",
    "title": "Encode",
    "section": "Scanf",
    "text": "Scanf\n\nWe can use scanf - the inverse of printf\n\nWe give scanf a format string, like:\n\n%d,%d\nTwo comma-separated decimal values.\nAstute observers will realize where .csv’s come from\n\nFrom whence .csv’s hail\n\n\n\n\nscanf(\"%d,%d\");"
  },
  {
    "objectID": "encode.html#test",
    "href": "encode.html#test",
    "title": "Encode",
    "section": "Test",
    "text": "Test\n\nTest it\n\n\n\nscanf.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    scanf(\"%d,%d\");\n    return 0;\n}"
  },
  {
    "objectID": "encode.html#warning",
    "href": "encode.html#warning",
    "title": "Encode",
    "section": "Warning",
    "text": "Warning\n\nWe draw a warning for missing arguments for each format code\n\nscanf.c: In function ‘main’:\nscanf.c:4:13: warning: format ‘%d’ expects a matching ‘int *’ argument [-Wformat=]\n    4 |     scanf(\"%d,%d\");\n      |            ~^\n      |             |\n      |             int *\nscanf.c:4:16: warning: format ‘%d’ expects a matching ‘int *’ argument [-Wformat=]\n    4 |     scanf(\"%d,%d\");\n      |               ~^\n      |                |\n      |                int *"
  },
  {
    "objectID": "encode.html#arguments",
    "href": "encode.html#arguments",
    "title": "Encode",
    "section": "Arguments",
    "text": "Arguments\n\nWe need integers.\n\n    int a,b;\n\nWell actually, were asked to provided an int * for each integer format code.\n\n\nformat ‘%d’ expects a matching ’int *’\n\n    int a[1], b[1]; /* Think of these as arrays of one element. */\n\nRegard int *n is just an int n[m] for which we don’t say what m is."
  },
  {
    "objectID": "encode.html#section",
    "href": "encode.html#section",
    "title": "Encode",
    "section": "[]",
    "text": "[]\n\n\n\nSome of you used arrays of unspecified length on enigma, that is banned by c89.\nYou should know how long the arrays in your code are.\nThis is a security class and that stuff matters.\nSee more\nRead more"
  },
  {
    "objectID": "encode.html#use-small-arrays",
    "href": "encode.html#use-small-arrays",
    "title": "Encode",
    "section": "Use small arrays",
    "text": "Use small arrays\n\nJust like the Python x = [0] example.\n\n\n\nscanf.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a[1], b[1];\n    scanf(\"%d,%d\", a, b);\n    return 0;\n}\n\n\nUse as follows:\n\n$ gcc scanf.c && ./a.out\n123,456\n$\n\nClean exit!"
  },
  {
    "objectID": "encode.html#use-small-arrays-1",
    "href": "encode.html#use-small-arrays-1",
    "title": "Encode",
    "section": "Use small arrays",
    "text": "Use small arrays\n\nPrint the value commaless.\n\n\n\nscanf.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a[1], b[1];\n    scanf(\"%d,%d\", a, b);\n    return 0;\n}\n\n\nUse as follows:\n\n$ gcc scanf.c && ./a.out\n123,456\n$\n\nClean exit!"
  },
  {
    "objectID": "encode.html#printing",
    "href": "encode.html#printing",
    "title": "Encode",
    "section": "Printing",
    "text": "Printing\n\nLet’s print our values back…\n\n\n\nscanf.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a[1], b[1];\n    scanf(\"%d,%d\", a, b);\n    printf(\"%d%d\\n\", a, b);\n    return 0;\n}\n\n\nOops!\n\nscanf.c: In function ‘main’:\nscanf.c:6:14: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘int *’ [-Wformat=]\n    6 |     printf(\"%d%d\\n\", a, b);\n      |             ~^       ~\n      |              |       |\n      |              int     int *\n      |             %ls\n..."
  },
  {
    "objectID": "encode.html#printing-1",
    "href": "encode.html#printing-1",
    "title": "Encode",
    "section": "Printing",
    "text": "Printing\n\nPrint needs values, not references.\n\n\n\nscanf.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a[1], b[1];\n    scanf(\"%d,%d\", a, b);\n    printf(\"%d%d\\n\", a[0], b[0]);\n    return 0;\n}\n\n\nNothing too fancy.\n\n$ gcc scanf.c && ./a.out\n123,456\n123456\n$"
  },
  {
    "objectID": "encode.html#double-it",
    "href": "encode.html#double-it",
    "title": "Encode",
    "section": "Double it",
    "text": "Double it\n\nLet’s say we want to double our input value.\n\n\n\n\n\nscanf.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a[1], b[1];\n    scanf(\"%d,%d\", a, b);\n    a[0] *= 2;\n    b[0] *= 2;\n    printf(\"%d%d\\n\", a[0], b[0]);\n    return 0;\n}\n\n\n$ gcc scanf.c && ./a.out\n123,456\n246912\n$ ./a.out\n123,567\n2461134\n$\n\nUh oh."
  },
  {
    "objectID": "encode.html#carries",
    "href": "encode.html#carries",
    "title": "Encode",
    "section": "Carries",
    "text": "Carries\n\nOne reason to put the one’s place first is for carries.\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^\n\n \n\n+\n\n=\n\n0\n\n1\n\n0\n\n1\n\n1\n\n0\n\n1\n\n1\n\n2\n\n0\n\n0\n\n0\n\n3\n\n1\n\n1\n\n?\n\n\n\n\n\n\n\n\n\nAs we add across a value, we want to carry over a bit to a higher power.\nSame with multiply!"
  },
  {
    "objectID": "encode.html#carries-1",
    "href": "encode.html#carries-1",
    "title": "Encode",
    "section": "Carries",
    "text": "Carries\n\nOne reason to put the one’s place first is for carries.\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^\n\n \n\n+\n\nc\n\n=\n\n0\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n1\n\n0\n\n1\n\n2\n\n0\n\n0\n\n0\n\n0\n\n3\n\n1\n\n1\n\n0\n\n0"
  },
  {
    "objectID": "encode.html#carries-2",
    "href": "encode.html#carries-2",
    "title": "Encode",
    "section": "Carries",
    "text": "Carries\n\nAddition is easier least-to-most\n\n\n\n\n\n\n\n\nfinite_automata\n\n\n\nstruct\n\n2^\n\n \n\n+\n\nc\n\n=\n\n0\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n1\n\n0\n\n1\n\n2\n\n0\n\n0\n\n0\n\n0\n\n3\n\n1\n\n1\n\n0\n\n0\n\n4\n\n0\n\n0\n\n1\n\n1\n\n\n\n\n\n\n\n\n\nThis denotes a binary add of 0b01001 to 0b01010 which equals 0b10011\n\n&gt;&gt;&gt; bin(0b01001 + 0b01010)\n'0b10011'\n&gt;&gt;&gt; bin(0b01001 + 0b01010)[2::-1]\n'1b0'\n&gt;&gt;&gt; bin(0b01001 + 0b01010)[:2:-1]\n'1100'\n&gt;&gt;&gt; bin(0b01001 + 0b01010)[:1:-1]\n'11001'"
  },
  {
    "objectID": "encode.html#does-it-matter",
    "href": "encode.html#does-it-matter",
    "title": "Encode",
    "section": "Does it matter?",
    "text": "Does it matter?\n\nKinda.\nThis is called, Endianness, the subject a latter lab.\nIt mostly matters when we rearrange numbers around.\n\nSHA256 works with chunks of various sizes - 8, 32, 256, 512.\nIn which order do we place values from 4 8-bit fields into 1 32-bit field."
  },
  {
    "objectID": "encode.html#section-1",
    "href": "encode.html#section-1",
    "title": "Encode",
    "section": "32 -> 64",
    "text": "32 -&gt; 64\n\nIt is common to find 32 bit code that is running on 64 bit devices.\n\nSay e.g. “World of Warcraft: Classic”\n\nReleased in 2004 for 32 bit devices.\nRepopularized in 2019 then 2024\nLiteral trillion dollar company (MS)\n\n\nNeed a very good way to go between 32 and 64 bits."
  },
  {
    "objectID": "encode.html#casts-1",
    "href": "encode.html#casts-1",
    "title": "Encode",
    "section": "Casts",
    "text": "Casts\n\nThat way is casts\nIn C, we prefix a value by a type (in parens) when assigning it to a variable.\n\n1 is a value.\nlong is a type (usually the 64 bit type)\n(long)1 is the value of 1 as a 64 bit type\n\nlong x = 0;\nint y = 10;\nx = (long)y;"
  },
  {
    "objectID": "encode.html#arrays",
    "href": "encode.html#arrays",
    "title": "Encode",
    "section": "Arrays",
    "text": "Arrays\n\nWe regarded, following “macros”, C integers as akin to arrays of booleans.\nC integers can also be regarded as arrays of bytes.\nFor example, an int is commonly 4 bytes, or char values.\nWe can achieve this with a cast."
  },
  {
    "objectID": "encode.html#example",
    "href": "encode.html#example",
    "title": "Encode",
    "section": "Example",
    "text": "Example\n\n\n\nCreate a variable x\nIt can refer to an int\n\nx : list[int] # not x = [None]\n\nCan’t use yet.\n\nx[0] = 1 # this would error\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int *x;\n    char buf[4];\n    buf[0] = 0xA;\n    buf[1] = 0xB;\n    buf[2] = 0xC;\n    buf[3] = 0xD;\n    x = (int *)buf;\n    printf(\"%x\\n\", x[0]);\n    return 0;\n}"
  },
  {
    "objectID": "encode.html#example-1",
    "href": "encode.html#example-1",
    "title": "Encode",
    "section": "Example",
    "text": "Example\n\n\n\nCreate variable buf\nArray of 4 char.\nVersus a char *:\n\nThe value buf holds some reference.\n\nbuf =  = [None] * 4\n\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int *x;\n    char buf[4];\n    buf[0] = 0xA;\n    buf[1] = 0xB;\n    buf[2] = 0xC;\n    buf[3] = 0xD;\n    x = (int *)buf;\n    printf(\"%x\\n\", x[0]);\n    return 0;\n}"
  },
  {
    "objectID": "encode.html#example-2",
    "href": "encode.html#example-2",
    "title": "Encode",
    "section": "Example",
    "text": "Example\n\n\n\nEasy-to-recognize values.\n\nCan assign \\(n\\) at once but\nBut only for declares.\n(The array could be the wrong size)\n\n\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int *x;\n    char buf[4];\n    buf[0] = 0xA;\n    buf[1] = 0xB;\n    buf[2] = 0xC;\n    buf[3] = 0xD;\n    x = (int *)buf;\n    printf(\"%x\\n\", x[0]);\n    return 0;\n}\n\nchar buf[4] = { 0xA, OxB, 0xC, 0xD }; /* okay */\n/* say, char notbuf[2]; buf = notbuf; */\nbuf = {1,2,3,4}; /* banned - it isn't safe */"
  },
  {
    "objectID": "encode.html#i-lied",
    "href": "encode.html#i-lied",
    "title": "Encode",
    "section": "I lied",
    "text": "I lied\n\n\n\nTell gcc that no, really, buf is actually an array of integers.\nIt will believe you.\nIf you omit the cast, you will get a warning or error\n\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int *x;\n    char buf[4];\n    buf[0] = 0xA;\n    buf[1] = 0xB;\n    buf[2] = 0xC;\n    buf[3] = 0xD;\n    x = (int *)buf;\n    printf(\"%x\\n\", x[0]);\n    return 0;\n}\nd0c0b0a"
  },
  {
    "objectID": "encode.html#ordering",
    "href": "encode.html#ordering",
    "title": "Encode",
    "section": "Ordering",
    "text": "Ordering\n\n\n\nLet’s see the output.\nWhat order is that?\n\nSame order within bytes\n\n0x0 before 0xa\n\nReverse order within a number\n\n0x0b before 0x0a\n\n\n\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int *x;\n    char buf[4];\n    buf[0] = 0xA;\n    buf[1] = 0xB;\n    buf[2] = 0xC;\n    buf[3] = 0xD;\n    x = (int *)buf;\n    printf(\"%x\\n\", x[0]);\n    return 0;\n}\n\nI got no warnings/errors.\n\nd0c0b0a"
  },
  {
    "objectID": "encode.html#takeaway",
    "href": "encode.html#takeaway",
    "title": "Encode",
    "section": "Takeaway:",
    "text": "Takeaway:\n\nThe way integers are printed and the way they are stored in the computer aren’t necessarily related.\nThis matters a lot on SHA-256."
  },
  {
    "objectID": "encode.html#negative-values",
    "href": "encode.html#negative-values",
    "title": "Encode",
    "section": "Negative values",
    "text": "Negative values\n\nFrom time to time we like to use a negative value.\nI know, I was disappointed too.\nWe build them using subtraction."
  },
  {
    "objectID": "encode.html#int-vs-uint",
    "href": "encode.html#int-vs-uint",
    "title": "Encode",
    "section": "int vs uint",
    "text": "int vs uint\n\nIt is a simply enough matter to establish the ranges for potentially negative (signed, or default) values and necessarily positive (unsigned) values.\nWe work with char and unsigned char"
  },
  {
    "objectID": "encode.html#output",
    "href": "encode.html#output",
    "title": "Encode",
    "section": "Output",
    "text": "Output\n\n\na\n0, 0\n...\na\n120, 120\na\n-126, 130\na\n-116, 140\n...\na\n-16, 240\na\n-6, 250\na\n4, 4\n\n\nUnsigned values have roughly double the maximum of signed values.\nUnsigned values have similar maximum and minimum values by absolute values.\n\nRead more e via man abs"
  },
  {
    "objectID": "encode.html#more-tests",
    "href": "encode.html#more-tests",
    "title": "Encode",
    "section": "More tests",
    "text": "More tests\n\nCreate somewhere to store an integer.\nScan input into said integer.\nCast integer to a char and print\nCast integer to an unsigned char and print.\n\n\n\ntester.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n        int x[0];\n        while (scanf(\"%d\", x)) {\n                printf(\"%hhd, %u\\n\", (char)x[0], (unsigned char)x[0]);\n        }\n        return 0;\n}"
  },
  {
    "objectID": "encode.html#output-1",
    "href": "encode.html#output-1",
    "title": "Encode",
    "section": "Output",
    "text": "Output\n\n\n10\n10, 10\n126\n126, 126\n127\n127, 127\n128\n-128, 128\n255\n-1, 255\n256\n0, 0\n\n\nSigned values in \\(n\\) bit integers loop at \\(2^{n-1}\\)\n\nOr do they? Test it on ints!\n\nUnsigned values are maximal when signed values are -1\nmax + 1 and -1 + 1 both equal zero."
  },
  {
    "objectID": "encode.html#look-at-ints",
    "href": "encode.html#look-at-ints",
    "title": "Encode",
    "section": "Look at ints",
    "text": "Look at ints\n\n\ntester.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n        int x[0];\n        while (scanf(\"%d\", x)) {\n                printf(\"%d, %u, %032b\\n\", \n                *x, (unsigned)*x, x[0]);\n        }\n        return 0;\n}"
  },
  {
    "objectID": "encode.html#some-things-to-try",
    "href": "encode.html#some-things-to-try",
    "title": "Encode",
    "section": "Some things to try",
    "text": "Some things to try\n65536\n65536, 65536, 00000000000000010000000000000000\n-1\n-1, 4294967295, 11111111111111111111111111111111\n4294967295\n-1, 4294967295, 11111111111111111111111111111111\n4294967296\n0, 0, 00000000000000000000000000000000\n255\n255, 255, 00000000000000000000000011111111\n256\n256, 256, 00000000000000000000000100000000\n-255\n-255, 4294967041, 11111111111111111111111100000001"
  },
  {
    "objectID": "encode.html#takeaways",
    "href": "encode.html#takeaways",
    "title": "Encode",
    "section": "Takeaways",
    "text": "Takeaways\n\nThe algorithm is simply.\n\nFor unsigned values, simple binary\nFor signed values, negatives are 1-prefixed not 0-prefixed.\n\nThe only difference is in printing.\nArithmetic operations proceed smoothly without consideration of signage.\nCall this “two’s complement” - negatives by binary (0-&gt;1) complement."
  },
  {
    "objectID": "encode.html#stinger",
    "href": "encode.html#stinger",
    "title": "Encode",
    "section": "Stinger",
    "text": "Stinger\n#include &lt;stdio.h&gt;\n\nint main() {\n        int x[0], y[0];\n        while (1) {\n                scanf(\"%d %d\", x, y);\n                printf(\"%d, %u, %032b\\n\",\n                                x[0]/y[0],\n                                (unsigned)x[0]/y[0],\n                                x[0]/y[0]);\n        }\n        return 0;\n}"
  },
  {
    "objectID": "enigma.html",
    "href": "enigma.html",
    "title": "Enigma",
    "section": "",
    "text": "Enigma Show\n\n\nGoal: Learn C I/O and strings\n\nMy responsibility\n\nI will provide a reference solution in Python (solved)\nI will provide an autograder Containerfile (tester)\n\nYour responsibility\n\nYou will create a solution in C as an “enigma.c” file\nYou will create a Gist with an “enigma.c”\nYou will email me, from your credentialed school email, the url of your Gist, it will look something like:\n\nhttps://gist.github.com/cd-public/a840e95e71ac7309a53ab0bb1282ba40\n\nIf you do not have an implementation that passes the autograder by Monday at midnight AOE, do not submit anything.\nAnything that does not pass the autograder is worth zero points.\nLate work is not accepted.\n\nWhat follows is reference material to prepare you to implement “enigma.c”\n\nEnigma, Solved, Visual, and Rotors form a description of the requirements.\nTester documents the autograder.\nOther headings cover the technical details that support the implementation.\n\n\n\n\nTopic Areas\n\n\n\nReview:\nNewish:\n\n\n\n\n- podman\n- curl\n\n\n- vim\n- stdio\n\n\n- gcc\n- ciphers\n\n\n- git\n\n\n\n\n\n\nMotivation\n\nEnigma was a historically significant technology\n\nIt was a Nazi encryption device, using ciphers\nIt was broken by Turing, gay icon and one of the first and greatest computer scientists\n\nAt Willamette, Enigma is an (in)famous CS 151 Intro to Programming assignment\n\nBasically it is the first assignment that requires nested for loops\n\nIn this course, Enigma will demonstrate the obscurity/clarity divide\n\nIn Python, letters and numbers are different things\nIn C, there are no letters or really numbers, just bits and bytes\nThis makes Enigma in C easier, despite being a “harder” language.\n\n\n\n\nReference Materials\n\nYou can review the Python assignment if you wish:\n\nWrite-ups:\n\nProf. Roberts\nProf. Rembold\nProf. Calvin\n\nSlides\n\nProf. Rembold\nProf. Calvin\n\nAssignment Repository\n\nI also provide\n\n“Solved”: A Python implementation of the machine\n“Visual”: A text visualizer of the Engima machine’s ciphers\n“Rotors”: A text visualizer of the full Enigma machine\n\n\n\n\n\n\nSolved Show\n\n\nHere is a reference solution, with a few tests, in Python.\n\nGist\n\nI regard this code as considerably easier to read, test, and understand than most plaintext descriptions.\nI will also do a visual representation.\nThe ciphers are sometimes called “rotors” because historically they were implemented as a rotating… cipher.\n\n#!/usr/bin/env python3\n\n# constants                       # constant\nrs = [                            # rotors\n    \"BDFHJLCPRTXVZNYEIWGAKMUSQO\", # fast\n    \"AJDKSIRUXBLHWTMCQGZNPYFVOE\", # medium\n    \"EKMFLGDQVZNTOWYHXUSPAIBRCJ\", # slow\n    \"IXUHFEZDAOMTKQJWNSRLCYPBVG\"  # reflect\n]\nA  = ord('A')                     # value of 'A'\nNC = len(rs[0])                   # number of characters\n\n# apply a cipher/rotor `r` to a letter `c`\nrapply = lambda c, r : r[ord(c) - A]\n\n# invert a cipher/rotor `r`\n    # create a list of letters with their index\n        # [(r[i],i) for i in range(NC)]\n    # sort the list\n        # for p in sorted\n    # convert indexes to back to letters in the alphabet\n        # chr(p[1]+A)\ninvert = lambda r : [chr(p[1]+A) for p in sorted([(r[i],i) for i in range(NC)])]\n\n# extend the rotor set to include inverted ciphers\n    # In reversed order, as well\n    # fas med slo ref slo med fas\nrs += [invert(r) for r in rs[2::-1]]\n\n# encrypt letter `c` with rotors in default* positions\nrotors = lambda c : [c := rapply(c,r) for r in rs][-1]\n\n# default position a,b,c -&gt; r,f,o, respectively\nassert([\n    rotors('A'),\n    rotors('B'),\n    rotors('C')\n] == ['R','F','O'])\n\n# shift letter `c` forward `n` letters in alphabet\nnshift = lambda c, n : chr((ord(c) - A + n) % NC + A)\n\n# allow rotor rotations\n    # fast spins every letter\n    # medi spins every time fast loops back NC-&gt;0\n    # slow \"\"               medi \"\"\nshifts = lambda l, n : [\n    l % NC, l // NC % NC, l // (NC*NC) % NC,\n    0,\n    l // (NC*NC) % NC, l // NC % NC, l % NC\n][n]\n\n# combine shift apply? don't know what to call\nshiply = lambda c, n, r : nshift(rapply(nshift(c,n),r),-n)\n# or if you prefer\nshiply = lambda c, n, r : chr((ord(r[(ord(c)-A+n)%NC])-A-n)%NC+A)\n\n# single letter enigma, with number of previous letters `l`\nletter = lambda c, l : [c := shiply(c,shifts(l,i),rs[i]) for i in range(len(rs))][-1]\n\n# phrase\n    # enigma starts with an single rotation before first encryption.\nenigma = lambda s : \"\".join([letter(s[i],i+1) for i in range(len(s))])\n\n# test\nassert([\n    enigma(\"AAA\"),\n    enigma(\"ABC\"),\n    enigma(\"ZLC\")\n] == [\"ZLC\",\"ZRA\",\"AAA\"])\n\nif __name__ == \"__main__\":\n    import sys\n    print(enigma(sys.argv[1]))\n\nHere is an example of how it is used to print “HELLOWORLD”:\n\npython3 enigma.py MNBOASVTTB\n\n\n\nVisual Show\n\n\nSingle Cipher\n\nVisualize a cipher as mapping a A-Z to A-Z.\n\nSay, ‘E’ becomes ‘J’\n\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J\n\n\nIterative Cipher\n\nWe can apply ciphers iteratively.\n\nSo the output ‘J’ of the first cipher is input to the next cipher.\n\n\n ____________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher[0]\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J&gt;&gt;&gt;&gt;J               \n __________|_________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[          |                 ]  \n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # cipher[1]\n ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n           B\n\n\nAll Ciphers\n\nEnigma ciphers/rotors are named:\n\nFast\nMedium\nSlow\nReflect, which has special properties\n\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J&gt;&gt;&gt;&gt;J               \n __________|_________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[          |                 ]  \n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   B&lt;&lt;&lt;&lt;&lt;&lt;&lt;B\n __|_________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[  |                         ]\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   K&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n            M\n\nReflector\n\nWe note that with the reflector:\n\nIf we take the alphabet and find a corresponding letter in the cipher, or\nIf we take the cipher and find a corresponding letter in the alphabet\nWe get the same letter…\n\nThis is…\n\nThe special property of the reflector, and\nHow we will re-use the fast, medium, and slow ciphers.\n\n\n\n\n            K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n            M\n\n              K\n _____________|______________\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n[             |              ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n              M\n\n\n\n\n\nDecryption\n\nAfter the reflect cipher, values are decrypted\n\nA letter’s place in the cipher, not alphabet, is found\nThis location is used to determine the letter in the alphabet\nEssentially, a change from mapping the alphabet to a cipher, and vice versa.\n\n‘H’ comes out of the reflector\n\n‘H’ is is index 7 letter of the alphabet\nSo in the next cipher, we’ll look up the index 7 letter of the cipher\nIt is now more helpful to think of an index than a letter - that is what changes here.\n\n\n            K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    M&lt;&lt;&lt;&lt;&lt;&lt;&lt;M\n ___|________________________\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n[   |                        ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C\n\n\nInversion\n\nWe can separately calculate what cipher would correspond to the “inverted” slow cipher.\n\nWe take all the slow-&gt;alphabet pairs\nWe alphabetize the pairs by the first letter\nThe output is no longer alphabetized, as is a new cipher.\n\nIt is left to the student as a design decision whether do\n\n“Decrypt” via a provided cipher, or\n“Invert” a provided cipher, and apply the inverted cipher.\n\nStudents should consider the complexity of both methods.\n\n\n\n    M\n ___|________________________\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n[   |                        ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C\n\n              M\n _____________|______________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[             |              ]\n[ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1\n ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n              C\n\n\n\n\nIterating Back\n\nThe next cipher is “medium” and its index 7 letter is ‘U’\n\n‘U’ is the index 20 letter of the alphabet.\n\n\n\n\n    M\n ___|________________________\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n[   |                        ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;C\n ________________|____________\n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n[                |           ]  \n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾\n                 P\n\n              M\n _____________|______________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[             |              ]\n[ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1\n ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;C\n ___|________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[   |                        ]  \n[ AJPCZWRLFBDKOTYUQGENHXMIVS ] # medium^-1\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    P            \n\n\n\n\nEnd-to-end\n\nThe entire end-to-end cipher application can be visualized as follows…\n\n\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J&gt;&gt;&gt;&gt;J               \n __________|_________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[          |                 ]  \n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   B&lt;&lt;&lt;&lt;&lt;&lt;&lt;B\n __|_________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[  |                         ]\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   K&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    M&lt;&lt;&lt;&lt;&lt;&lt;&lt;M\n ___|________________________\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n[   |                        ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;C\n ________________|____________\n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n[                |           ]  \n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾\n         P&lt;&lt;&lt;&lt;&lt;&lt;&lt;P\n ________|___________________\n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast\n[        |                   ]  \n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n         H\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J&gt;&gt;&gt;&gt;J               \n __________|_________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[          |                 ]  \n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   B&lt;&lt;&lt;&lt;&lt;&lt;&lt;B\n __|_________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[  |                         ]\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   K&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n            M&gt;M\n _____________|______________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[             |              ]\n[ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1\n ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;C\n ___|________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[   |                        ]  \n[ AJPCZWRLFBDKOTYUQGENHXMIVS ] # medium^-1\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    P&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;P    \n ________________|___________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[                |           ]  \n[ TAGBPCSDQEUFVNZHYIXJWLRKOM ] # fast^-1\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾\n                 H\n\n\nFor the remainder of the write-up, I will assume without loss of generality the usage of inverted ciphers.\n\n\n\n\nRotors Show\n\n\nSingle Rotor\n\nVisualize a rotor as mapping a A-Z to A-Z.\n\nSay, ‘E’ becomes ‘J’\n\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J\n\n\nRotation\n\nWe call these things rotors because they rotate:\n\nThe mapping from e.g. index i of the input to index j of the output is unalterated\n\nFor example, ‘E’ is index 5 and maps to ‘J’ at index 10, both of the alphabet\n\nHowever, we can change the rotors as follows:\n\nThe input index is shifted forward by some shift value n\nThis input index is mapped to an output index\nThis output index is shifted backward by the same n\n\n\nLet’s visualize with n = 3\n\n      E\n      |&gt;&gt;&gt;\n      EFGH\n      &gt;&gt;&gt;|\n ________|___________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[        |                   ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n         P\n      &lt;&lt;&lt;|\n      MNOP \n      |&lt;&lt;&lt;\n      M\n\n\nAs ciphers\n\nIt is worth noting this identical to generating ciphers that start an the index n letter of the alphabet and wrap around from Z to A.\n\n\n\n      E\n      |\n      |&gt;&gt;&gt;\n      EFGH\n      &gt;&gt;&gt;|\n         |\n         |\n ________|___________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[        |                   ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n         P\n         |\n      &lt;&lt;&lt;|\n      MNOP \n      |&lt;&lt;&lt;\n      |\n      M\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ DEFGHIJKLMNOPQRSTUVWXYZABC ] # forward(3)\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      H&gt;&gt;H\n ________|___________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[        |                   ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n         P&gt;&gt;&gt;&gt;&gt;&gt;&gt;P\n ________________|___________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[                |           ]  \n[ XYZABCDEFGHIJKLMNOPQRSTUVW ] # forward(-3)\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾\n                 M\n\n\nFor the remainder of the write-up, I will assume without loss of generality that rotations can be understood without considering them to be ciphers.\n\n\nFor Enigma\n\nThe Enigma machine triggers rotor rotations every time a letter is encrypted.\nThey rotate as follows\n\nBefore a letter is encryped, the fast rotor rotates forward once.\n\nSo before the first encryption,\n\n(n = 0 : A-&gt;A) becomes (n = 1 : A-&gt;B) before the fast rotor.\n\nTo understand this, the rotation must be applied at two points:\n\nIf the fast rotor “loops back” from a rotation from (n = 25 : A-&gt;Z) to a non-rotation of (n = 26 = 0 : A-&gt;A), then\n\nThe medium rotor advances once, from e.g. (n = 0 : A-&gt;A) to (n = 1 : A-&gt;B)\n\nWhen medium loops back, slow advances once.\nThere are no rotations related to the reflector.\n\nImagine we have typed 29 letters:\n\nthe fast rotor has progressed 29 times and progresses once more before encryption.\n\nSo shift by n = 30, or n = 30-26 = 4.\n\nthe medium rotor progresed 1 time,\nand slow rotor progressed not at all.\n\nSteps labelled “adjust” are not computational\n\nI change horizontal alignment of letters to align the rotors.\nThis is a visual change only, as it was in “Visual” above.\n\n\n     X\n     |\n=====|===========================================\n=    X                                          =\n=    |&gt;&gt;&gt;&gt;                                      =\n=    XYZAB                           # rotate   =\n=    &gt;&gt;&gt;&gt;|                                      =\n=        B                                      =\n=      __|_________________________             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet = \n=     [  |                         ]            = # fast\n=     [ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast     =\n=      ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾             =\n=        D                                      =\n=    &lt;&lt;&lt;&lt;|                                      =\n=    ZABCD                           # rotate   =\n=    |&lt;&lt;&lt;&lt;                                      =\n=    Z                                          =\n=====|===========================================\n     |\n     Z&gt;Z                             # adjust\n       |\n=======|=========================================\n=      Z                                        =\n=      |&gt;                                       =\n=      ZA                            # rotate   =\n=      &gt;|                                       =\n=       A                                       =\n=      _|__________________________             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =\n=     [ |                          ]            = # medium\n=     [ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium   =\n=      ‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾             =\n=       A                                       =\n=      &lt;|                                       =\n=      ZA                            # rotate   =\n=      |&lt;                                       =\n=      Z                                        =\n=======|=========================================\n       |\n       Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Z   # adjust\n                                 |\n=================================|===============\n=                                Z              =\n=                                |              =\n=                                Z   # rotate   =\n=                                |              =\n=                                Z              =\n=      __________________________|_             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =\n=     [                          | ]            = # slow\n=     [ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow     =\n=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾             =\n=                                J              =\n=                                |              =\n=                                J   # rotate   =\n=                                |              =\n=                                J              =\n=================================|===============\n                                 |\n                 J&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;J   # adjust\n       __________|_________________\n      [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n      [          |                 ]              # reflect\n      [ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n       ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n                 O&gt;&gt;&gt;&gt;O              # adjust\n                      |\n======================|==========================\n=                     O                         =\n=                     |                         =\n=                     O              # rotate   =\n=                     |                         =\n=                     O                         =\n=      _______________|____________             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =\n=     [               |            ]            = # slow\n=     [ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1  =\n=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾             =\n=                     M                         =\n=                     |                         =\n=                     M              # rotate   =\n=                     |                         =\n=                     M                         =\n======================|==========================\n                      |\n                    M&lt;M              # adjust\n                    |\n====================|=============================\n=                   M                           =\n=                   |&gt;                          =\n=                   MN               # rotate   =\n=                   &gt;|                          =\n=                    N                          =\n=      ______________|_____________             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =\n=     [ |            |             ]            = # medium\n=     [ AJPCZWRLFBDKOTYUQGENHXMIVS ] # medium^-1=\n=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾             =\n=                    T                          =\n=                   &lt;|                          =\n=                   ST               # rotate   =\n=                   |&lt;                          =\n=                   S                           =\n====================|============================\n                    |\n                    S&gt;&gt;&gt;&gt;&gt;S          # adjust\n                          |\n==========================|======================\n=                         |                     =\n=                         S                     =\n=                         |&gt;&gt;&gt;&gt;      # rotate   =\n=                         STUVW                 =\n=                         &gt;&gt;&gt;&gt;|                 =\n=      _______________________|____             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet = \n=     [                       |    ]            = # fast\n=     [ TAGBPCSDQEUFVNZHYIXJWLRKOM ] # fast^-1  =\n=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾             =\n=                             R                 =\n=                         &lt;&lt;&lt;&lt;|                 =\n=                         NOPQR       # rotate  =\n=                         |&lt;&lt;&lt;&lt;                 =\n=                         N                     =\n==========================|======================\n                          |\n                          N\n\n\n\n\nchar * Show\n\n\nHello, world!\n\nI start “enigma.c” with “hello.c” from Alpine\n\nThis file will successfully create an executable, not correctly encrypt or decrypt.\nTry it out with the autograder container.\n\n\n\n\nenigma.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"hello, world\\n\");\n    return 0 ;\n}\n\n\n\nNo strings attached\n\nIn C there are no strings.\n\nThere are instead things called char *\nSay “character star”\nWe attach the * to the variable name\n\nWe’ll revisit this later - it will make sense.\n\nThat is, an array, or buffer, of characters\n\nNot quite a list - closer to a NumPy array.\n\n\nIt matters what things are called.\n\nIn C we must say what kind of thing a variable is when we “declare” the variable.\nLater we use the variable, without specifying the kind of thing\nBut we cannot change its kind.\nC variable declaration is like how Python function declaration, with def\n\nWe will use format print and variable declarations to introduce char *\n\nWe note that Python print appends a newline and C printf does not.\n\nI specify an non-newline terminator in Python for equivalence.\n\n\n\n\n\n\n\ntest.py\n\nx = 1\nprint(f\"{x:d}\", end=\"\")\n# we can reassign x and change its type\nx = \"hello world\"\nprint(f\"{x:s}\", end=\"\")\n\n\n\n\ntest.c\n\nint n = 1;\nprintf(\"%d\", n) ;\n/* we have to make a new variable of novel type */\nchar *m = \"hello world\";\nprintf(\"%s\", m) ;\n\n\n\n\nBoth have the same output:\n\nThe numerical value “1” and the string value “hello world” on the same line.\n\n\n1hello world\n\nYou can update “hello.c” to use a format print.\n\nThis will form the basis of output in this assignment.\n\n\n\n\nenigma.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    char *str = \"hello, world\";\n    printf(\"%s\\n\", str);\n    return 0 ;\n}\n\n\n\nConstants\n\nThe C language has a form of support for constants\n\nThese are values that are fixed when the executable is created.\nThey may not be reassigned by any line of code.\n\nThe #define “pre-processor directive” is used to create constants.\n\n#define is like #include which is somewhat like import\nIt defines new values, which are not variables, for use in the .c file\nThe pre-processor reads .c files before the executable is created.\n\nWe can also use #define for strings, such as the rotor strings.\n\nBy convention, constants are named in all caps, like ROTORS\nI used a single string of all rotors concatenated.\nYou may do whatever works for you.\n\n\n\n\nenigma.c\n\n#include &lt;stdio.h&gt;\n\n#define STR \"hello, world\"\n\nint main() {\n    printf(\"%s\\n\", STR);\n    return 0 ;\n}\n\n\nAn astute learner will note that constants need not be computed within an executable.\nIt is not uncommon to compute constants in a different file, or even in a different language.\n\nMy ROTORS constant was computed in Python.\nI used Python file operations to save this computation to “enigma.c”\nVia vim I used the “yank” and “paste” features to move it to the top of “enigma.c”.\n\n\n\n\nJust a little bit\n\nIn C, characters aren’t printing characters.\n\nThey are “just bits” - a collection of ones and zeroes, or a number.\nWe attach the * to the variable name\n\nWe’ll revisit this latter - it will make sense.\n\nThis differs from Python, which uses strings of length one.\n\nThis is sketchy, sometimes.\nStrings are a non-numeric.\n\n\nIf we want to use a numerical value as a printing character, we use a format print.\nC characters use single quotes, and C strings use double quotes.\n\n\n\n\n\ntest.py\n\nx = ord('A')\nprint(f\"{x:d}, {x:x}, {x:c}\")\n\n\n\n\ntest.c\n\n/* We do not use anything like ord() */\nprintf(\"%d, %x, %c\\n\", 'A','A','A');\n\n\n\n\nBoth have the same output:\n\nThe decimal (base 10), hexadecimal (base 16), and unicode/ascii representations of the same value.\n\n\n65, 41, A\n\nAn astute learner will note that this insight is sufficient to implement a rotor.\n\n\n\n\n\nC loop Show\n\n\nBuilding Character\n\nThe core complication of the Enigma machine was that it was an iterative cipher.\nLet’s practice iteration by iterating over a char *\nWe note:\n\nIn C there is no string, list, tuple, generator, dictionary, or set type.\nIn Python, for loops require one of these types.\nHenceforth we refer to the C for loop as a “for loop” and the Python for loop as a “for each loop”.\n\nA for loop is composed of three components:\n\nInitiate\nTerminate\nIterate\n\nSyntactically, they are structured follows:\n\nfor ( 𝘪𝘯𝘪𝘵𝘪𝘢𝘵𝘦; 𝘵𝘦𝘳𝘮𝘪𝘯𝘢𝘵𝘦; 𝘪𝘵𝘦𝘳𝘢𝘵𝘦) { \n    𝘤𝘰𝘥𝘦 𝘣𝘭𝘰𝘤𝘬\n}\n\nPrint 0 through 9\n\nint i ;\nfor ( i = 0; i &lt; 10; i++) { \n    printf(\"%d\\n\", i);\n}\n\nWe now explore each component.\nAn astute learner will note that this insight is sufficient to implement the entire enigma machine.\n\nRemaining headings provide guidance on common pitfalls.\nIf you can do enigma now, skip to “C args”\n\n\n\nIterate\n\nThe last of the three for loop components, the iterator, is closest to the Python for each loop.\nThe iterator statement is run each time the loop completes, after the internal code block is run.\nAny statement may be placed in this position.\nThe most common is i++, a special shorthand for incrementation.\n\nIt is logically equivalent to Python i += 1.\n\nExample: Find the length of the first word in a string with an iterator only:\n\nIncrease a string index by one within the iterator.\nInclude an if statement in the for loop code block.\nUse a return statement in the if statement code block.\n\n\nchar *str = \"hello world\";\nint i = 0;\nfor ( ; ; i++) {\n        if (str[i] == ' ') {\n                printf(\"%d\\n\", i);\n                return 0;\n        }\n}\n\n\nTerminate\n\nUnlike Python strings, C character arrays have no length.\nRather, they end with a special character.\n\nThis character is called the null terminator\nIt is non-printing (not visible).\nIt is denoted explicitly via '\\0'\n\nSingle quotes to denote a character.\nA backslash “escape” character to denote a special character.\nA zero to denote it is “null”, “zero”, or “nothing”\n\nIt is numerically equal to zero.\n\nUnlike Python booleans, C has no boolean type.\n\nRather, it has truthiness, akin to Python if statements with numerical conditions.\nThe numerical value zero is false.\nAll other numerical values are true.\n\nThe termination statement causes the loop to end when it is equal to zero.\nExample: Find the length of the first word in a string with a terminator only:\n\nCheck if a character is the null terminator in the termination statement.\nInclude an incrementation in the for loop code block.\n\n\nchar *str = \"hello world\";\nint i = 0;\nfor ( ; str[i] ; ) {\n        i++;\n}\nprintf(\"%d\\n\", i);\nreturn 0;\n\nThis is also a good example of how sometimes the C for loop may have no code block.\n\nHere is a logically equivalent way to measure the length of a char * serving as a string.\n\n\nchar *str = \"hello world\";\nint i = 0;\nfor ( ; str[i] ; i++ ) { }\nprintf(\"%d\\n\", i);\nreturn 0;\n\nThis is also a good chance to test what order the terminator and iterator are checked.\n\nThe terminator is checked before the iterator.\nThe iterator does not if the terminator is true.\n\nThis matters a lot in this case, where the length calculated would be off by one.\n\n12 instead of 11\nThe value of the iteration variable i is increased the same time the terminator is checked.\nSo the null terminator is at index 11 but this C code would print the numerical value 12.\n\n\nchar *str = \"hello world\";\nint i = 0;\nfor ( ; str[i++] ; ) { }\nprintf(\"%d\\n\", i);\nreturn 0;\n\n\nInitiate\n\nThe initiator allows setting a variable to a certain value before beginning a loop.\nI mostly use it when I have more than one loop, and want to use i for both.\nHere is the above example, with an iniatiator.\n\nchar *str = \"hello world\";\nint i ;\nfor ( i = 0; str[i++] ; ) { }\nprintf(\"%d\\n\", i);\nreturn 0;\n\nThe following is permissable in all modern forms of C, but was not an initial feature of the language.\n\nAs a rule, I try not to declare variables in the initializer so my code works on older devices.\nIt also makes writing a C compiler easier, if you ever plan to do that.\n\n\nchar *str = \"hello world\";\nfor ( int i = 0; str[i++] ; ) { }\nprintf(\"%d\\n\", i);\nreturn 0;\n\n\n\n\n\nArrays Show\n\n\nCollections\n\nC lacks any collection type (list, set, tuple, string)\n* notation is used instead\n\n* denotes the location of a some value\nThe type of this value gives its size\nSuccessive values are at successive locations\nThese are memory addresses.\n\n[] notation may also be used\n\nWe simply include the length within brackets.\n\nWe don’t worry about any of that for now.\nYou will likely want to use a collection on Enigma:\n\nRotor rotations\nRotors themselves\nI don’t know, for fun.\n\nC array notation is very similar to Python set notation, but maintains order\n\nYou are responsible for keeping track of the length.\n\n\nchar carray[5] = {'a', 'e', 'i', 'o', 'u'};\nint iarray[5] = {2, 4, 8, 16, 32};\nint i;\nfor (i = 0; i &lt; 5; i++) {\n    printf(\"%c %d\\n\", carray[i], iarray[i]);\n}\n\nCharacter arrays\n\nUnlike Python, where a list of characters and a string of characters differ, in C, an array of characters and a “string” of characters are identical.\n\nchar carray[5] = {'a', 'e', 'i', 'o', 'u'};\nchar string[5] = \"abcde\";\nint i;\nfor (i = 0; i &lt; 5; i++) {\n        printf(\"%c %c\\n\", carray[i], string[i]);\n}\n\nC strings are implicitly null terminated, so there is a minor difference, but that is immaterial here.\n\nHow would you check if a string is null terminated?\n\n\n\n\n\n\n\nC math Show\n\n\nInteger Division\n\nIn C, there are numerous integer data types, including int and char\nAll use integer division by default.\nTest as follows:\n\nint i;\nfor (i = 0; i &lt; 5; i++) {\n        printf(\"%d / %d -&gt; %d\\n\", i, 2, i / 2);\n}\n\nThe results are clear:\n\n0 / 2 -&gt; 0\n1 / 2 -&gt; 0\n2 / 2 -&gt; 1\n3 / 2 -&gt; 1\n4 / 2 -&gt; 2\n\n\nModulo\n\nBoth C and Python have a % operator\n\nIn Python it is the “more mathematically correct” modulo operation\nIn C it is the less common remainder operation.\n\nThe differences were non-obvious and led to a pernicious bug in my enigma.c\n\n\nPython %\n\nFirst, test Python\n\n\n\nmodulo.py\n\n[print(f\"{i:2d} % 3 -&gt; {i%3:d}\") for i in range(-5,5)]\n\n\nWe see the predictable result.\n\n-5 % 3 -&gt; 1\n-4 % 3 -&gt; 2\n-3 % 3 -&gt; 0\n-2 % 3 -&gt; 1\n-1 % 3 -&gt; 2\n 0 % 3 -&gt; 0\n 1 % 3 -&gt; 1\n 2 % 3 -&gt; 2\n 3 % 3 -&gt; 0\n 4 % 3 -&gt; 1\n\n\nC %\n\nNow, test C\n\n\n\nremainder.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n        int i;\n        for (i = -5; i != 5; i++) {\n                printf(\"%2d %% %d -&gt; %2d\\n\", i, 3, i % 3);\n        }\n        return 0;\n}\n\n\nWe see the predictable result.\n\n-5 % 3 -&gt; -2\n-4 % 3 -&gt; -1\n-3 % 3 -&gt;  0\n-2 % 3 -&gt; -2\n-1 % 3 -&gt; -1\n 0 % 3 -&gt;  0\n 1 % 3 -&gt;  1\n 2 % 3 -&gt;  2\n 3 % 3 -&gt;  0\n 4 % 3 -&gt;  1\n\nUnlike Python, C % may generate negative results.\nThere are a number of ways to deal with that.\n\n\n\nPythonic % in C\n\nWith thanks to Stack Overflow\n\nprintf(\"%2d Py%% %d -&gt; %d\\n\", i, 3, ((i % 3) + 3) % 3);\n\nThis gives necessarily positive values.\n\n-5 Py% 3 -&gt; 1\n-4 Py% 3 -&gt; 2\n-3 Py% 3 -&gt; 0\n-2 Py% 3 -&gt; 1\n-1 Py% 3 -&gt; 2\n 0 Py% 3 -&gt; 0\n 1 Py% 3 -&gt; 1\n 2 Py% 3 -&gt; 2\n 3 Py% 3 -&gt; 0\n 4 Py% 3 -&gt; 1\n\n\n\n\n\nC args Show\n\n\nArguments\n\nThe reference Python contains the following snippet:\n\nif __name__ == \"__main__\":\n    import sys\n    print(enigma(sys.argv[1]))\n\nThis is roughly equivalent to printing the return result of the enigma function within a function called main.\nThis is close to C, but we haven’t introduced a way to use command line arguments.\nLet’s look at a minimal Python example.\n\n\nPyEcho\n\n\npyecho.py\n\nimport sys\nprint(sys.argv[1])\n\n\nWe use as follows:\n\npython3 pyecho.py \"hello world\"\n\nWe can construct the same within C.\n\n\n\nCEcho\n\nThe Python sys module contains many features present by default in a systems programming language.\nOne such is argv, a vector (in the mathematical sense) of arguments.\n\nThese are command line arguments.\nIn Python a list of strings\nIn C an array of char *\nThe zeroth argument is the name of the Python script or C executable\n\nThere is additionally something called argc, an integer count of arguments.\n\nIn C this is needed to know the length of the vector\nIn Python it is redundant, but potentially useful\n\nWe have thus far written main with no arguments, so we also introduce how to write functions with arguments.\n\nC function arguments are identical to Python function arguments\nAs with other variables, C function argument variables must be declared with a type\nUsing functions will make writing C much easier.\n\n\n\n\ncecho.c\n\n#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv) {\n        printf(\"%s\\n\", argv[1]);\n        return 0;\n}\n\n\nYou may wish to compile then try the following:\n\ngcc cecho.c -o cecho\n\nNo arguments, which gives a segmentation fault, a type of error when you try to read something that doesn’t exist\n\n./cecho\n\nOne argument, which is printed.\n\n./cecho hello\n\nTwo arguments, of which one is printed.\n\n./cecho hello world\n\nTwo words as a single argument using quotes.\n\n./cecho \"hello world\"\n\nYou may note that Python has all the same features.\n\n\n\n\n\n\nTester Show\n\n\nPodman\n\nI am providing the following Containerfile, which will serve as a minimal autograder\n\nIt sets up an Alpine container.\nIt downloads a Python script to test.\nIt copies in “enigma.c” from your system.\n\n\n\n\nContainerfile\n\nFROM alpine\n\nRUN apk add gcc libc-dev python3 curl\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/main/enigma/tester.py -o tester.py\n\nCOPY enigma.c .\n\n\n\nUsage\n\nI built my container via:\n\npodman build -t tester .\n\nI tested my code via:\n\npodman run tester python3 tester.py\n\nIf the above script returns “Perfect!” you are done.\n\nCreate a Gist with an “enigma.c”.\nEmail me the url of your Gist, it will look something like, from your official school email:\n\n\nhttps://gist.github.com/cd-public/a840e95e71ac7309a53ab0bb1282ba40\n\nI will review the most recent version prior to the due date.\n\n\n\nVim trick:\n\nYou will probably want to work in a container with vim and also test your code in the same container.\n\nIt is possible to create a second command line tab that is also within the container.\n\nConsult podman documentation - many ways to do this.\n\nI recommend using vim built-in :term command, which splits the screen into a vim editor and a vim terminal.\nYou can move between windows using ctrl+w - if it doesn’t work, Google it.\n\n\n\n\nPodman trick:\n\nYou will probably want to create one container then work in that container until you finish.\npodman run will create a new container each time, which is not what you probably want.\nThe following recycles the previous container, mostly.\n\nRead more: Stack Overflow\n\n\npodman start -a -i `podman ps -q -l`"
  },
  {
    "objectID": "keygen.html",
    "href": "keygen.html",
    "title": "KeyGen",
    "section": "",
    "text": "Review Show\n\n\nGoal: Public Key Encryption\n\n\n\nReview:\nNewish:\n\n\n\n\n- Public key encryption\n- RSA in C\n\n\n- Fermat’s little theorm\n- .pem files\n\n\n- RSA\n\n\n\n\n\nThere are no required exercises of this lab.\nIt is supplementary material to the RSAinC homework.\n\nThis lab will generate the key \\((n, e, d)\\)\n\n\\(n\\), the modular base, part of the public and private key.\n\\(e\\), the encryptor, part of the public key.\n\\(d\\), the decryptor, part of the private key.\n\n\nRSAinC will additional require the usage of these to encrpyt and decrypt text.\n\nRSAinC will require two .c files, the first of which is keygen.\nI would do all my work for this lab in keygen.c in an rsainc folder.\nFor this lab, I provide an intermediate autograder, as a Python script, to support partial homework completion.\n\nThe script is under the “32 bit” heading.\n\n\n\n\n\n\n\nPodman Show\n\n\n\nSetup\n\nFor this lab, I used the following Containerfile\n\nSame as the printb lab\n\n\n\n\nContainerfile\n\nFROM ubuntu\n\nRUN apt update && apt install gcc vim python3 astyle -y\n\n\nMostly, having astyle and python3 is nice.\n\n\n\n\nPython Show\n\n\nThere is a complete, correct, RSA implementation embedded in the Fermat slides.\n\nI extracted .qmd to .ipynb and .ipynb to .py.\nI editted lightly for readability (removed comments).\n\n\n\n\nfermat.py\n\ndef sixkp1(k): # 6k+1\n    is_prime = lambda n : any([n % i for i in range(2, int(n **.5))])\n    candidate = 6 * k + 1\n    while not is_prime(candidate):\n        candidate += 6\n    return candidate\n\ndef lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return a * b // gcd(a, b)\n\ns = \"C\" # a random string\nm = ord(s) # to number\n\nhide_p = lambda: sixkp1(10)\nhide_q = lambda: sixkp1(15)\nn = hide_p() * hide_q()\n\nhide_λ = lambda: lcm(hide_p() - 1,  hide_q() - 1)\n\ne = 65537 # encryptor\n\ndef find_d():\n    d = 1\n    while 1 != (d * e % hide_λ()):\n        d += 1\n    return d\n\ndef modexp(m, e, n):\n    if e == 0:\n        return 1\n    if e == 1:\n        return m % n\n    if e % 2:\n        return (m * modexp(m*m % n, e//2, n)) % n\n    return  modexp(m*m % n, e//2, n) % n\n\nc = modexp(m, e, n) # ciphertext\n\nchr(modexp(modexp(ord(\"C\"), e, n), find_d(), n))\n\n\nI did not show this in class, but it’s probably easier to think of as follows:\n\n# make_encrypt takes an \n# * encryptor e and \n# * modular base n and \n# returns a function the performs public key encryption.\n\nmake_encrypt = lambda e, n : lambda m : modexp(m,e,n)\n\nencrypt = make_encrypt(e,n)\ndecrypt = make_encrypt(find_d(),n)\n\nchr(decrypt(encrypt(ord(\"C\"))))\n\nThere’s no graceful (or even ungraceful) way to retuun functions in C, but I thought this was really cool ¯\\_(ツ)_/¯\n\n\n\n\n6k + 1 Show\n\n\nImplement primality generation in C.\nYou may use any method but I recommend \\(6k + 1\\)\n\n\n\nfermat.py\n\ndef sixkp1(k): # 6k+1\n    is_prime = lambda n : any([n % i for i in range(2, int(n **.5))])\n    candidate = 6 * k + 1\n    while not is_prime(candidate):\n        candidate += 6\n    return candidate\n\n\nFor BigRSA, you will primality testing for the 4096_t.\nLikewise, for BigRSA, you will need fairly narrow bounds on precision, or how many bits your primes take up.\nThat said, for now the following should be sufficient:\n\nuint64_t sixkp1(uint64_t k) {\n  /* Your code here (and update the return statement)  */\n  return 6 * k + 1;\n}\n\n\n\n\n\n\nAdvanced Primality Testing\n\n\n\n\nAdvanced students may wish to implement sieves but should not do so unless they achieve a memory safe implementation, likely utilizing (enormous) buffers for the file system.\nAdvanced students may with to implement Pocklington-Lehmer primality testing, for which I am not familiar with memory usage.\n\nFermat primality testing is a component of Pocklington-Lehmer, a fun callback to lecture.\n\nA student implementing either will be invited to deliver a guest lecture on their implementation in a future class session or other venue.\n\n\n\n\n\n\ngcdlcm Show\n\n\nImplement lcm - least common multiple - calculation in C.\nAs with \\(6k+1\\), I will make a non-binding to calculate the gcd - greatest common denominator - as your method.\n\n\n\nfermat.py\n\ndef lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return a * b // gcd(a, b)\n\n\nFor BigRSA, this operation will require considerably optimizations related to the “Extended Euclidean Algorithm”.\nNote that inner functions are non-standard C and not permitted in C89.\nThat said, for now the following should be sufficient:\n\nuint64_t gcd(uint64_t a, uint64_t b) {\n  /* Your code here (and update the return statement)  */\n  return 1;\n}\n\nuint64_t lcm(uint64_t a, uint64_t b) {\n  /* Your code here (and update the return statement)  */\n  return a * b;\n}\n\n\n\n\n\n\nOptimizations and Assertions\n\n\n\n\nAdvanced students may wish to apply a series of tests, perhaps as assert statements, to monitor overflow during this calculation.\n\nWe note that the lcm can be larger than two values that are implicitly only bounded by the 64 bit size.\nHow should we manage this?\n\\(\\exists\\) proofs of correctness, given starting assumptions.\n\nAdvanced students may wish to implement the extended Euclidean algorithm without using signed integers, which I found to be non-trivial but not impossibly difficult.\n\n\n\n\n\n\nKeyGen Show\n\n\nA Key in 3 Parts\n\nWe recall that the private key minimally contains:\n\nn, a modular base\ne, an encryptor, and\nd, a descryptor.\n\nBased on the KeyGen lab, it should be uncomplicated to calculate these values for 64 bit keys.\nWe will use .bad instead of .pem and insecurely store these values in plaintext.\nWe will then make executables to generate .bad and encrypt content provided a .bad\n\nWe name a .bad so helpfully we don’t use it by accident.\n\nWe will naively print 3 lines of hexademical values, n, e, then d.\nWe will write them to a 5-line file as follows:\n\nThe first line is the precise header text.\nThe second line is the n value in hexadecimal.\nThe third line is the e value, which is 10001.\nThe fourth line is the d value, which should be kept secret.\nThe fifth and final line is the precise footer text.\n\n\n\n\nunsafe.bad\n\n-----BEGIN UNSAFE PRIVATE KEY-----\n95a61f99198bd8e9\n10001\nfbea5e6a3ed31e8f\n-----END UNSAFE PRIVATE KEY-----\n\n\nThis format is based on the .pem format\n\nFor privacy enhanced email.\nUsed to store keys generated by ssh-keygen.\nIt does not split up n, e, and d\nMore on it latter.\n\nFor reference This is a 1024 bit key made by ssh-keygen -b 1024\n\nThis 1024 bit key is too small to be regarded secure.\nSo our 32 bit keys are far too small to be regarded secure.\nAnd separating components may be regarded as less secure.\n\n\n\n\n~/.ssh/id_rsa\n\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAlwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAIEAv97YRG/TOK6VnXi3LK8N6z/meRvSo5vkjjm0YUIV5zEx8OyZUdTV\ncu114ll/eC4ZgrW3bISzyIO0MB5rnt8oPcO5uiSJIqRSKbd2LNJdkefIpMe4LJJLuzfB4z\nxqtG9vgsxrJNYUMJ6Vsn5YKRQCaCZQdKxMPx+itHkPeQLWQ40AAAIQ0XWwz9F1sM8AAAAH\nc3NoLXJzYQAAAIEAv97YRG/TOK6VnXi3LK8N6z/meRvSo5vkjjm0YUIV5zEx8OyZUdTVcu\n114ll/eC4ZgrW3bISzyIO0MB5rnt8oPcO5uiSJIqRSKbd2LNJdkefIpMe4LJJLuzfB4zxq\ntG9vgsxrJNYUMJ6Vsn5YKRQCaCZQdKxMPx+itHkPeQLWQ40AAAADAQABAAAAgEOvSh2CUU\nHKnK7rWbrimgdmCFiqzvi2Ur81bgNtO6rN+O8jl8Z9TTr4t8A8kDIGGSu6DNW0TnOqulLL\nOG3YDSp4UqMyK1ofNE9ikVFlUEyneNtcIoAtRElcqzwV65yQpujqRKtA0t2HxxRTREX4Jb\n6dHkAPnVC9Yvjede203GVhAAAAQAd79ekwwt++/m6PadnZeLvvWUzHZqkjgOjN5M3a1uS8\n82Y2LQ1oO8hmVTc4d/Gy8+3YkJ480Kjpxm7nirTdYf4AAABBAOC1HxQeZaQcaK7oEulsAL\nw3tvwxZXcTAHGyrwXAhwbEym5V/naUGIB8QWlsbG3tZB03V0qnregcYdtQRXTy1KkAAABB\nANqXE1Toyq5aPp2DqN5Il1zTK5gmDOcmil+ao8M93Zc5ZDAANG40RcEDBHj1xxMzNCwJDo\nXTYW2ynMpXNi5QokUAAAAUdXNlckBERVNLVE9QLVRITVMyUEoBAgMEBQYH\n-----END OPENSSH PRIVATE KEY-----\n\n\n\n\n\nPubKey Show\n\n\nA Key in 2 Parts\n\nWe recall that the public key contains, and should only contain:\n\nn, a modular base, and\ne, an encryptor\n\nBased on the KeyGen lab, it should be uncomplicated to calculate these values for 64 bit keys.\nWe will use .pub instead of .pem or .bad\n\nNot a huge deal how these are stored, actually.\nThe key itself though, is still unsafe to use.\n\nWe will naively print 2 lines of hexademical values, n, then e.\nWe will right them to a file prefixed and suffixed as follows:\n\n\n\nunsafe.pub\n\n-----BEGIN UNSAFE PUBLIC KEY-----\n95a61f99198bd8e9\n10001\n-----END UNSAFE PUBLIC KEY-----\n\n\nUpdate your keygen.c such that each time it runs it:\n\nGenerates a new unsafe.bad\nGenerates a new unsafe.pub\nThat the n and e value in each of these agree.\nThe the n, e, and d value may be used to encrypt and decrypt a letter.\n\n\n\n\n\n\n32 bit Show\n\n\nThe largest keys we can naively fit in the uint64_t type at 32 bit keys.\n\nWhy? Well:\n\nWe do all operations modulo n\nWe must be able to multiple numbers as large as n together.\nThe product of two numbers requires as many bits to store as the both factors.\nSo we must cap intermediate result at 32 bits by capping n at 32 bits.\n\n\nWe get 32 bit n by generating 16 bit primes.\n\nWhy? Well:\n\nn is the product of the primes.\nThe product of two 16 bit numbers is a 32 bit number.\n\n\nWe get 16 bit primes by finding primes less than 2 ** 16 and more than 2 ** 15.\n\nThis is easy to write in hex as 0x8000 and 0x10000.\n\nEnsure your keys are 32 bit.\n\nSimply encrypt values up to 1 &lt;&lt; 31 in size.\n\nHere is a testing script:\n\n\n\ntester.py\n\ndef modexp(m, e, n):\n    if e == 0:\n        return 1\n    if e == 1:\n        return m % n\n    if e % 2:\n        return (m * modexp(m*m % n, e//2, n)) % n\n    return  modexp(m*m % n, e//2, n) % n\n\nmake_encrypt = lambda e, n : lambda m : modexp(m,e,n)\n\nlines = open(\"unsafe.bad\").readlines()\nn = int(lines[1], 16) \ne = int(lines[2], 16) \nd = int(lines[3], 16) \n\nlines = open(\"unsafe.pub\").readlines()\nif n != int(lines[1], 16) or e != int(lines[2], 16):\n    print(\"Public key does not match private key.\")\n    exit()\n\nencrypt = make_encrypt(e,n)\ndecrypt = make_encrypt(d,n)\n\nif all([i == decrypt(encrypt(i)) for i in range(0x100)]):\n    print(\"Keys work for small values.\")\nelse:\n    print(\"Keys failed on small values.\")\n\nif all([i == decrypt(encrypt(i)) for i in range(0,1 &lt;&lt; 31, 1 &lt;&lt; 29)]):\n    print(\"Keys work for larger values.\")\nelse:\n    print(\"Keys failed on larger values.\")\n\n\nBy successfully encrypting and decrypting up to 1 &lt;&lt; 31, the key is large enough for some small tasks, such encrypting the string “hi” - a string of length 3 when including the null terminator, which therefore contains 24 bits of information.\n\n\nPython Reference solution\n\nThis reference solution is logically correct to the best of my knowledge.\nIt is not intended for readability.\n\n\n\nkeygen.py\n\nimport random\n\ndef find_large_prime():\n    is_prime = lambda n : all([n % i for i in range(2, int(n **.5))])\n    candidate = 6 * random.randint(5460,10000) + 1\n    while not is_prime(candidate):\n        candidate += 6\n    return candidate\n\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n    \nlcm = lambda a, b: a * b // egcd(a, b)[0]\np, q = find_large_prime(), find_large_prime()\nn = p * q\ne = 65537\nlmdb = lcm(p - 1,  q - 1)\nd = egcd(e, lmdb)[1]\nwhile d &lt; 0: # fix sign problem\n    d += lcm(p - 1,  q - 1)\nhd = \"-----BEGIN\"\nft = \"-----END\"\ntl = \" UNSAFE PRIVATE KEY-----\\n\"\nopen(\"unsafe.bad\", \"w\").write(f\"{hd}{tl}{n:x}\\n{e:x}\\n{d:x}\\n{ft}{tl}\")\ntl = \" UNSAFE PUBLIC KEY-----\\n\"\nopen(\"unsafe.pub\", \"w\").write(f\"{hd}{tl}{n:x}\\n{e:x}\\n{ft}{tl}\")"
  },
  {
    "objectID": "macros.html",
    "href": "macros.html",
    "title": "Macros",
    "section": "",
    "text": "Review Show\n\n\nGoal: Think about C variables as bits\n\nMy responsibility\n\nI will provide a reference solution in Python\n\nThe reference will differ in the following ways:\n\nThey will not use, as there isn’t great bit manipulation in Python without libraries.\nI will provide an example of a left rotate while the assignment requires a right rotate.\n\n\nI will provide an autograder Containerfile\n\nFollowing the deficiencies of the Python variant, I will also provide a “viewer”.\nI will provide sample output for the viewer.\n\n\nYour responsibility\n\nYou will create a solution in C as an “macros.c” file.\n\nIt will contain 3 macros\n\nCHOICE\nMEDIAN\nROTATE - a “right” rotate.\n\n\nYou will create a private GitHub repository named “crypto”\n\nI recommend creating a new repository of your own, not forking my repository.\nThis makes it easier to manage a private repository.\nUp to you.\n\nYou will create a folder in this repository named “macros”\nYou will store your “macros.c” file in the “macros” folder.\nYou will add me as a collaborator through the GitHub web application\n\n\nMy GitHub account cd-public is attached to my @wu address.\n\n\nIf you would like to fork an existing repository, use this one:\n\nhttps://github.com/cd-c89/crypto\n\n\n\n\n\nTopic Areas\n\n\n\nReview:\nNewish:\n\n\n\n\n- bits\n- Macros\n\n\n- bytes\n- Sizeof\n\n\n- operators\n\n\n\n\n\n\n\n\nPodman Show\n\n\n\nSetup\n\nFor this lab, I used the following Containerfile\n\nSame as lecture\nI didn’t even rename it\n\n\n\n\nContainerfile\n\nFROM ubuntu\n\nRUN apt update && apt install gcc vim\n\n\nI could build with the following, but I already had it built:\n\npodman build -t c89_99 .\n\nI conducted the full hw within a single container’s vim instance.\n\npodman run -it c89_99 vim macros.c\n\n\n\nGitHub Show\n\nRead this in GitHub Docs\n\nInviting collaborators to a personal repository\nYou can add unlimited collaborators on public and private repositories.\n\nAbout collaboration in a personal repository\nTo collaborate with users in a repository that belongs to your personal account on GitHub, you can invite the users as collaborators.\nIf you want to grant more granular access to the repository, you can create a repository within an organization. For more information, see Access permissions on GitHub.\n\n\nInviting a collaborator to a personal repository\nYou can send an invitation to collaborate in your repository directly to someone on GitHub, or to the person’s email address..\nGitHub limits the number of people who can be invited to a repository within a 24-hour period. If you exceed this limit, either wait 24 hours or create an organization to collaborate with more people. For more information, see Creating a new organization from scratch.\n\nAsk for the username of the person you’re inviting as a collaborator. If they don’t have a username yet, they can sign up for GitHub. For more information, see Creating an account on GitHub.\nUnder your repository name, click Settings. If you cannot see the “Settings” tab, select the dropdown menu, then click Settings. \nIn the “Access” section of the sidebar, click Collaborators.\nClick Add people.\nIn the search field, start typing the name of person you want to invite, then click a name in the list of matches.\nClick Add NAME to REPOSITORY.\nThe user will receive an email inviting them to the repository. Once they accept your invitation, they will have collaborator access to your repository.\n\n\n\n\n\n\nSketch Show\n\n\nThe purpose of this homework is to write four (4) bitwise macros\n\nTwo trenanry operations\n\nChoice\nMedian, also called Majority\n\nAnd two rotations\n\nRight, which sees use, and\nLeft, as an academic exercise\n\n\nThese will see use in the next assignment, SHA256\nThey are logically and historically interesting within cryptography\nThere is no graceful way, to my knowledge, to describe these on bits in Python\n\nI will provide pseudo code over tuples of integers.\nI provide conversion functions from strings.\nI am aware of plenty non-graceful ways, but\n\nIf you want to show me one you like send me a DM\n\n\nFor this homework, you will need some form of bit printing\n\nIf your printb from lab is struggling, use %b in debug\nJust remove it before your turn in your work.\n\nWe next introduce macros.\n\n\n\n\nMacros Show\n\n\nThe purpose of this homework is to write four (4) bitwise macros.\nC macros exist in the “preproprocessor”.\nHere is an example of preprocessor directive you have written already:\n\n#include &lt;stdio.h&gt;\n\nYou probably also have used a define directive\n\n#define ABCS \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nThe define directive is used to define something called a macro.\n\nWhen used to define constants, those are just macros that return a value.\n\nWe can also define macros that accept arguments, the most famous are MIN and MAX\n\nI grabbed these from OpenBSD\nThey have fallen out of favor for a complicated reason.\nIn general, use functions.\nWe use macros to learn about them, not to learn to write them.\n\n\n/* Macros for min/max. */\n#define MIN(a,b) (((a)&lt;(b))?(a):(b))\n#define MAX(a,b) (((a)&gt;(b))?(a):(b))\n\nI’d encourage you to play around a bit with these macros.\n\nYou don’t need to fully understand before diving into choice, median, rotate.\nBut a little background can help.\n\n\nint x = 50;\nint a = 'a';\nprintf(\"%d\\n\", MAX(x++,a++))\n\nIn general, you want to use a lot of parens in macros.\n\nTry some things out to try to see why.\n\n\n\n\n\nChoice Show\n\n\nHere I provide Pythonic boolean choice and bitwise choice, and C boolean choice.\nYou will need C bitwise choice.\nChoice is sometimes also referred to as the “ternary operator”\n\nMost famously in .js\nThis is… potentially confusing.\nIt is a ternary operator.\nThe Python operator is non-standard and intentionally ugly.\n\n\n\n\n\nmacros.py\n\n# ref: choice := (e and f) xor ((not e) and g)\n# src: https://en.wikipedia.org/wiki/SHA-2\n\n# We just tell Python the ints are bools\n# We just use \"!=\" as xor\n\ndef _choice(e:bool, f:bool, g:bool) -&gt; bool:\n    return int(f if e else g)\n    # return int((e and f) != ((not e) and g))\n\nimport itertools\n\ntester = list(itertools.product([0, 1],repeat=3))\n\nprint(\" === Boolean Choice === \")\n[print('_choice'+str(test), '-&gt;', _choice(*test)) for test in tester]\n\narrays = (tuple(zip(*tester)))\n\ndef choice(e:tuple[bool], f:tuple[bool], g:tuple[bool]) -&gt; tuple[bool]:\n    return tuple(_choice(_e, _f, _g) for _e, _f, _g in zip(e,f,g))\n\n# This was ugly\n# print('choice'+str(arrays), '-&gt;', choice(*arrays))\n\n# pretty print\nbitstr = lambda bits : \"\".join([str(b) for b in bits])\nbsstrs = lambda arrs : str(tuple(bitstr(bits) for bits in arrs))\nprint(\" === Bitwise Choice === \")\nprint('choice'+bsstrs(arrays), '-&gt;', \"'\"+bitstr(choice(*arrays))+\"'\")\n\n\n\nYou can run it yourself, but here is the output for reference.\n\n === Boolean Choice === \n_choice(0, 0, 0) -&gt; 0\n_choice(0, 0, 1) -&gt; 1\n_choice(0, 1, 0) -&gt; 0\n_choice(0, 1, 1) -&gt; 1\n_choice(1, 0, 0) -&gt; 0\n_choice(1, 0, 1) -&gt; 0\n_choice(1, 1, 0) -&gt; 1\n_choice(1, 1, 1) -&gt; 1\n === Bitwise Choice ===\nchoice('00001111', '00110011', '01010101') -&gt; '01010011'\n\nThe following defines a macro for boolean choice.\n\nThough not particularly gracefully.\n\n\n/* Macro for boolean choice. */\n#define CHOICE(e,f,g) ((e)?(f):(g))\n\nUpdate the macro to perform bitwise choice.\n\nIt should be a single line macro.\nIt should use bitwise operators.\n\n\n\n\n\nMedian Show\n\n\nHere I provide Pythonic boolean median and bitwise median, and C boolean median.\nYou will need C bitwise median.\nI will take it as given you know what a median is.\nThe following code is appended to “macros.py”\n\n\n\n\nmacros.py\n\nimport numpy as np\n\ndef _median(e:bool, f:bool, g:bool) -&gt; bool:\n    return int(np.median([e,f,g]))\n\nprint(\" === Boolean Median === \")\n[print('_median'+str(test), '-&gt;', _median(*test)) for test in tester]\n\ndef median(e:tuple[bool], f:tuple[bool], g:tuple[bool]) -&gt; tuple[bool]:\n    return tuple(_median(_e, _f, _g) for _e, _f, _g in zip(e,f,g))\n\nprint(\" === Bitwise Median === \")\nprint('median'+bsstrs(arrays), '-&gt;', \"'\"+bitstr(median(*arrays))+\"'\")\n\n\n\nYou can run it yourself, but here is the output for reference.\n\n === Boolean Median === \n_median(0, 0, 0) -&gt; 0\n_median(0, 0, 1) -&gt; 0\n_median(0, 1, 0) -&gt; 0\n_median(0, 1, 1) -&gt; 1\n_median(1, 0, 0) -&gt; 0\n_median(1, 0, 1) -&gt; 1\n_median(1, 1, 0) -&gt; 1\n_median(1, 1, 1) -&gt; 1\n === Bitwise Median ===\nmedian('00001111', '00110011', '01010101') -&gt; '00010111'\n\nThe following defines a macro for boolean median.\n\nThough not particularly gracefully.\nC !! is very close to Python bool()\n\n\n/* Macro for boolean median. */\n#define MEDIAN(e,f,g) ((!!(e) + !!(f) + !!(g)) &gt; 1)\n\nUpdate the macro to perform bitwise median.\n\nIt should be a single line macro.\nIt should use bitwise operators.\n\n\n\n\n\nSizeof Show\n\n\nYou may have noticed something while writing printb:\n\nThat not know how many bits you had was annoying.\n\nNot to worry, C can help us.\n\nA char is always exactly 8 bits\n\nThis is also called one byte\nIt is trivial to verifying this experimentally.\n\nEverything else is some multiple of char\nTo find how many char’s big something is, use sizeof\n\nI compile with -w to silence an error.\n\nsizeof doesn’t run an integer, so we shouldn’t print with %d\nMore latter.\n\n\n$ cat sizeof.c\n#include &lt;stdio.h&gt;\n\nint main() {\n        char c = 1;\n        int n = 2;\n        char s[8] = {1,2,3,4,5,6,7,8};\n        printf(\"sizeof(c) = %d, sizeof(n) = %d, sizeof(s) = %d\\n\",\n                        sizeof(c),\n                        sizeof(n),\n                        sizeof(s)\n              );\n        return 0;\n}\n$ gcc sizeof.c -w\n$ ./a.out\nsizeof(c) = 1, sizeof(n) = 4, sizeof(s) = 8\n\nTo make introducing rotate easier, all examples will be on char\nRotate is used in cryptography on things 32 bits in size.\n\nUsually an int is this big, but not always.\nThere’s ways to manage this.\n\nI will test your rotate code on the unsigned int type, which is usually 32 bits in size.\n\nYou can assume 32, for now.\n\n\n\n\n\nRotate Show\n\n\nWe recall cipher rotation.\n\n ____________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n ____________________________\n[ DEFGHIJKLMNOPQRSTUVWXYZABC ] # forward(3)\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n ____________________________\n[ XYZABCDEFGHIJKLMNOPQRSTUVW ] # forward(-3)\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n\nWe understand this as:\n\nTake an array and,\nTake a numerical value…\n\nof less than the length of the array.\n\nMaintain all elements of the array, but\n\nIncrease their index by the numerical value, and\nIndices greater than array length wrap around…\n\nUsing modulo array length.\n\n\n\nWe apply this same idea to the notion of boolean arrays.\n\nA unsigned int is a boolean array of some length.\nIt is possible to determine these lengths.\n\nHere is a Python bitwise rotate on boolean arrays of size 8.\n\n\n\n\nmacros.py\n\ndef rotleft(a:tuple[bool], n:int) -&gt; tuple[bool]:\n    return a[n:] + a[:n]\n\nprint(\" === Bitwise Rotleft === \")\narray = (0,0,1,0,1,1,0,1)\nfor n in range(len(arrays[0])+1):\n    print('rotleft('+bitstr(array)+','+str(n)+') -&gt;', bitstr(rotate(array,n)))\n\n\n\nYou can run it yourself, but here is the output for reference.\n\n === Bitwise Rotleft ===\nrotleft(00101101,0) -&gt; 00101101\nrotleft(00101101,1) -&gt; 01011010\nrotleft(00101101,2) -&gt; 10110100\nrotleft(00101101,3) -&gt; 01101001\nrotleft(00101101,4) -&gt; 11010010\nrotleft(00101101,5) -&gt; 10100101\nrotleft(00101101,6) -&gt; 01001011\nrotleft(00101101,7) -&gt; 10010110\nrotleft(00101101,8) -&gt; 00101101\n\nWe note that this forms a “backward” or “leftward” rotate.\n\nThis is a non-standard rotate, often called lotate or rotleft\nA future assignment will use a “forward” or “rightward” rotate.\n\nWithout showing code, it would look like this.\n\n === Bitwise Rotate ===\nrotate(00101101,0) -&gt; 00101101\nrotate(00101101,1) -&gt; 10010110\nrotate(00101101,2) -&gt; 01001011\nrotate(00101101,3) -&gt; 10100101\nrotate(00101101,4) -&gt; 11010010\nrotate(00101101,5) -&gt; 01101001\nrotate(00101101,6) -&gt; 10110100\nrotate(00101101,7) -&gt; 01011010\nrotate(00101101,8) -&gt; 00101101\n\nNote:\n\nThe C language bitwise operations often seem quite unstable.\n\nIt is a virtual certainty you will encounter pernicious bugs.\nUse unsigned int or just unsigned to avoid negative shenanigans.\nPrint everything all the time.\nLiberally consult printf and C language documentation.\nAsk questions early and often.\n\n\n\n\n\n\nTester Show\n\n\nTester\n\nI am providing the following Containerfile, which will serve as a minimal autograder\n\nIt sets up an Ubuntu container.\nIt downloads a .c and .sh file and script to test.\nIt copies in “macros.c” from your system.\n\n\n\n\nContainerfile\n\nFROM ubuntu \n\nRUN apt update && apt install gcc curl -y\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/macros/tester.c -o tester.c\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/macros/tester.sh -o tester.sh\n\nCOPY macros.c .\n\n\n\nUsage\n\nI built my container via:\n\npodman build -t tester .\n\nI tested my code via:\n\npodman run tester /bin/bash tester.sh\n\nIf the above script returns 0 you are done.\n\nUpload your code to your GitHub on which I am a collaborator.\n\nI will review the most recent version prior to the due date.\n\n\n\nTesting\n\nIt may be non-obvious how the tester functions.\n\nWhen the container is built, it copies in macros.c\nWithin the container, tester.sh:\n\nReads macros.c with grep\n\nFinds lines containing the 3 define statements\nEchos these statements to the command line\n\nEchoes tester.c to the command line\nRuns gcc over the command line input\n\ntester.c intentionally causes a suppressed error (-Wno)\nThe command line code needs its languages specified (-xc)\n\nRuns the output executable\nEchoes the return value via `$?\n\nA return value of n denotes:\n\nPerfect.\nCHOICE is incorrect\nMEDIAN is incorrect but CHOICE is correct\nROTATE is incorrect but CHOICE and MEDIAN are correct\n\nIt may be the case that tester.c runs strangly on your system.\n\nIt assumes an underlying AMD64 device\nGCP cloud console runs on AMD64\n\ndocker, installed by default, is an alternative to podman on GCP.\n\n\n\n\n\n\nViewer\n\nThe tester doesn’t include &lt;stdio.h&gt; so it isn’t easy to examine.\nYou can view sample outputs here.\n\n\n\nviewer.c\n\n#include &lt;stdio.h&gt;\n\n/* your code here\n#define CHOICE(x,y,z) \n#define MEDIAN(x,y,z) \n#define ROTATE(a,b) */\n\nint main() {\n    /* Various Variables*/\n    unsigned a[4] = {0x11110000, 0x11001100, 0x10101010, 0xABCD0123};\n\n    /* CHOICE */\n    printf(\"*Rotates use a decimal shift value, but print in hexadecimal:\\n\");\n    printf(\"CHOICE(\\n%08lX,\\n%08lX,\\n%08lX) = \\n--------\\n%08lX\\n\\n\", a[0], a[1], a[2], CHOICE(a[0], a[1], a[2]));\n    printf(\"MEDIAN(\\n%08lX,\\n%08lX,\\n%08lX) = \\n--------\\n%08lX\\n\\n\", a[0], a[1], a[2], MEDIAN(a[0], a[1], a[2]));\n    printf(\"*Rotates use a decimal shift value, but print in hexadecimal:\\n\");\n    printf(\"ROTATE(\\n%08lX, 04) = \\n--------\\n%08lX\\n\\n\", a[3], ROTATE(a[3], 4));\n    printf(\"ROTATE(\\n%08lX, 08) = \\n--------\\n%08lX\\n\\n\", a[3], ROTATE(a[3], 8));\n    printf(\"ROTATE(\\n%08lX, 12) = \\n--------\\n%08lX\\n\\n\", a[3], ROTATE(a[3], 12));\n    printf(\"ROTATE(\\n%08lX, 02) = \\n--------\\n%08lX\\n\\n\", 0x1000, ROTATE(0x1000, 2));\n    printf(\"ROTATE(\\n%08lX, 30) = \\n--------\\n%08lX\\n\\n\", 0x1000, ROTATE(0x1000, 30));\n\n    return 0;\n}\n\n*Rotates use a decimal shift value, but print in hexadecimal:\nCHOICE(\n11110000,\n11001100,\n10101010) = \n--------\n11001010\n\nMEDIAN(\n11110000,\n11001100,\n10101010) = \n--------\n11101000\n\n*Rotates use a decimal shift value, but print in hexadecimal:\nROTATE(\nABCD0123,04) = \n--------\n3ABCD012\n\nROTATE(\nABCD0123,08) = \n--------\n23ABCD01\n\nROTATE(\nABCD0123,12) = \n--------\n123ABCD0\n\nROTATE(\n00001000,02) = \n--------\n00000400\n\nROTATE(\n00001000,30) = \n--------\n00004000"
  },
  {
    "objectID": "podman.html#kennedy-is-my-middle-name",
    "href": "podman.html#kennedy-is-my-middle-name",
    "title": "Podman",
    "section": "Kennedy is my middle name",
    "text": "Kennedy is my middle name\n\nNot an endorsement; I voted for ******* **** ****** ********!"
  },
  {
    "objectID": "rsainc.html",
    "href": "rsainc.html",
    "title": "RSAinC",
    "section": "",
    "text": "Review Show\n\n\nGoal: Public Key Encryption\n\n\n\nReview:\nNewish:\n\n\n\n\n- RSA\n- modexp\n\n\n- FileIO\n\n\n\n\n\nIn the lab you should’ve finished key generation.\n\nOtherwise, return to a complete the lab.\nKeyGen\n\nThis assignment concerns two distinct executable files:\n\nWrite keys to files\n\nkeygen.c\nCovered in the lab section.\n\nEncrpyt and decrypt based those keys.\n\nrsainc.c\nCovered here, but requiring keygen.c\n\n\n\n\n\n\n\nKeyGen Show\n\n\nThis section summarizes the lab. If you completed the lab, you may move onto “ModExp”\nRecall a sample Python implementation was provided, but was not very readable.\n\n\nA Private Key in 3 Parts\n\nWe recall that the private key minimally contains:\n\nn, a modular base\ne, an encryptor, and\nd, a descryptor.\n\nBased on the KeyGen lab, it should be uncomplicated to calculate these values for 64 bit keys.\nWe will use .bad instead of .pem and insecurely store these values in plaintext.\nWe will then make executables to generate .bad and encrypt content provided a .bad\n\nWe name a .bad so helpfully we don’t use it by accident.\n\nWe will naively print 3 lines of hexademical values, n, e, then d.\nWe will write them to a 5-line file as follows:\n\nThe first line is the precise header text.\nThe second line is the n value in hexadecimal.\nThe third line is the e value, which is 10001.\nThe fourth line is the d value, which should be kept secret.\nThe fifth and final line is the precise footer text.\n\n\n\n\nunsafe.bad\n\n-----BEGIN UNSAFE PRIVATE KEY-----\n95a61f99198bd8e9\n10001\nfbea5e6a3ed31e8f\n-----END UNSAFE PRIVATE KEY-----\n\n\n\nA Public Key in 2 Parts\n\nWe recall that the public key contains, and should only contain:\n\nn, a modular base, and\ne, an encryptor\n\nBased on the KeyGen lab, we already have the ability to write these values to file.\nWe will use .pub instead of .pem or .bad\n\nNot a huge deal how these are stored, actually.\nThe key itself though, is still unsafe to use.\n\nWe will naively print 2 lines of hexademical values, n, then e.\nWe will right them to a file prefixed and suffixed as follows:\n\n\n\nunsafe.pub\n\n-----BEGIN UNSAFE PUBLIC KEY-----\n95a61f99198bd8e9\n10001\n-----END UNSAFE PUBLIC KEY-----\n\n\nEnsure your keys are 32 bit.\n\nSimply encrypt values up to 1 &lt;&lt; 31 in size.\n\nHere is a testing script:\n\ndef modexp(m, e, n):\n    if e == 0:\n        return 1\n    if e == 1:\n        return m % n\n    if e % 2:\n        return (m * modexp(m*m % n, e//2, n)) % n\n    return  modexp(m*m % n, e//2, n) % n\n\nmake_encrypt = lambda e, n : lambda m : modexp(m,e,n)\n\nlines = open(\"unsafe.bad\").readlines()\nn = int(lines[1], 16) \ne = int(lines[2], 16) \nd = int(lines[3], 16) \n\nlines = open(\"unsafe.pub\").readlines()\nif n != int(lines[1], 16) or e != int(lines[2], 16):\n    print(\"Public key does not match private key.\")\n    exit()\n\nencrypt = make_encrypt(e,n)\ndecrypt = make_encrypt(d,n)\n\nif all([i == decrypt(encrypt(i)) for i in range(0x100)]):\n    print(\"Keys work for small values.\")\nelse:\n    print(\"Keys failed on small values.\")\n\nif all([i == decrypt(encrypt(i)) for i in range(0,1 &lt;&lt; 31, 1 &lt;&lt; 29)]):\n    print(\"Keys work for larger values.\")\nelse:\n    print(\"Keys failed on larger values.\")\n\nBy successfully encrypting and decrypting up to 1 &lt;&lt; 31, the key is large enough for some small tasks, such encrypting the string “hi” - a string of length 3 when including the null terminator, which therefore contains 24 bits of information.\n\n\n\n\n\nModExp Show\n\n\nFor C language encryption and decryption, it is necessary to implement “modexp” in C.\nDo so in a novel file, rsainc.c, which should:\n\nAccept 3 command line arguments:\n\nA flag -d or -e for decrypt or encrypt\nThe file name of an input file.\nThe file name of an output file.\n\nIt should:\n\nRead the content of the input file.\nEncrypt or decrypt, as specified, the file contents.\n\nIt should read n and d from “unsafe.bad” to decrypt.\nIt should read n and e from “unsafe.pub” to encrypt.\n\nWrite the encrypted or decrypted content to the output file.\n\n\nHere is a Python implementation.\n\nIt is exceptionally annoying because Python doesn’t like to treat files as holding data rather than text.\n\n\n\n\nrsa_py.py\n\nif __name__ != \"__main__\":\n    exit()\n\nimport sys\n\ndef modexp(m, e, n):\n    if e == 0:\n        return 1\n    if e == 1:\n        return m % n\n    if e % 2:\n        return (m * modexp(m*m % n, e//2, n)) % n\n    return  modexp(m*m % n, e//2, n) % n\n\nif 'e' in sys.argv[1]:\n    lines = open(\"unsafe.pub\").readlines()\n    n, e = int(lines[1], 16), int(lines[2], 16) \nelif 'd' in sys.argv[1]:\n    lines = open(\"unsafe.bad\").readlines()\n    n, e = int(lines[1], 16), int(lines[3], 16) # have to call it e, not d\nelse:\n    exit()\ns = open(sys.argv[2], \"rb\").read()\nm = int.from_bytes(s, byteorder=sys.byteorder, signed=False)\nc = modexp(m,e,n)\ns = open(sys.argv[3], \"wb\").write(c.to_bytes(4, byteorder=sys.byteorder))\n\n\nHint\n\nYou will probably want to use something like this:\n\nfscanf(key, \"-----BEGIN UNSAFE PRIVATE KEY-----\\n%lx\\n%lx\\n-----END UNSAFE PRIVATE KEY-----\\n\", &n, &e);\n\n\n\n\nTester Show\n\n\nI am providing the following Containerfile, which will serve as a minimal autograder.\nUse the tester with caution outside of containers as it deletes files you may want to preserve\n\n\n\nContainerfile\n\nFROM ubuntu \n\nRUN apt update && apt install gcc curl python3 -y\n\nCOPY keygen.c .\n\nCOPY rsainc.c .\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/rsainc/tester.py -o tester.py\n\n\nUsage\n\nI built my container via:\n\npodman build -t tester .\n\nI tested my code via:\n\npodman run tester python3 tester.py\n\nIf the above script returns the following you are done:\n\nUpload your code to your GitHub on which I am a collaborator.\n\nI will review the most recent version prior to the due date.\n\nA+\nA+\nA+\nA+\nA+\nA+\nA+\nA+\n\n\nSketch\n\nWe note the tester performs no error handling, for which you as the student are responsible.\nThis assignment was essentially as follows:\n\nCreate a keygen.c that compiles into a keygen executable with is functionally identical to python3 keygen.py\n\nKey generation should create an unsafe.bad private key and an unsafe.pub public key.\n\nCreate a rsainc.c that compiles into a rsainc executable with is functionally identical to python3 rsa_py.py\n\nEncryption and decryption will use a created unsafe.bad private key and an unsafe.pub public key.\n\n\n\n\n\nTester\n\nThe tester:\n\nEnsures the local directory contains no prior message, key, or executable files.\nUses curl to fetch the latest keygen.py and rsa_py.py from the instructional GitHub\nCompiles keygen.c and rsainc.c will all flags:\n\ngcc keygen.c --std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -o keygen\ngcc rsainc.c --std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -o rsainc\n\nCreates a short message file containing at most two characters.\nTests RSA for all permutations of C and Python for each stage:\n\nGenerates keys\nEncrypts the message, and\nDecrypts the message, then\nPrints the output."
  },
  {
    "objectID": "shainc.html",
    "href": "shainc.html",
    "title": "SHAinC",
    "section": "",
    "text": "Review Show\n\n\nGoal: Implement SHA-256\n\nMy responsibility\n\nI will provide 1 week of instruction on SHA-256\nI will provide an autograder Containerfile\n\nYour responsibility\n\nYou will implement SHA-256 in C89 as an “shainc.c” file\nYou will store your “shainc.c” file in the “shainc” folder on your “crypto” GitHub repository.\n\n\n\n\nTopic Areas\n\n\n\nReview:\nNewish:\n\n\n\n\n- SHA-2\n- C89\n\n\n\n\n\nResources\n\nThe Endian lab\n\nThe “Option” exercise formed my starter code.\n\nMy SHA256 Slides\n\nI used this, and its references. Try scroll mode (press ‘r’)\nWikipedia Pseudocode\n\nI used this to implement the first chunk.\n\nSaravanan Vijayakumaran’s Slides\n\nI used to extend my implementation to multiple chunks.\n\n@manceraio’s .js demo\n\nI used this to debug my endian transforms.\n\n\nYou needn’t compute round constants; I provide them below:\n\n\n\n\n\nConsts Show\n\n\nThe \\(k\\) values: fractional components of the cube roots of the first 64 primes.\nThe \\(h\\) values: fractional components of the square roots of the first 8 primes.\nI found it better to use the established constants than risk a difference in implementation of fractions.\nAlso available on GitHub\n\n\n\nrounds.c\n\n/* round constants */\n/* network endian */\nuint32_t k[64] = {\n    0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,\n    0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,\n    0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,\n    0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,\n    0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,\n    0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,\n    0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,\n    0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,\n    0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,\n    0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,\n    0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,\n    0xd192e819,0xd6990624,0xf40e3585,0x106aa070,\n    0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,\n    0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,\n    0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,\n    0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2\n};\n\n\n\nhashes.c\n\n/* initial hash values (h_0) */\n/* network endian */\nuint32_t h[8] = {\n    0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,\n    0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19\n};\n\n\n\n\nTester Show\n\n\nTester\n\nI am providing the following Containerfile, which will serve as a minimal autograder\n\nIt sets up an Ubuntu container.\nIt downloads a .sh script to test.\nIt copies in “shainc.c” from your system.\n\n\n\n\nContainerfile\n\nFROM ubuntu \n\nRUN apt update && apt install gcc curl -y\n\nRUN curl https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/shainc/tester.sh -o tester.sh\n\nCOPY shainc.c .\n\n\nIt may be easier to review the test script here than on GitHub:\n\n\n\ntester.sh\n\ngcc shainc.c --std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -o shainc\necho \"15 characters.\" &gt; 15char.txt\necho \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\" &gt; lipsum.txt\ncurl https://github.com/cd-public/books/raw/main/pg1342.txt -o austen.txt 2&gt;/dev/null\necho \" === Finding errors vs. reference implementation. === \"\ndiff &lt;(sha256sum 15char.txt) &lt;(./shainc 15char.txt)\ndiff &lt;(sha256sum lipsum.txt) &lt;(./shainc lipsum.txt)\ndiff &lt;(sha256sum austen.txt) &lt;(./shainc austen.txt)\necho \" === Errors printed. No errors denotes \\\"Perfect!\\\" === \"\n\n\n\nUsage\n\nI built my container via:\n\npodman build -t tester .\n\nI tested my code via:\n\npodman run tester /bin/bash tester.sh\n\nIf the above script returns the following you are done:\n\nUpload your code to your GitHub on which I am a collaborator.\n\nI will review the most recent version prior to the due date.\n\n === Finding errors vs. reference implementation. === \n === Errors printed. No errors denotes \"Perfect!\" === \n\n\nTesting\n\nWhen the container is built, it copies in shainc.c\nWithin the container, tester.sh:\n\nCompiles shainc.c as C89 with appropriate gcc flags.\nCreates two (2) small files:\n\n“15char.txt”, a short 15 character text file, and\n“lipsum.txt”, a short text file of several hundred characters.\n\nDownloads a copy of Jane Austen’s “Pride and Prejudice”\n\n“austen.txt”, a file of several hundred thousand characters.\nIt took ~.08s to hash on my system.\n\nHashes all 3 files with:\n\nThe built-in sha256sum utility.\nYour compiled shainc executable.\n\nCompares the differences in output.\nAny difference is indicative of a shainc.c bug of some kind."
  }
]